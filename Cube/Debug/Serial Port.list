
Serial Port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d74  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a44  08006e34  08006e34  00007e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008878  08008878  0000a6a8  2**0
                  CONTENTS
  4 .ARM          00000008  08008878  08008878  00009878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008880  08008880  0000a6a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008880  08008880  00009880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008884  08008884  00009884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000006a8  20000000  08008888  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d1c  200006a8  08008f30  0000a6a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013c4  08008f30  0000b3c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a6a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012243  00000000  00000000  0000a6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ca  00000000  00000000  0001c913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  0001fae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000195de  00000000  00000000  00020b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015746  00000000  00000000  0003a10e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0007ec4f  00000000  00000000  0004f854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000086  00000000  00000000  000ce4a3  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000c6e  00000000  00000000  000ce529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004170  00000000  00000000  000cf198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000d3308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200006a8 	.word	0x200006a8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006e1c 	.word	0x08006e1c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200006ac 	.word	0x200006ac
 8000104:	08006e1c 	.word	0x08006e1c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8d8 	bl	80004a4 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8d3 	bl	80004a4 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzsi2>:
 8000468:	211c      	movs	r1, #28
 800046a:	2301      	movs	r3, #1
 800046c:	041b      	lsls	r3, r3, #16
 800046e:	4298      	cmp	r0, r3
 8000470:	d301      	bcc.n	8000476 <__clzsi2+0xe>
 8000472:	0c00      	lsrs	r0, r0, #16
 8000474:	3910      	subs	r1, #16
 8000476:	0a1b      	lsrs	r3, r3, #8
 8000478:	4298      	cmp	r0, r3
 800047a:	d301      	bcc.n	8000480 <__clzsi2+0x18>
 800047c:	0a00      	lsrs	r0, r0, #8
 800047e:	3908      	subs	r1, #8
 8000480:	091b      	lsrs	r3, r3, #4
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0x22>
 8000486:	0900      	lsrs	r0, r0, #4
 8000488:	3904      	subs	r1, #4
 800048a:	a202      	add	r2, pc, #8	@ (adr r2, 8000494 <__clzsi2+0x2c>)
 800048c:	5c10      	ldrb	r0, [r2, r0]
 800048e:	1840      	adds	r0, r0, r1
 8000490:	4770      	bx	lr
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	02020304 	.word	0x02020304
 8000498:	01010101 	.word	0x01010101
	...

080004a4 <__clzdi2>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	2900      	cmp	r1, #0
 80004a8:	d103      	bne.n	80004b2 <__clzdi2+0xe>
 80004aa:	f7ff ffdd 	bl	8000468 <__clzsi2>
 80004ae:	3020      	adds	r0, #32
 80004b0:	e002      	b.n	80004b8 <__clzdi2+0x14>
 80004b2:	0008      	movs	r0, r1
 80004b4:	f7ff ffd8 	bl	8000468 <__clzsi2>
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <gde021a1_Init>:
  * @brief  Initialize the GDE021A1 EPD Component.
  * @param  None
  * @retval None
  */
void gde021a1_Init(void)
{ 
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
  uint8_t nb_bytes = 0;
 80004c2:	1dfb      	adds	r3, r7, #7
 80004c4:	2200      	movs	r2, #0
 80004c6:	701a      	strb	r2, [r3, #0]

  /* Initialize the GDE021A11 */
  EPD_IO_Init();
 80004c8:	f000 fb52 	bl	8000b70 <EPD_IO_Init>

  EPD_IO_WriteReg(EPD_REG_16);  /* Deep sleep mode disable */
 80004cc:	2010      	movs	r0, #16
 80004ce:	f000 fc2b 	bl	8000d28 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);
 80004d2:	2000      	movs	r0, #0
 80004d4:	f000 fbfe 	bl	8000cd4 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_17);  /* Data Entry Mode Setting */
 80004d8:	2011      	movs	r0, #17
 80004da:	f000 fc25 	bl	8000d28 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x03);
 80004de:	2003      	movs	r0, #3
 80004e0:	f000 fbf8 	bl	8000cd4 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_68);  /* Set the RAM X start/end address */
 80004e4:	2044      	movs	r0, #68	@ 0x44
 80004e6:	f000 fc1f 	bl	8000d28 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);       /* RAM X address start = 00h */
 80004ea:	2000      	movs	r0, #0
 80004ec:	f000 fbf2 	bl	8000cd4 <EPD_IO_WriteData>
  EPD_IO_WriteData(0x11);       /* RAM X adress end = 11h (17 * 4pixels by address = 72 pixels) */
 80004f0:	2011      	movs	r0, #17
 80004f2:	f000 fbef 	bl	8000cd4 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_69);  /* Set the RAM Y start/end address */
 80004f6:	2045      	movs	r0, #69	@ 0x45
 80004f8:	f000 fc16 	bl	8000d28 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);       /* RAM Y address start = 0 */
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 fbe9 	bl	8000cd4 <EPD_IO_WriteData>
  EPD_IO_WriteData(0xAB);       /* RAM Y adress end = 171 */
 8000502:	20ab      	movs	r0, #171	@ 0xab
 8000504:	f000 fbe6 	bl	8000cd4 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_78);  /* Set RAM X Address counter */
 8000508:	204e      	movs	r0, #78	@ 0x4e
 800050a:	f000 fc0d 	bl	8000d28 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);
 800050e:	2000      	movs	r0, #0
 8000510:	f000 fbe0 	bl	8000cd4 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_79);  /* Set RAM Y Address counter */
 8000514:	204f      	movs	r0, #79	@ 0x4f
 8000516:	f000 fc07 	bl	8000d28 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x00);
 800051a:	2000      	movs	r0, #0
 800051c:	f000 fbda 	bl	8000cd4 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_240); /* Booster Set Internal Feedback Selection */
 8000520:	20f0      	movs	r0, #240	@ 0xf0
 8000522:	f000 fc01 	bl	8000d28 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x1F);
 8000526:	201f      	movs	r0, #31
 8000528:	f000 fbd4 	bl	8000cd4 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_33);  /* Disable RAM bypass and set GS transition to GSA = GS0 and GSB = GS3 */
 800052c:	2021      	movs	r0, #33	@ 0x21
 800052e:	f000 fbfb 	bl	8000d28 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x03);
 8000532:	2003      	movs	r0, #3
 8000534:	f000 fbce 	bl	8000cd4 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_44);  /* Write VCOMregister */
 8000538:	202c      	movs	r0, #44	@ 0x2c
 800053a:	f000 fbf5 	bl	8000d28 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0xA0);
 800053e:	20a0      	movs	r0, #160	@ 0xa0
 8000540:	f000 fbc8 	bl	8000cd4 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_60);  /* Border waveform */
 8000544:	203c      	movs	r0, #60	@ 0x3c
 8000546:	f000 fbef 	bl	8000d28 <EPD_IO_WriteReg>
  EPD_IO_WriteData(0x64);
 800054a:	2064      	movs	r0, #100	@ 0x64
 800054c:	f000 fbc2 	bl	8000cd4 <EPD_IO_WriteData>
  EPD_IO_WriteReg(EPD_REG_50);  /* Write LUT register */
 8000550:	2032      	movs	r0, #50	@ 0x32
 8000552:	f000 fbe9 	bl	8000d28 <EPD_IO_WriteReg>
  
  for (nb_bytes=0; nb_bytes<90; nb_bytes++)
 8000556:	1dfb      	adds	r3, r7, #7
 8000558:	2200      	movs	r2, #0
 800055a:	701a      	strb	r2, [r3, #0]
 800055c:	e00b      	b.n	8000576 <gde021a1_Init+0xba>
  {
    EPD_IO_WriteData(WF_LUT[nb_bytes]);
 800055e:	1dfb      	adds	r3, r7, #7
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	4a09      	ldr	r2, [pc, #36]	@ (8000588 <gde021a1_Init+0xcc>)
 8000564:	5cd3      	ldrb	r3, [r2, r3]
 8000566:	0018      	movs	r0, r3
 8000568:	f000 fbb4 	bl	8000cd4 <EPD_IO_WriteData>
  for (nb_bytes=0; nb_bytes<90; nb_bytes++)
 800056c:	1dfb      	adds	r3, r7, #7
 800056e:	781a      	ldrb	r2, [r3, #0]
 8000570:	1dfb      	adds	r3, r7, #7
 8000572:	3201      	adds	r2, #1
 8000574:	701a      	strb	r2, [r3, #0]
 8000576:	1dfb      	adds	r3, r7, #7
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b59      	cmp	r3, #89	@ 0x59
 800057c:	d9ef      	bls.n	800055e <gde021a1_Init+0xa2>
  }
}
 800057e:	46c0      	nop			@ (mov r8, r8)
 8000580:	46c0      	nop			@ (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	b002      	add	sp, #8
 8000586:	bd80      	pop	{r7, pc}
 8000588:	08007a14 	.word	0x08007a14

0800058c <gde021a1_WritePixel>:
  * @brief  Writes 4 dots.
  * @param  HEX_Code: specifies the Data to write.
  * @retval None
  */
void gde021a1_WritePixel(uint8_t HEX_Code)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	0002      	movs	r2, r0
 8000594:	1dfb      	adds	r3, r7, #7
 8000596:	701a      	strb	r2, [r3, #0]
  /* Prepare the register to write data on the RAM */
  EPD_IO_WriteReg(EPD_REG_36);
 8000598:	2024      	movs	r0, #36	@ 0x24
 800059a:	f000 fbc5 	bl	8000d28 <EPD_IO_WriteReg>

  /* Send the data to write */
  EPD_IO_WriteData(HEX_Code);
 800059e:	1dfb      	adds	r3, r7, #7
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	0018      	movs	r0, r3
 80005a6:	f000 fb95 	bl	8000cd4 <EPD_IO_WriteData>
}
 80005aa:	46c0      	nop			@ (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	b002      	add	sp, #8
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <gde021a1_SetDisplayWindow>:
  * @param  Width: display window width.
  * @param  Height: display window height.
  * @retval None
*/
void gde021a1_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80005b2:	b5b0      	push	{r4, r5, r7, lr}
 80005b4:	b082      	sub	sp, #8
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	0005      	movs	r5, r0
 80005ba:	000c      	movs	r4, r1
 80005bc:	0010      	movs	r0, r2
 80005be:	0019      	movs	r1, r3
 80005c0:	1dbb      	adds	r3, r7, #6
 80005c2:	1c2a      	adds	r2, r5, #0
 80005c4:	801a      	strh	r2, [r3, #0]
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	1c22      	adds	r2, r4, #0
 80005ca:	801a      	strh	r2, [r3, #0]
 80005cc:	1cbb      	adds	r3, r7, #2
 80005ce:	1c02      	adds	r2, r0, #0
 80005d0:	801a      	strh	r2, [r3, #0]
 80005d2:	003b      	movs	r3, r7
 80005d4:	1c0a      	adds	r2, r1, #0
 80005d6:	801a      	strh	r2, [r3, #0]
  /* Set Y position and the height */
  EPD_IO_WriteReg(EPD_REG_68);
 80005d8:	2044      	movs	r0, #68	@ 0x44
 80005da:	f000 fba5 	bl	8000d28 <EPD_IO_WriteReg>
  EPD_IO_WriteData(Ypos);
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	0018      	movs	r0, r3
 80005e4:	f000 fb76 	bl	8000cd4 <EPD_IO_WriteData>
  EPD_IO_WriteData(Height);
 80005e8:	003b      	movs	r3, r7
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	0018      	movs	r0, r3
 80005ee:	f000 fb71 	bl	8000cd4 <EPD_IO_WriteData>
  /* Set X position and the width */
  EPD_IO_WriteReg(EPD_REG_69);
 80005f2:	2045      	movs	r0, #69	@ 0x45
 80005f4:	f000 fb98 	bl	8000d28 <EPD_IO_WriteReg>
  EPD_IO_WriteData(Xpos);
 80005f8:	1dbb      	adds	r3, r7, #6
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 fb69 	bl	8000cd4 <EPD_IO_WriteData>
  EPD_IO_WriteData(Width);
 8000602:	1cbb      	adds	r3, r7, #2
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	0018      	movs	r0, r3
 8000608:	f000 fb64 	bl	8000cd4 <EPD_IO_WriteData>
  /* Set the height counter */
  EPD_IO_WriteReg(EPD_REG_78);
 800060c:	204e      	movs	r0, #78	@ 0x4e
 800060e:	f000 fb8b 	bl	8000d28 <EPD_IO_WriteReg>
  EPD_IO_WriteData(Ypos);
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	0018      	movs	r0, r3
 8000618:	f000 fb5c 	bl	8000cd4 <EPD_IO_WriteData>
  /* Set the width counter */
  EPD_IO_WriteReg(EPD_REG_79);
 800061c:	204f      	movs	r0, #79	@ 0x4f
 800061e:	f000 fb83 	bl	8000d28 <EPD_IO_WriteReg>
  EPD_IO_WriteData(Xpos);
 8000622:	1dbb      	adds	r3, r7, #6
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	0018      	movs	r0, r3
 8000628:	f000 fb54 	bl	8000cd4 <EPD_IO_WriteData>
}
 800062c:	46c0      	nop			@ (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	b002      	add	sp, #8
 8000632:	bdb0      	pop	{r4, r5, r7, pc}

08000634 <gde021a1_GetEpdPixelWidth>:
  * @brief  Gets the EPD pixel Width.
  * @param  None
  * @retval The EPD Pixel Width
  */
uint16_t gde021a1_GetEpdPixelWidth(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  return GDE021A1_EPD_PIXEL_WIDTH;
 8000638:	23ac      	movs	r3, #172	@ 0xac
}
 800063a:	0018      	movs	r0, r3
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <gde021a1_GetEpdPixelHeight>:
  * @brief  Gets the EPD pixel Height.
  * @param  None
  * @retval The EPD Pixel Height
  */
uint16_t gde021a1_GetEpdPixelHeight(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  return GDE021A1_EPD_PIXEL_HEIGHT;
 8000644:	2312      	movs	r3, #18
}
 8000646:	0018      	movs	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <gde021a1_RefreshDisplay>:
  * @brief  Activates display update sequence.
  * @param  None
  * @retval None
  */
void gde021a1_RefreshDisplay(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* Write on the Display update control register */
  EPD_IO_WriteReg(EPD_REG_34);
 8000650:	2022      	movs	r0, #34	@ 0x22
 8000652:	f000 fb69 	bl	8000d28 <EPD_IO_WriteReg>
  
  /* Display update data sequence option */
  EPD_IO_WriteData(0xC4);
 8000656:	20c4      	movs	r0, #196	@ 0xc4
 8000658:	f000 fb3c 	bl	8000cd4 <EPD_IO_WriteData>

  /* Launching the update: Nothing should interrupt this sequence in order
     to avoid display corruption */
  EPD_IO_WriteReg(EPD_REG_32);
 800065c:	2020      	movs	r0, #32
 800065e:	f000 fb63 	bl	8000d28 <EPD_IO_WriteReg>
}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <gde021a1_CloseChargePump>:
  * @brief  Disables the clock and the charge pump.
  * @param  None
  * @retval None
  */
void gde021a1_CloseChargePump(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* Write on the Display update control register */
  EPD_IO_WriteReg(EPD_REG_34);
 800066c:	2022      	movs	r0, #34	@ 0x22
 800066e:	f000 fb5b 	bl	8000d28 <EPD_IO_WriteReg>

  /* Disable CP then Disable Clock signal */  
  EPD_IO_WriteData(0x03);
 8000672:	2003      	movs	r0, #3
 8000674:	f000 fb2e 	bl	8000cd4 <EPD_IO_WriteData>

  /* Launching the update: Nothing should interrupt this sequence in order
     to avoid display corruption */
  EPD_IO_WriteReg(EPD_REG_32);
 8000678:	2020      	movs	r0, #32
 800067a:	f000 fb55 	bl	8000d28 <EPD_IO_WriteReg>
}
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <gde021a1_DrawImage>:
  * @note   Xsize have to be a multiple of 4 
  * @param  Ysize: Image Y size in the EPD
  * @retval None
  */
void gde021a1_DrawImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8000684:	b5b0      	push	{r4, r5, r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	0005      	movs	r5, r0
 800068c:	000c      	movs	r4, r1
 800068e:	0010      	movs	r0, r2
 8000690:	0019      	movs	r1, r3
 8000692:	1dbb      	adds	r3, r7, #6
 8000694:	1c2a      	adds	r2, r5, #0
 8000696:	801a      	strh	r2, [r3, #0]
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	1c22      	adds	r2, r4, #0
 800069c:	801a      	strh	r2, [r3, #0]
 800069e:	1cbb      	adds	r3, r7, #2
 80006a0:	1c02      	adds	r2, r0, #0
 80006a2:	801a      	strh	r2, [r3, #0]
 80006a4:	003b      	movs	r3, r7
 80006a6:	1c0a      	adds	r2, r1, #0
 80006a8:	801a      	strh	r2, [r3, #0]
  uint32_t i, j = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
  uint8_t pixels_4 = 0;
 80006ae:	230f      	movs	r3, #15
 80006b0:	18fb      	adds	r3, r7, r3
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
  uint8_t pixels_4_grey[4];
  uint8_t nb_4_pixels, data_res = 0;
 80006b6:	230d      	movs	r3, #13
 80006b8:	18fb      	adds	r3, r7, r3
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
  
  /* Prepare the register to write data on the RAM */
  EPD_IO_WriteReg(EPD_REG_36);
 80006be:	2024      	movs	r0, #36	@ 0x24
 80006c0:	f000 fb32 	bl	8000d28 <EPD_IO_WriteReg>
  
  /* X size is a multiple of 8 */
  if ((Xsize % 8) == 0)
 80006c4:	1cbb      	adds	r3, r7, #2
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	2207      	movs	r2, #7
 80006ca:	4013      	ands	r3, r2
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d000      	beq.n	80006d4 <gde021a1_DrawImage+0x50>
 80006d2:	e087      	b.n	80007e4 <gde021a1_DrawImage+0x160>
  {
    for (i= 0; i< ((((Ysize) * (Xsize/4)))/2) ; i++)
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	e073      	b.n	80007c2 <gde021a1_DrawImage+0x13e>
    {
      /* Get the current data */
      pixels_4 = pdata[i];
 80006da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	18d2      	adds	r2, r2, r3
 80006e0:	210f      	movs	r1, #15
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	7812      	ldrb	r2, [r2, #0]
 80006e6:	701a      	strb	r2, [r3, #0]
      if (pixels_4 !=0)
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d05f      	beq.n	80007b0 <gde021a1_DrawImage+0x12c>
      {
        /* One byte read codes 8 pixels in 1-bit bitmap */
        for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 80006f0:	230e      	movs	r3, #14
 80006f2:	18fb      	adds	r3, r7, r3
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
 80006f8:	e054      	b.n	80007a4 <gde021a1_DrawImage+0x120>
        {
          /* Processing 8 pixels */
          /* Preparing the 4 pixels coded with 4 grey level per pixel
             from a monochrome xbm file */
          for (j= 0; j<4; j++)
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
 80006fe:	e029      	b.n	8000754 <gde021a1_DrawImage+0xd0>
          {
            if (((pixels_4) & 0x01) == 1)
 8000700:	230f      	movs	r3, #15
 8000702:	18fb      	adds	r3, r7, r3
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2201      	movs	r2, #1
 8000708:	4013      	ands	r3, r2
 800070a:	d00d      	beq.n	8000728 <gde021a1_DrawImage+0xa4>
            {
              /* Two LSB is coding black in 4 grey level */
              pixels_4_grey[j] &= 0xFC;
 800070c:	2008      	movs	r0, #8
 800070e:	183a      	adds	r2, r7, r0
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	18d3      	adds	r3, r2, r3
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2203      	movs	r2, #3
 8000718:	4393      	bics	r3, r2
 800071a:	b2d9      	uxtb	r1, r3
 800071c:	183a      	adds	r2, r7, r0
 800071e:	693b      	ldr	r3, [r7, #16]
 8000720:	18d3      	adds	r3, r2, r3
 8000722:	1c0a      	adds	r2, r1, #0
 8000724:	701a      	strb	r2, [r3, #0]
 8000726:	e00c      	b.n	8000742 <gde021a1_DrawImage+0xbe>
            }
            else
            {
              /* Two LSB is coded white in 4 grey level */
              pixels_4_grey[j] |= 0x03;
 8000728:	2008      	movs	r0, #8
 800072a:	183a      	adds	r2, r7, r0
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	18d3      	adds	r3, r2, r3
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2203      	movs	r2, #3
 8000734:	4313      	orrs	r3, r2
 8000736:	b2d9      	uxtb	r1, r3
 8000738:	183a      	adds	r2, r7, r0
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	18d3      	adds	r3, r2, r3
 800073e:	1c0a      	adds	r2, r1, #0
 8000740:	701a      	strb	r2, [r3, #0]
            }
            pixels_4 = pixels_4 >> 1;	
 8000742:	220f      	movs	r2, #15
 8000744:	18bb      	adds	r3, r7, r2
 8000746:	18ba      	adds	r2, r7, r2
 8000748:	7812      	ldrb	r2, [r2, #0]
 800074a:	0852      	lsrs	r2, r2, #1
 800074c:	701a      	strb	r2, [r3, #0]
          for (j= 0; j<4; j++)
 800074e:	693b      	ldr	r3, [r7, #16]
 8000750:	3301      	adds	r3, #1
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	2b03      	cmp	r3, #3
 8000758:	d9d2      	bls.n	8000700 <gde021a1_DrawImage+0x7c>
          }
          
          /* Processing 4 pixels */
          /* Format the data to have the Lower pixel number sent on the MSB for the SPI to fit with the RAM 
             EPD topology */
          data_res = pixels_4_grey[0] << 6 | pixels_4_grey[1] << 4 | pixels_4_grey[2] << 2 | pixels_4_grey[3] << 0;
 800075a:	2108      	movs	r1, #8
 800075c:	187b      	adds	r3, r7, r1
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	019b      	lsls	r3, r3, #6
 8000762:	b25a      	sxtb	r2, r3
 8000764:	187b      	adds	r3, r7, r1
 8000766:	785b      	ldrb	r3, [r3, #1]
 8000768:	011b      	lsls	r3, r3, #4
 800076a:	b25b      	sxtb	r3, r3
 800076c:	4313      	orrs	r3, r2
 800076e:	b25a      	sxtb	r2, r3
 8000770:	187b      	adds	r3, r7, r1
 8000772:	789b      	ldrb	r3, [r3, #2]
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	b25b      	sxtb	r3, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	b25a      	sxtb	r2, r3
 800077c:	187b      	adds	r3, r7, r1
 800077e:	78db      	ldrb	r3, [r3, #3]
 8000780:	b25b      	sxtb	r3, r3
 8000782:	4313      	orrs	r3, r2
 8000784:	b25a      	sxtb	r2, r3
 8000786:	210d      	movs	r1, #13
 8000788:	187b      	adds	r3, r7, r1
 800078a:	701a      	strb	r2, [r3, #0]
          
          /* Send the data to the EPD's RAM through SPI */
          EPD_IO_WriteData(data_res);
 800078c:	187b      	adds	r3, r7, r1
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	b29b      	uxth	r3, r3
 8000792:	0018      	movs	r0, r3
 8000794:	f000 fa9e 	bl	8000cd4 <EPD_IO_WriteData>
        for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 8000798:	210e      	movs	r1, #14
 800079a:	187b      	adds	r3, r7, r1
 800079c:	781a      	ldrb	r2, [r3, #0]
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	3201      	adds	r2, #1
 80007a2:	701a      	strb	r2, [r3, #0]
 80007a4:	230e      	movs	r3, #14
 80007a6:	18fb      	adds	r3, r7, r3
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d9a5      	bls.n	80006fa <gde021a1_DrawImage+0x76>
 80007ae:	e005      	b.n	80007bc <gde021a1_DrawImage+0x138>
      }
      else
      {	
        /* 1 byte read from xbm files is equivalent to 8 pixels in the 
           other words 2 bytes to be transferred */
        EPD_IO_WriteData(0xFF);
 80007b0:	20ff      	movs	r0, #255	@ 0xff
 80007b2:	f000 fa8f 	bl	8000cd4 <EPD_IO_WriteData>
        EPD_IO_WriteData(0xFF);
 80007b6:	20ff      	movs	r0, #255	@ 0xff
 80007b8:	f000 fa8c 	bl	8000cd4 <EPD_IO_WriteData>
    for (i= 0; i< ((((Ysize) * (Xsize/4)))/2) ; i++)
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	3301      	adds	r3, #1
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	003b      	movs	r3, r7
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	1cba      	adds	r2, r7, #2
 80007c8:	8812      	ldrh	r2, [r2, #0]
 80007ca:	0892      	lsrs	r2, r2, #2
 80007cc:	b292      	uxth	r2, r2
 80007ce:	4353      	muls	r3, r2
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	da00      	bge.n	80007d6 <gde021a1_DrawImage+0x152>
 80007d4:	3301      	adds	r3, #1
 80007d6:	105b      	asrs	r3, r3, #1
 80007d8:	001a      	movs	r2, r3
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	4293      	cmp	r3, r2
 80007de:	d200      	bcs.n	80007e2 <gde021a1_DrawImage+0x15e>
 80007e0:	e77b      	b.n	80006da <gde021a1_DrawImage+0x56>
          EPD_IO_WriteData(0xFF);
        }
      }
    }
  }
}
 80007e2:	e10f      	b.n	8000a04 <gde021a1_DrawImage+0x380>
    for (i= 0; i< ((((Ysize) * ((Xsize/4)+1))/2)) ; i++)
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	e0fb      	b.n	80009e2 <gde021a1_DrawImage+0x35e>
      pixels_4 = pdata[i];
 80007ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	18d2      	adds	r2, r2, r3
 80007f0:	230f      	movs	r3, #15
 80007f2:	18fb      	adds	r3, r7, r3
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	701a      	strb	r2, [r3, #0]
      if (((i+1) % (((Xsize/4)+1)/2)) != 0)
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	1cbb      	adds	r3, r7, #2
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	089b      	lsrs	r3, r3, #2
 8000802:	b29b      	uxth	r3, r3
 8000804:	3301      	adds	r3, #1
 8000806:	2b00      	cmp	r3, #0
 8000808:	da00      	bge.n	800080c <gde021a1_DrawImage+0x188>
 800080a:	3301      	adds	r3, #1
 800080c:	105b      	asrs	r3, r3, #1
 800080e:	0019      	movs	r1, r3
 8000810:	0010      	movs	r0, r2
 8000812:	f7ff fd09 	bl	8000228 <__aeabi_uidivmod>
 8000816:	1e0b      	subs	r3, r1, #0
 8000818:	d100      	bne.n	800081c <gde021a1_DrawImage+0x198>
 800081a:	e071      	b.n	8000900 <gde021a1_DrawImage+0x27c>
        if (pixels_4 !=0)
 800081c:	230f      	movs	r3, #15
 800081e:	18fb      	adds	r3, r7, r3
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d05f      	beq.n	80008e6 <gde021a1_DrawImage+0x262>
          for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 8000826:	230e      	movs	r3, #14
 8000828:	18fb      	adds	r3, r7, r3
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	e054      	b.n	80008da <gde021a1_DrawImage+0x256>
            for (j= 0; j<4; j++)
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	e029      	b.n	800088a <gde021a1_DrawImage+0x206>
              if (((pixels_4) & 0x01) == 1)
 8000836:	230f      	movs	r3, #15
 8000838:	18fb      	adds	r3, r7, r3
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2201      	movs	r2, #1
 800083e:	4013      	ands	r3, r2
 8000840:	d00d      	beq.n	800085e <gde021a1_DrawImage+0x1da>
                pixels_4_grey[j] &= 0xFC;
 8000842:	2008      	movs	r0, #8
 8000844:	183a      	adds	r2, r7, r0
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	18d3      	adds	r3, r2, r3
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2203      	movs	r2, #3
 800084e:	4393      	bics	r3, r2
 8000850:	b2d9      	uxtb	r1, r3
 8000852:	183a      	adds	r2, r7, r0
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	18d3      	adds	r3, r2, r3
 8000858:	1c0a      	adds	r2, r1, #0
 800085a:	701a      	strb	r2, [r3, #0]
 800085c:	e00c      	b.n	8000878 <gde021a1_DrawImage+0x1f4>
                pixels_4_grey[j] |= 0x03;
 800085e:	2008      	movs	r0, #8
 8000860:	183a      	adds	r2, r7, r0
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	18d3      	adds	r3, r2, r3
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2203      	movs	r2, #3
 800086a:	4313      	orrs	r3, r2
 800086c:	b2d9      	uxtb	r1, r3
 800086e:	183a      	adds	r2, r7, r0
 8000870:	693b      	ldr	r3, [r7, #16]
 8000872:	18d3      	adds	r3, r2, r3
 8000874:	1c0a      	adds	r2, r1, #0
 8000876:	701a      	strb	r2, [r3, #0]
              pixels_4 = pixels_4 >> 1;
 8000878:	220f      	movs	r2, #15
 800087a:	18bb      	adds	r3, r7, r2
 800087c:	18ba      	adds	r2, r7, r2
 800087e:	7812      	ldrb	r2, [r2, #0]
 8000880:	0852      	lsrs	r2, r2, #1
 8000882:	701a      	strb	r2, [r3, #0]
            for (j= 0; j<4; j++)
 8000884:	693b      	ldr	r3, [r7, #16]
 8000886:	3301      	adds	r3, #1
 8000888:	613b      	str	r3, [r7, #16]
 800088a:	693b      	ldr	r3, [r7, #16]
 800088c:	2b03      	cmp	r3, #3
 800088e:	d9d2      	bls.n	8000836 <gde021a1_DrawImage+0x1b2>
            data_res = pixels_4_grey[0] << 6 | pixels_4_grey[1] << 4 | pixels_4_grey[2] << 2 | pixels_4_grey[3] << 0;
 8000890:	2108      	movs	r1, #8
 8000892:	187b      	adds	r3, r7, r1
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	019b      	lsls	r3, r3, #6
 8000898:	b25a      	sxtb	r2, r3
 800089a:	187b      	adds	r3, r7, r1
 800089c:	785b      	ldrb	r3, [r3, #1]
 800089e:	011b      	lsls	r3, r3, #4
 80008a0:	b25b      	sxtb	r3, r3
 80008a2:	4313      	orrs	r3, r2
 80008a4:	b25a      	sxtb	r2, r3
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	789b      	ldrb	r3, [r3, #2]
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	b25b      	sxtb	r3, r3
 80008ae:	4313      	orrs	r3, r2
 80008b0:	b25a      	sxtb	r2, r3
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	78db      	ldrb	r3, [r3, #3]
 80008b6:	b25b      	sxtb	r3, r3
 80008b8:	4313      	orrs	r3, r2
 80008ba:	b25a      	sxtb	r2, r3
 80008bc:	210d      	movs	r1, #13
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	701a      	strb	r2, [r3, #0]
            EPD_IO_WriteData(data_res);
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 fa03 	bl	8000cd4 <EPD_IO_WriteData>
          for (nb_4_pixels = 0; nb_4_pixels < 2; nb_4_pixels++)
 80008ce:	210e      	movs	r1, #14
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	781a      	ldrb	r2, [r3, #0]
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	3201      	adds	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
 80008da:	230e      	movs	r3, #14
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d9a5      	bls.n	8000830 <gde021a1_DrawImage+0x1ac>
 80008e4:	e07a      	b.n	80009dc <gde021a1_DrawImage+0x358>
        else if (pixels_4 == 0)
 80008e6:	230f      	movs	r3, #15
 80008e8:	18fb      	adds	r3, r7, r3
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d000      	beq.n	80008f2 <gde021a1_DrawImage+0x26e>
 80008f0:	e074      	b.n	80009dc <gde021a1_DrawImage+0x358>
          EPD_IO_WriteData(0xFF);
 80008f2:	20ff      	movs	r0, #255	@ 0xff
 80008f4:	f000 f9ee 	bl	8000cd4 <EPD_IO_WriteData>
          EPD_IO_WriteData(0xFF);
 80008f8:	20ff      	movs	r0, #255	@ 0xff
 80008fa:	f000 f9eb 	bl	8000cd4 <EPD_IO_WriteData>
 80008fe:	e06d      	b.n	80009dc <gde021a1_DrawImage+0x358>
      else if (((i+1) % (((Xsize/4)+1)/2)) == 0)
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	1c5a      	adds	r2, r3, #1
 8000904:	1cbb      	adds	r3, r7, #2
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	089b      	lsrs	r3, r3, #2
 800090a:	b29b      	uxth	r3, r3
 800090c:	3301      	adds	r3, #1
 800090e:	2b00      	cmp	r3, #0
 8000910:	da00      	bge.n	8000914 <gde021a1_DrawImage+0x290>
 8000912:	3301      	adds	r3, #1
 8000914:	105b      	asrs	r3, r3, #1
 8000916:	0019      	movs	r1, r3
 8000918:	0010      	movs	r0, r2
 800091a:	f7ff fc85 	bl	8000228 <__aeabi_uidivmod>
 800091e:	1e0b      	subs	r3, r1, #0
 8000920:	d15c      	bne.n	80009dc <gde021a1_DrawImage+0x358>
        if (pixels_4 !=0xf0)
 8000922:	230f      	movs	r3, #15
 8000924:	18fb      	adds	r3, r7, r3
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2bf0      	cmp	r3, #240	@ 0xf0
 800092a:	d04f      	beq.n	80009cc <gde021a1_DrawImage+0x348>
          for (j= 0; j<4; j++)
 800092c:	2300      	movs	r3, #0
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	e029      	b.n	8000986 <gde021a1_DrawImage+0x302>
            if (((pixels_4) & 0x01) == 1)
 8000932:	230f      	movs	r3, #15
 8000934:	18fb      	adds	r3, r7, r3
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2201      	movs	r2, #1
 800093a:	4013      	ands	r3, r2
 800093c:	d00d      	beq.n	800095a <gde021a1_DrawImage+0x2d6>
              pixels_4_grey[j] &= 0xFC;
 800093e:	2008      	movs	r0, #8
 8000940:	183a      	adds	r2, r7, r0
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	18d3      	adds	r3, r2, r3
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2203      	movs	r2, #3
 800094a:	4393      	bics	r3, r2
 800094c:	b2d9      	uxtb	r1, r3
 800094e:	183a      	adds	r2, r7, r0
 8000950:	693b      	ldr	r3, [r7, #16]
 8000952:	18d3      	adds	r3, r2, r3
 8000954:	1c0a      	adds	r2, r1, #0
 8000956:	701a      	strb	r2, [r3, #0]
 8000958:	e00c      	b.n	8000974 <gde021a1_DrawImage+0x2f0>
              pixels_4_grey[j] |= 0x03;
 800095a:	2008      	movs	r0, #8
 800095c:	183a      	adds	r2, r7, r0
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	18d3      	adds	r3, r2, r3
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2203      	movs	r2, #3
 8000966:	4313      	orrs	r3, r2
 8000968:	b2d9      	uxtb	r1, r3
 800096a:	183a      	adds	r2, r7, r0
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	18d3      	adds	r3, r2, r3
 8000970:	1c0a      	adds	r2, r1, #0
 8000972:	701a      	strb	r2, [r3, #0]
            pixels_4 = pixels_4 >> 1;	
 8000974:	220f      	movs	r2, #15
 8000976:	18bb      	adds	r3, r7, r2
 8000978:	18ba      	adds	r2, r7, r2
 800097a:	7812      	ldrb	r2, [r2, #0]
 800097c:	0852      	lsrs	r2, r2, #1
 800097e:	701a      	strb	r2, [r3, #0]
          for (j= 0; j<4; j++)
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	3301      	adds	r3, #1
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	2b03      	cmp	r3, #3
 800098a:	d9d2      	bls.n	8000932 <gde021a1_DrawImage+0x2ae>
          data_res = pixels_4_grey[0] << 6 | pixels_4_grey[1] << 4 | pixels_4_grey[2] << 2 | pixels_4_grey[3] << 0;
 800098c:	2108      	movs	r1, #8
 800098e:	187b      	adds	r3, r7, r1
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	019b      	lsls	r3, r3, #6
 8000994:	b25a      	sxtb	r2, r3
 8000996:	187b      	adds	r3, r7, r1
 8000998:	785b      	ldrb	r3, [r3, #1]
 800099a:	011b      	lsls	r3, r3, #4
 800099c:	b25b      	sxtb	r3, r3
 800099e:	4313      	orrs	r3, r2
 80009a0:	b25a      	sxtb	r2, r3
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	789b      	ldrb	r3, [r3, #2]
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	b25b      	sxtb	r3, r3
 80009aa:	4313      	orrs	r3, r2
 80009ac:	b25a      	sxtb	r2, r3
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	78db      	ldrb	r3, [r3, #3]
 80009b2:	b25b      	sxtb	r3, r3
 80009b4:	4313      	orrs	r3, r2
 80009b6:	b25a      	sxtb	r2, r3
 80009b8:	210d      	movs	r1, #13
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	701a      	strb	r2, [r3, #0]
          EPD_IO_WriteData(data_res);
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	0018      	movs	r0, r3
 80009c6:	f000 f985 	bl	8000cd4 <EPD_IO_WriteData>
 80009ca:	e007      	b.n	80009dc <gde021a1_DrawImage+0x358>
        else if (pixels_4 == 0xf0)
 80009cc:	230f      	movs	r3, #15
 80009ce:	18fb      	adds	r3, r7, r3
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2bf0      	cmp	r3, #240	@ 0xf0
 80009d4:	d102      	bne.n	80009dc <gde021a1_DrawImage+0x358>
          EPD_IO_WriteData(0xFF);
 80009d6:	20ff      	movs	r0, #255	@ 0xff
 80009d8:	f000 f97c 	bl	8000cd4 <EPD_IO_WriteData>
    for (i= 0; i< ((((Ysize) * ((Xsize/4)+1))/2)) ; i++)
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	3301      	adds	r3, #1
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	003b      	movs	r3, r7
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	1cba      	adds	r2, r7, #2
 80009e8:	8812      	ldrh	r2, [r2, #0]
 80009ea:	0892      	lsrs	r2, r2, #2
 80009ec:	b292      	uxth	r2, r2
 80009ee:	3201      	adds	r2, #1
 80009f0:	4353      	muls	r3, r2
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	da00      	bge.n	80009f8 <gde021a1_DrawImage+0x374>
 80009f6:	3301      	adds	r3, #1
 80009f8:	105b      	asrs	r3, r3, #1
 80009fa:	001a      	movs	r2, r3
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d200      	bcs.n	8000a04 <gde021a1_DrawImage+0x380>
 8000a02:	e6f2      	b.n	80007ea <gde021a1_DrawImage+0x166>
}
 8000a04:	46c0      	nop			@ (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b006      	add	sp, #24
 8000a0a:	bdb0      	pop	{r4, r5, r7, pc}

08000a0c <SPIx_Init>:
  * @brief  SPIx Bus initialization
  * @param  None
  * @retval None
  */
static void SPIx_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000a10:	4b1b      	ldr	r3, [pc, #108]	@ (8000a80 <SPIx_Init+0x74>)
 8000a12:	0018      	movs	r0, r3
 8000a14:	f003 fcfa 	bl	800440c <HAL_SPI_GetState>
 8000a18:	1e03      	subs	r3, r0, #0
 8000a1a:	d12d      	bne.n	8000a78 <SPIx_Init+0x6c>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8000a1c:	4b18      	ldr	r3, [pc, #96]	@ (8000a80 <SPIx_Init+0x74>)
 8000a1e:	4a19      	ldr	r2, [pc, #100]	@ (8000a84 <SPIx_Init+0x78>)
 8000a20:	601a      	str	r2, [r3, #0]
    
    /* On STM32L0538-DISCO, EPD ID cannot be read then keep a common configuration */
    /* for EPD (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a EPD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Mode               = SPI_MODE_MASTER;
 8000a22:	4b17      	ldr	r3, [pc, #92]	@ (8000a80 <SPIx_Init+0x74>)
 8000a24:	2282      	movs	r2, #130	@ 0x82
 8000a26:	0052      	lsls	r2, r2, #1
 8000a28:	605a      	str	r2, [r3, #4]
    SpiHandle.Init.Direction          = SPI_DIRECTION_2LINES;
 8000a2a:	4b15      	ldr	r3, [pc, #84]	@ (8000a80 <SPIx_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.BaudRatePrescaler  = SPI_BAUDRATEPRESCALER_8;
 8000a30:	4b13      	ldr	r3, [pc, #76]	@ (8000a80 <SPIx_Init+0x74>)
 8000a32:	2210      	movs	r2, #16
 8000a34:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.DataSize           = SPI_DATASIZE_8BIT;
 8000a36:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <SPIx_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.CLKPhase           = SPI_PHASE_2EDGE;
 8000a3c:	4b10      	ldr	r3, [pc, #64]	@ (8000a80 <SPIx_Init+0x74>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity        = SPI_POLARITY_HIGH;
 8000a42:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <SPIx_Init+0x74>)
 8000a44:	2202      	movs	r2, #2
 8000a46:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.FirstBit           = SPI_FIRSTBIT_MSB;
 8000a48:	4b0d      	ldr	r3, [pc, #52]	@ (8000a80 <SPIx_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS                = SPI_NSS_SOFT;
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <SPIx_Init+0x74>)
 8000a50:	2280      	movs	r2, #128	@ 0x80
 8000a52:	0092      	lsls	r2, r2, #2
 8000a54:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.CRCCalculation     = SPI_CRCCALCULATION_DISABLED;
 8000a56:	4b0a      	ldr	r3, [pc, #40]	@ (8000a80 <SPIx_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial      = 7;
 8000a5c:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <SPIx_Init+0x74>)
 8000a5e:	2207      	movs	r2, #7
 8000a60:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.TIMode             = SPI_TIMODE_DISABLED;
 8000a62:	4b07      	ldr	r3, [pc, #28]	@ (8000a80 <SPIx_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	625a      	str	r2, [r3, #36]	@ 0x24
    
    SPIx_MspInit(&SpiHandle);
 8000a68:	4b05      	ldr	r3, [pc, #20]	@ (8000a80 <SPIx_Init+0x74>)
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f000 f83a 	bl	8000ae4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000a70:	4b03      	ldr	r3, [pc, #12]	@ (8000a80 <SPIx_Init+0x74>)
 8000a72:	0018      	movs	r0, r3
 8000a74:	f003 fab0 	bl	8003fd8 <HAL_SPI_Init>
  }
}
 8000a78:	46c0      	nop			@ (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			@ (mov r8, r8)
 8000a80:	200006c4 	.word	0x200006c4
 8000a84:	40013000 	.word	0x40013000

08000a88 <SPIx_Write>:
  * @brief  SPI Write a byte to device.
  * @param  Value: value to be written
  * @retval None
  */
static void SPIx_Write(uint8_t Value)
{
 8000a88:	b5b0      	push	{r4, r5, r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	0002      	movs	r2, r0
 8000a90:	1dfb      	adds	r3, r7, #7
 8000a92:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a94:	250f      	movs	r5, #15
 8000a96:	197b      	adds	r3, r7, r5
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SPIx_TIMEOUT_MAX);
 8000a9c:	197c      	adds	r4, r7, r5
 8000a9e:	2380      	movs	r3, #128	@ 0x80
 8000aa0:	015b      	lsls	r3, r3, #5
 8000aa2:	1df9      	adds	r1, r7, #7
 8000aa4:	4807      	ldr	r0, [pc, #28]	@ (8000ac4 <SPIx_Write+0x3c>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f003 fb53 	bl	8004152 <HAL_SPI_Transmit>
 8000aac:	0003      	movs	r3, r0
 8000aae:	7023      	strb	r3, [r4, #0]

  /* Check the communication status */
  if(status != HAL_OK)
 8000ab0:	197b      	adds	r3, r7, r5
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SPIx_Write+0x34>
  {
    /* Re-Initiaize the BUS */
    SPIx_Error();
 8000ab8:	f000 f806 	bl	8000ac8 <SPIx_Error>
  }
}
 8000abc:	46c0      	nop			@ (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b004      	add	sp, #16
 8000ac2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ac4:	200006c4 	.word	0x200006c4

08000ac8 <SPIx_Error>:
  * @brief  SPI error treatment function.
  * @param  None
  * @retval None
  */
static void SPIx_Error (void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* De-Initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8000acc:	4b04      	ldr	r3, [pc, #16]	@ (8000ae0 <SPIx_Error+0x18>)
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f003 fb16 	bl	8004100 <HAL_SPI_DeInit>

  /* Re-Initiaize the SPI comunication BUS */
  SPIx_Init();
 8000ad4:	f7ff ff9a 	bl	8000a0c <SPIx_Init>
}
 8000ad8:	46c0      	nop			@ (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			@ (mov r8, r8)
 8000ae0:	200006c4 	.word	0x200006c4

08000ae4 <SPIx_MspInit>:
  * @brief  SPI MSP Init
  * @param  hspi: SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b089      	sub	sp, #36	@ 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStruct;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8000aec:	4b1e      	ldr	r3, [pc, #120]	@ (8000b68 <SPIx_MspInit+0x84>)
 8000aee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000af0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b68 <SPIx_MspInit+0x84>)
 8000af2:	2102      	movs	r1, #2
 8000af4:	430a      	orrs	r2, r1
 8000af6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000af8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b68 <SPIx_MspInit+0x84>)
 8000afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000afc:	2202      	movs	r2, #2
 8000afe:	4013      	ands	r3, r2
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]

  /* Configure SPI SCK */
  GPIO_InitStruct.Pin = DISCOVERY_SPIx_SCK_PIN;
 8000b04:	240c      	movs	r4, #12
 8000b06:	193b      	adds	r3, r7, r4
 8000b08:	2208      	movs	r2, #8
 8000b0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	193b      	adds	r3, r7, r4
 8000b0e:	2202      	movs	r2, #2
 8000b10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	2201      	movs	r2, #1
 8000b16:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000b18:	193b      	adds	r3, r7, r4
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = DISCOVERY_SPIx_AF;
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStruct);
 8000b24:	193b      	adds	r3, r7, r4
 8000b26:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <SPIx_MspInit+0x88>)
 8000b28:	0019      	movs	r1, r3
 8000b2a:	0010      	movs	r0, r2
 8000b2c:	f001 fb68 	bl	8002200 <HAL_GPIO_Init>

  /* Configure SPI MOSI */
  GPIO_InitStruct.Pin = DISCOVERY_SPIx_MOSI_PIN;
 8000b30:	0021      	movs	r1, r4
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	2220      	movs	r2, #32
 8000b36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Alternate = DISCOVERY_SPIx_AF;
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	2202      	movs	r2, #2
 8000b42:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStruct);
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	4a09      	ldr	r2, [pc, #36]	@ (8000b6c <SPIx_MspInit+0x88>)
 8000b48:	0019      	movs	r1, r3
 8000b4a:	0010      	movs	r0, r2
 8000b4c:	f001 fb58 	bl	8002200 <HAL_GPIO_Init>

  /*** Configure the SPI peripheral ***/
  /* Enable SPI clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8000b50:	4b05      	ldr	r3, [pc, #20]	@ (8000b68 <SPIx_MspInit+0x84>)
 8000b52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b54:	4b04      	ldr	r3, [pc, #16]	@ (8000b68 <SPIx_MspInit+0x84>)
 8000b56:	2180      	movs	r1, #128	@ 0x80
 8000b58:	0149      	lsls	r1, r1, #5
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000b5e:	46c0      	nop			@ (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b009      	add	sp, #36	@ 0x24
 8000b64:	bd90      	pop	{r4, r7, pc}
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	50000400 	.word	0x50000400

08000b70 <EPD_IO_Init>:
  * @brief  Configures the EPD SPI interface.
  * @param  None
  * @retval None
  */
void EPD_IO_Init(void)
{
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b08b      	sub	sp, #44	@ 0x2c
 8000b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* EPD_CS_GPIO and EPD_DC_GPIO Periph clock enable */
  EPD_CS_GPIO_CLK_ENABLE();
 8000b76:	4b55      	ldr	r3, [pc, #340]	@ (8000ccc <EPD_IO_Init+0x15c>)
 8000b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b7a:	4b54      	ldr	r3, [pc, #336]	@ (8000ccc <EPD_IO_Init+0x15c>)
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b82:	4b52      	ldr	r3, [pc, #328]	@ (8000ccc <EPD_IO_Init+0x15c>)
 8000b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b86:	2201      	movs	r2, #1
 8000b88:	4013      	ands	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
  EPD_DC_GPIO_CLK_ENABLE();
 8000b8e:	4b4f      	ldr	r3, [pc, #316]	@ (8000ccc <EPD_IO_Init+0x15c>)
 8000b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b92:	4b4e      	ldr	r3, [pc, #312]	@ (8000ccc <EPD_IO_Init+0x15c>)
 8000b94:	2102      	movs	r1, #2
 8000b96:	430a      	orrs	r2, r1
 8000b98:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b9a:	4b4c      	ldr	r3, [pc, #304]	@ (8000ccc <EPD_IO_Init+0x15c>)
 8000b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
  EPD_RESET_GPIO_CLK_ENABLE();
 8000ba6:	4b49      	ldr	r3, [pc, #292]	@ (8000ccc <EPD_IO_Init+0x15c>)
 8000ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000baa:	4b48      	ldr	r3, [pc, #288]	@ (8000ccc <EPD_IO_Init+0x15c>)
 8000bac:	2102      	movs	r1, #2
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bb2:	4b46      	ldr	r3, [pc, #280]	@ (8000ccc <EPD_IO_Init+0x15c>)
 8000bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bb6:	2202      	movs	r2, #2
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  EPD_BUSY_GPIO_CLK_ENABLE();
 8000bbe:	4b43      	ldr	r3, [pc, #268]	@ (8000ccc <EPD_IO_Init+0x15c>)
 8000bc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000bc2:	4b42      	ldr	r3, [pc, #264]	@ (8000ccc <EPD_IO_Init+0x15c>)
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bca:	4b40      	ldr	r3, [pc, #256]	@ (8000ccc <EPD_IO_Init+0x15c>)
 8000bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bce:	2201      	movs	r2, #1
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  EPD_PWR_GPIO_CLK_ENABLE();
 8000bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8000ccc <EPD_IO_Init+0x15c>)
 8000bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000bda:	4b3c      	ldr	r3, [pc, #240]	@ (8000ccc <EPD_IO_Init+0x15c>)
 8000bdc:	2102      	movs	r1, #2
 8000bde:	430a      	orrs	r2, r1
 8000be0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000be2:	4b3a      	ldr	r3, [pc, #232]	@ (8000ccc <EPD_IO_Init+0x15c>)
 8000be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000be6:	2202      	movs	r2, #2
 8000be8:	4013      	ands	r3, r2
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]

  /* Configure EPD_CS_PIN pin: EPD Card CS pin */
  GPIO_InitStruct.Pin = EPD_CS_PIN;
 8000bee:	2114      	movs	r1, #20
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	2280      	movs	r2, #128	@ 0x80
 8000bf4:	0212      	lsls	r2, r2, #8
 8000bf6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	000c      	movs	r4, r1
 8000bfa:	193b      	adds	r3, r7, r4
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	193b      	adds	r3, r7, r4
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000c06:	193b      	adds	r3, r7, r4
 8000c08:	2203      	movs	r2, #3
 8000c0a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EPD_CS_GPIO_PORT, &GPIO_InitStruct);
 8000c0c:	193a      	adds	r2, r7, r4
 8000c0e:	23a0      	movs	r3, #160	@ 0xa0
 8000c10:	05db      	lsls	r3, r3, #23
 8000c12:	0011      	movs	r1, r2
 8000c14:	0018      	movs	r0, r3
 8000c16:	f001 faf3 	bl	8002200 <HAL_GPIO_Init>

  /* Configure EPD_DC_PIN pin: EPD Card DC pin */
  GPIO_InitStruct.Pin = EPD_DC_PIN;
 8000c1a:	0021      	movs	r1, r4
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	2280      	movs	r2, #128	@ 0x80
 8000c20:	0112      	lsls	r2, r2, #4
 8000c22:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(EPD_DC_GPIO_PORT, &GPIO_InitStruct);
 8000c24:	000c      	movs	r4, r1
 8000c26:	193b      	adds	r3, r7, r4
 8000c28:	4a29      	ldr	r2, [pc, #164]	@ (8000cd0 <EPD_IO_Init+0x160>)
 8000c2a:	0019      	movs	r1, r3
 8000c2c:	0010      	movs	r0, r2
 8000c2e:	f001 fae7 	bl	8002200 <HAL_GPIO_Init>

  /* Configure EPD_RESET_PIN pin */
  GPIO_InitStruct.Pin = EPD_RESET_PIN;
 8000c32:	193b      	adds	r3, r7, r4
 8000c34:	2204      	movs	r2, #4
 8000c36:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(EPD_PWR_GPIO_PORT, &GPIO_InitStruct);
 8000c38:	193b      	adds	r3, r7, r4
 8000c3a:	4a25      	ldr	r2, [pc, #148]	@ (8000cd0 <EPD_IO_Init+0x160>)
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	0010      	movs	r0, r2
 8000c40:	f001 fade 	bl	8002200 <HAL_GPIO_Init>

  /* Configure EPD_RESET_PIN pin */
  GPIO_InitStruct.Pin = EPD_PWR_PIN;
 8000c44:	0021      	movs	r1, r4
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	2280      	movs	r2, #128	@ 0x80
 8000c4a:	00d2      	lsls	r2, r2, #3
 8000c4c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(EPD_RESET_GPIO_PORT, &GPIO_InitStruct);
 8000c4e:	000c      	movs	r4, r1
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	4a1f      	ldr	r2, [pc, #124]	@ (8000cd0 <EPD_IO_Init+0x160>)
 8000c54:	0019      	movs	r1, r3
 8000c56:	0010      	movs	r0, r2
 8000c58:	f001 fad2 	bl	8002200 <HAL_GPIO_Init>

  /* Configure EPD_BUSY_PIN pin */
  GPIO_InitStruct.Pin = EPD_BUSY_PIN;
 8000c5c:	0021      	movs	r1, r4
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	0052      	lsls	r2, r2, #1
 8000c64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	2202      	movs	r2, #2
 8000c70:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(EPD_BUSY_GPIO_PORT, &GPIO_InitStruct);
 8000c72:	187a      	adds	r2, r7, r1
 8000c74:	23a0      	movs	r3, #160	@ 0xa0
 8000c76:	05db      	lsls	r3, r3, #23
 8000c78:	0011      	movs	r1, r2
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f001 fac0 	bl	8002200 <HAL_GPIO_Init>

  /* Enbale Display */
  EPD_PWR_LOW();
 8000c80:	2380      	movs	r3, #128	@ 0x80
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	4812      	ldr	r0, [pc, #72]	@ (8000cd0 <EPD_IO_Init+0x160>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	0019      	movs	r1, r3
 8000c8a:	f001 fd26 	bl	80026da <HAL_GPIO_WritePin>

  /* Set or Reset the control line */
  EPD_CS_LOW();
 8000c8e:	2380      	movs	r3, #128	@ 0x80
 8000c90:	0219      	lsls	r1, r3, #8
 8000c92:	23a0      	movs	r3, #160	@ 0xa0
 8000c94:	05db      	lsls	r3, r3, #23
 8000c96:	2200      	movs	r2, #0
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f001 fd1e 	bl	80026da <HAL_GPIO_WritePin>
  EPD_CS_HIGH();
 8000c9e:	2380      	movs	r3, #128	@ 0x80
 8000ca0:	0219      	lsls	r1, r3, #8
 8000ca2:	23a0      	movs	r3, #160	@ 0xa0
 8000ca4:	05db      	lsls	r3, r3, #23
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f001 fd16 	bl	80026da <HAL_GPIO_WritePin>

  /* EPD reset pin mamagement */
  EPD_RESET_HIGH();
 8000cae:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <EPD_IO_Init+0x160>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2104      	movs	r1, #4
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f001 fd10 	bl	80026da <HAL_GPIO_WritePin>
  EPD_Delay(10);
 8000cba:	200a      	movs	r0, #10
 8000cbc:	f000 f85c 	bl	8000d78 <EPD_Delay>

  /* SPI Configuration */
  SPIx_Init();
 8000cc0:	f7ff fea4 	bl	8000a0c <SPIx_Init>
}
 8000cc4:	46c0      	nop			@ (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b00b      	add	sp, #44	@ 0x2c
 8000cca:	bd90      	pop	{r4, r7, pc}
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	50000400 	.word	0x50000400

08000cd4 <EPD_IO_WriteData>:
  * @brief  Write register value.
  * @param  None
  * @retval None
  */
void EPD_IO_WriteData(uint16_t RegValue) 
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	0002      	movs	r2, r0
 8000cdc:	1dbb      	adds	r3, r7, #6
 8000cde:	801a      	strh	r2, [r3, #0]
  /* Reset EPD control line CS */
  EPD_CS_LOW();
 8000ce0:	2380      	movs	r3, #128	@ 0x80
 8000ce2:	0219      	lsls	r1, r3, #8
 8000ce4:	23a0      	movs	r3, #160	@ 0xa0
 8000ce6:	05db      	lsls	r3, r3, #23
 8000ce8:	2200      	movs	r2, #0
 8000cea:	0018      	movs	r0, r3
 8000cec:	f001 fcf5 	bl	80026da <HAL_GPIO_WritePin>

  /* Set EPD data/command line DC to High */
  EPD_DC_HIGH();
 8000cf0:	2380      	movs	r3, #128	@ 0x80
 8000cf2:	011b      	lsls	r3, r3, #4
 8000cf4:	480b      	ldr	r0, [pc, #44]	@ (8000d24 <EPD_IO_WriteData+0x50>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	0019      	movs	r1, r3
 8000cfa:	f001 fcee 	bl	80026da <HAL_GPIO_WritePin>

  /* Send Data */
  SPIx_Write(RegValue);
 8000cfe:	1dbb      	adds	r3, r7, #6
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	0018      	movs	r0, r3
 8000d06:	f7ff febf 	bl	8000a88 <SPIx_Write>

  /* Deselect: Chip Select high */
  EPD_CS_HIGH();
 8000d0a:	2380      	movs	r3, #128	@ 0x80
 8000d0c:	0219      	lsls	r1, r3, #8
 8000d0e:	23a0      	movs	r3, #160	@ 0xa0
 8000d10:	05db      	lsls	r3, r3, #23
 8000d12:	2201      	movs	r2, #1
 8000d14:	0018      	movs	r0, r3
 8000d16:	f001 fce0 	bl	80026da <HAL_GPIO_WritePin>
}
 8000d1a:	46c0      	nop			@ (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b002      	add	sp, #8
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	50000400 	.word	0x50000400

08000d28 <EPD_IO_WriteReg>:
  * @brief  Writes command to selected EPD register.
  * @param  Reg: Address of the selected register.
  * @retval None
  */
void EPD_IO_WriteReg(uint8_t Reg)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	0002      	movs	r2, r0
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	701a      	strb	r2, [r3, #0]
  /* Reset EPD control line CS */
  EPD_CS_LOW();
 8000d34:	2380      	movs	r3, #128	@ 0x80
 8000d36:	0219      	lsls	r1, r3, #8
 8000d38:	23a0      	movs	r3, #160	@ 0xa0
 8000d3a:	05db      	lsls	r3, r3, #23
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f001 fccb 	bl	80026da <HAL_GPIO_WritePin>
  
  /* Set EPD data/command line DC to Low */
  EPD_DC_LOW();
 8000d44:	2380      	movs	r3, #128	@ 0x80
 8000d46:	011b      	lsls	r3, r3, #4
 8000d48:	480a      	ldr	r0, [pc, #40]	@ (8000d74 <EPD_IO_WriteReg+0x4c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	0019      	movs	r1, r3
 8000d4e:	f001 fcc4 	bl	80026da <HAL_GPIO_WritePin>

  /* Send Command */
  SPIx_Write(Reg);
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	0018      	movs	r0, r3
 8000d58:	f7ff fe96 	bl	8000a88 <SPIx_Write>

  /* Deselect: Chip Select high */
  EPD_CS_HIGH();
 8000d5c:	2380      	movs	r3, #128	@ 0x80
 8000d5e:	0219      	lsls	r1, r3, #8
 8000d60:	23a0      	movs	r3, #160	@ 0xa0
 8000d62:	05db      	lsls	r3, r3, #23
 8000d64:	2201      	movs	r2, #1
 8000d66:	0018      	movs	r0, r3
 8000d68:	f001 fcb7 	bl	80026da <HAL_GPIO_WritePin>
}
 8000d6c:	46c0      	nop			@ (mov r8, r8)
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	b002      	add	sp, #8
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	50000400 	.word	0x50000400

08000d78 <EPD_Delay>:
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  * @retval None
  */
void EPD_Delay (uint32_t Delay)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  HAL_Delay (Delay);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	0018      	movs	r0, r3
 8000d84:	f001 f8b2 	bl	8001eec <HAL_Delay>
}
 8000d88:	46c0      	nop			@ (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	b002      	add	sp, #8
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <BSP_EPD_Init>:
  * @brief  Initializes the EPD.
  * @param  None
  * @retval EPD state
  */
uint8_t BSP_EPD_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
  uint8_t ret = EPD_ERROR;
 8000d96:	1dfb      	adds	r3, r7, #7
 8000d98:	2201      	movs	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]

  /* Default value for the Font */
  pFont = &Font8;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <BSP_EPD_Init+0x40>)
 8000d9e:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd4 <BSP_EPD_Init+0x44>)
 8000da0:	601a      	str	r2, [r3, #0]

  epd_drv = &gde021a1_drv;
 8000da2:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd8 <BSP_EPD_Init+0x48>)
 8000da4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ddc <BSP_EPD_Init+0x4c>)
 8000da6:	601a      	str	r2, [r3, #0]

  /* EPD Init */
  epd_drv->Init();
 8000da8:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <BSP_EPD_Init+0x48>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4798      	blx	r3

  /* Clear the EPD screen */
  BSP_EPD_Clear(EPD_COLOR_WHITE);
 8000db0:	20ff      	movs	r0, #255	@ 0xff
 8000db2:	f000 f825 	bl	8000e00 <BSP_EPD_Clear>

  /* Initialize the font */
  BSP_EPD_SetFont(&EPD_DEFAULT_FONT);
 8000db6:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <BSP_EPD_Init+0x50>)
 8000db8:	0018      	movs	r0, r3
 8000dba:	f000 f813 	bl	8000de4 <BSP_EPD_SetFont>

  ret = EPD_OK;
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	701a      	strb	r2, [r3, #0]

  return ret;
 8000dc4:	1dfb      	adds	r3, r7, #7
 8000dc6:	781b      	ldrb	r3, [r3, #0]
}
 8000dc8:	0018      	movs	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b002      	add	sp, #8
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	2000071c 	.word	0x2000071c
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	20000720 	.word	0x20000720
 8000ddc:	20000010 	.word	0x20000010
 8000de0:	20000000 	.word	0x20000000

08000de4 <BSP_EPD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  pFonts: specifies the layer font to be used.
  * @retval None
  */
void BSP_EPD_SetFont(sFONT *pFonts)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  pFont = pFonts;
 8000dec:	4b03      	ldr	r3, [pc, #12]	@ (8000dfc <BSP_EPD_SetFont+0x18>)
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	601a      	str	r2, [r3, #0]
}
 8000df2:	46c0      	nop			@ (mov r8, r8)
 8000df4:	46bd      	mov	sp, r7
 8000df6:	b002      	add	sp, #8
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	2000071c 	.word	0x2000071c

08000e00 <BSP_EPD_Clear>:
  * @brief  Clears the hole EPD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_EPD_Clear(uint16_t Color)
{
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	0002      	movs	r2, r0
 8000e08:	1dbb      	adds	r3, r7, #6
 8000e0a:	801a      	strh	r2, [r3, #0]
  uint32_t index = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]

  epd_drv->SetDisplayWindow(0, 0, 171, 17);
 8000e10:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <BSP_EPD_Clear+0x50>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	689c      	ldr	r4, [r3, #8]
 8000e16:	2311      	movs	r3, #17
 8000e18:	22ab      	movs	r2, #171	@ 0xab
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	47a0      	blx	r4

  for(index = 0; index < 3096; index++)
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	e00a      	b.n	8000e3c <BSP_EPD_Clear+0x3c>
  {
      epd_drv->WritePixel(Color);
 8000e26:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <BSP_EPD_Clear+0x50>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	1dba      	adds	r2, r7, #6
 8000e2e:	8812      	ldrh	r2, [r2, #0]
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	0010      	movs	r0, r2
 8000e34:	4798      	blx	r3
  for(index = 0; index < 3096; index++)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4a05      	ldr	r2, [pc, #20]	@ (8000e54 <BSP_EPD_Clear+0x54>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d9f0      	bls.n	8000e26 <BSP_EPD_Clear+0x26>
  }
}
 8000e44:	46c0      	nop			@ (mov r8, r8)
 8000e46:	46c0      	nop			@ (mov r8, r8)
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b005      	add	sp, #20
 8000e4c:	bd90      	pop	{r4, r7, pc}
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	20000720 	.word	0x20000720
 8000e54:	00000c17 	.word	0x00000c17

08000e58 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000e5c:	46c0      	nop			@ (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af04      	add	r7, sp, #16
 8000e6a:	0002      	movs	r2, r0
 8000e6c:	1dfb      	adds	r3, r7, #7
 8000e6e:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000e70:	4808      	ldr	r0, [pc, #32]	@ (8000e94 <ssd1306_WriteCommand+0x30>)
 8000e72:	2301      	movs	r3, #1
 8000e74:	425b      	negs	r3, r3
 8000e76:	9302      	str	r3, [sp, #8]
 8000e78:	2301      	movs	r3, #1
 8000e7a:	9301      	str	r3, [sp, #4]
 8000e7c:	1dfb      	adds	r3, r7, #7
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	2301      	movs	r3, #1
 8000e82:	2200      	movs	r2, #0
 8000e84:	2178      	movs	r1, #120	@ 0x78
 8000e86:	f001 fcdb 	bl	8002840 <HAL_I2C_Mem_Write>
}
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b002      	add	sp, #8
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	46c0      	nop			@ (mov r8, r8)
 8000e94:	2000113c 	.word	0x2000113c

08000e98 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af04      	add	r7, sp, #16
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	4808      	ldr	r0, [pc, #32]	@ (8000ec8 <ssd1306_WriteData+0x30>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4252      	negs	r2, r2
 8000eac:	9202      	str	r2, [sp, #8]
 8000eae:	9301      	str	r3, [sp, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	2240      	movs	r2, #64	@ 0x40
 8000eb8:	2178      	movs	r1, #120	@ 0x78
 8000eba:	f001 fcc1 	bl	8002840 <HAL_I2C_Mem_Write>
}
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b002      	add	sp, #8
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	2000113c 	.word	0x2000113c

08000ecc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000ed0:	f7ff ffc2 	bl	8000e58 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000ed4:	2064      	movs	r0, #100	@ 0x64
 8000ed6:	f001 f809 	bl	8001eec <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000eda:	2000      	movs	r0, #0
 8000edc:	f000 fa14 	bl	8001308 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000ee0:	2020      	movs	r0, #32
 8000ee2:	f7ff ffbf 	bl	8000e64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f7ff ffbc 	bl	8000e64 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000eec:	20b0      	movs	r0, #176	@ 0xb0
 8000eee:	f7ff ffb9 	bl	8000e64 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000ef2:	20c8      	movs	r0, #200	@ 0xc8
 8000ef4:	f7ff ffb6 	bl	8000e64 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f7ff ffb3 	bl	8000e64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000efe:	2010      	movs	r0, #16
 8000f00:	f7ff ffb0 	bl	8000e64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000f04:	2040      	movs	r0, #64	@ 0x40
 8000f06:	f7ff ffad 	bl	8000e64 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000f0a:	20ff      	movs	r0, #255	@ 0xff
 8000f0c:	f000 f9e4 	bl	80012d8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000f10:	20a1      	movs	r0, #161	@ 0xa1
 8000f12:	f7ff ffa7 	bl	8000e64 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000f16:	20a6      	movs	r0, #166	@ 0xa6
 8000f18:	f7ff ffa4 	bl	8000e64 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000f1c:	20a8      	movs	r0, #168	@ 0xa8
 8000f1e:	f7ff ffa1 	bl	8000e64 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000f22:	203f      	movs	r0, #63	@ 0x3f
 8000f24:	f7ff ff9e 	bl	8000e64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000f28:	20a4      	movs	r0, #164	@ 0xa4
 8000f2a:	f7ff ff9b 	bl	8000e64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000f2e:	20d3      	movs	r0, #211	@ 0xd3
 8000f30:	f7ff ff98 	bl	8000e64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000f34:	2000      	movs	r0, #0
 8000f36:	f7ff ff95 	bl	8000e64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000f3a:	20d5      	movs	r0, #213	@ 0xd5
 8000f3c:	f7ff ff92 	bl	8000e64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000f40:	20f0      	movs	r0, #240	@ 0xf0
 8000f42:	f7ff ff8f 	bl	8000e64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000f46:	20d9      	movs	r0, #217	@ 0xd9
 8000f48:	f7ff ff8c 	bl	8000e64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000f4c:	2022      	movs	r0, #34	@ 0x22
 8000f4e:	f7ff ff89 	bl	8000e64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000f52:	20da      	movs	r0, #218	@ 0xda
 8000f54:	f7ff ff86 	bl	8000e64 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000f58:	2012      	movs	r0, #18
 8000f5a:	f7ff ff83 	bl	8000e64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000f5e:	20db      	movs	r0, #219	@ 0xdb
 8000f60:	f7ff ff80 	bl	8000e64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000f64:	2020      	movs	r0, #32
 8000f66:	f7ff ff7d 	bl	8000e64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000f6a:	208d      	movs	r0, #141	@ 0x8d
 8000f6c:	f7ff ff7a 	bl	8000e64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000f70:	2014      	movs	r0, #20
 8000f72:	f7ff ff77 	bl	8000e64 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000f76:	2001      	movs	r0, #1
 8000f78:	f000 f9c6 	bl	8001308 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f000 f811 	bl	8000fa4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000f82:	f000 f829 	bl	8000fd8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000f86:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <ssd1306_Init+0xd4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000f8c:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <ssd1306_Init+0xd4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000f92:	4b03      	ldr	r3, [pc, #12]	@ (8000fa0 <ssd1306_Init+0xd4>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	711a      	strb	r2, [r3, #4]
}
 8000f98:	46c0      	nop			@ (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	46c0      	nop			@ (mov r8, r8)
 8000fa0:	20000b24 	.word	0x20000b24

08000fa4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	0002      	movs	r2, r0
 8000fac:	1dfb      	adds	r3, r7, #7
 8000fae:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000fb0:	1dfb      	adds	r3, r7, #7
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d101      	bne.n	8000fbc <ssd1306_Fill+0x18>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	e000      	b.n	8000fbe <ssd1306_Fill+0x1a>
 8000fbc:	23ff      	movs	r3, #255	@ 0xff
 8000fbe:	2280      	movs	r2, #128	@ 0x80
 8000fc0:	00d2      	lsls	r2, r2, #3
 8000fc2:	4804      	ldr	r0, [pc, #16]	@ (8000fd4 <ssd1306_Fill+0x30>)
 8000fc4:	0019      	movs	r1, r3
 8000fc6:	f005 f92e 	bl	8006226 <memset>
}
 8000fca:	46c0      	nop			@ (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b002      	add	sp, #8
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			@ (mov r8, r8)
 8000fd4:	20000724 	.word	0x20000724

08000fd8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
 8000fe4:	e01a      	b.n	800101c <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000fe6:	1dfb      	adds	r3, r7, #7
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	3b50      	subs	r3, #80	@ 0x50
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f7ff ff38 	bl	8000e64 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f7ff ff35 	bl	8000e64 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000ffa:	2010      	movs	r0, #16
 8000ffc:	f7ff ff32 	bl	8000e64 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001000:	1dfb      	adds	r3, r7, #7
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	01da      	lsls	r2, r3, #7
 8001006:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <ssd1306_UpdateScreen+0x58>)
 8001008:	18d3      	adds	r3, r2, r3
 800100a:	2180      	movs	r1, #128	@ 0x80
 800100c:	0018      	movs	r0, r3
 800100e:	f7ff ff43 	bl	8000e98 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	781a      	ldrb	r2, [r3, #0]
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	3201      	adds	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
 800101c:	1dfb      	adds	r3, r7, #7
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b07      	cmp	r3, #7
 8001022:	d9e0      	bls.n	8000fe6 <ssd1306_UpdateScreen+0xe>
    }
}
 8001024:	46c0      	nop			@ (mov r8, r8)
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	b002      	add	sp, #8
 800102c:	bd80      	pop	{r7, pc}
 800102e:	46c0      	nop			@ (mov r8, r8)
 8001030:	20000724 	.word	0x20000724

08001034 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001034:	b590      	push	{r4, r7, lr}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	0004      	movs	r4, r0
 800103c:	0008      	movs	r0, r1
 800103e:	0011      	movs	r1, r2
 8001040:	1dfb      	adds	r3, r7, #7
 8001042:	1c22      	adds	r2, r4, #0
 8001044:	701a      	strb	r2, [r3, #0]
 8001046:	1dbb      	adds	r3, r7, #6
 8001048:	1c02      	adds	r2, r0, #0
 800104a:	701a      	strb	r2, [r3, #0]
 800104c:	1d7b      	adds	r3, r7, #5
 800104e:	1c0a      	adds	r2, r1, #0
 8001050:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	b25b      	sxtb	r3, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	db47      	blt.n	80010ec <ssd1306_DrawPixel+0xb8>
 800105c:	1dbb      	adds	r3, r7, #6
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b3f      	cmp	r3, #63	@ 0x3f
 8001062:	d843      	bhi.n	80010ec <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001064:	1d7b      	adds	r3, r7, #5
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d11e      	bne.n	80010aa <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800106c:	1dfb      	adds	r3, r7, #7
 800106e:	781a      	ldrb	r2, [r3, #0]
 8001070:	1dbb      	adds	r3, r7, #6
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	08db      	lsrs	r3, r3, #3
 8001076:	b2d8      	uxtb	r0, r3
 8001078:	0003      	movs	r3, r0
 800107a:	01db      	lsls	r3, r3, #7
 800107c:	18d3      	adds	r3, r2, r3
 800107e:	4a1d      	ldr	r2, [pc, #116]	@ (80010f4 <ssd1306_DrawPixel+0xc0>)
 8001080:	5cd3      	ldrb	r3, [r2, r3]
 8001082:	b25a      	sxtb	r2, r3
 8001084:	1dbb      	adds	r3, r7, #6
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2107      	movs	r1, #7
 800108a:	400b      	ands	r3, r1
 800108c:	2101      	movs	r1, #1
 800108e:	4099      	lsls	r1, r3
 8001090:	000b      	movs	r3, r1
 8001092:	b25b      	sxtb	r3, r3
 8001094:	4313      	orrs	r3, r2
 8001096:	b259      	sxtb	r1, r3
 8001098:	1dfb      	adds	r3, r7, #7
 800109a:	781a      	ldrb	r2, [r3, #0]
 800109c:	0003      	movs	r3, r0
 800109e:	01db      	lsls	r3, r3, #7
 80010a0:	18d3      	adds	r3, r2, r3
 80010a2:	b2c9      	uxtb	r1, r1
 80010a4:	4a13      	ldr	r2, [pc, #76]	@ (80010f4 <ssd1306_DrawPixel+0xc0>)
 80010a6:	54d1      	strb	r1, [r2, r3]
 80010a8:	e021      	b.n	80010ee <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80010aa:	1dfb      	adds	r3, r7, #7
 80010ac:	781a      	ldrb	r2, [r3, #0]
 80010ae:	1dbb      	adds	r3, r7, #6
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	08db      	lsrs	r3, r3, #3
 80010b4:	b2d8      	uxtb	r0, r3
 80010b6:	0003      	movs	r3, r0
 80010b8:	01db      	lsls	r3, r3, #7
 80010ba:	18d3      	adds	r3, r2, r3
 80010bc:	4a0d      	ldr	r2, [pc, #52]	@ (80010f4 <ssd1306_DrawPixel+0xc0>)
 80010be:	5cd3      	ldrb	r3, [r2, r3]
 80010c0:	b25b      	sxtb	r3, r3
 80010c2:	1dba      	adds	r2, r7, #6
 80010c4:	7812      	ldrb	r2, [r2, #0]
 80010c6:	2107      	movs	r1, #7
 80010c8:	400a      	ands	r2, r1
 80010ca:	2101      	movs	r1, #1
 80010cc:	4091      	lsls	r1, r2
 80010ce:	000a      	movs	r2, r1
 80010d0:	b252      	sxtb	r2, r2
 80010d2:	43d2      	mvns	r2, r2
 80010d4:	b252      	sxtb	r2, r2
 80010d6:	4013      	ands	r3, r2
 80010d8:	b259      	sxtb	r1, r3
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	781a      	ldrb	r2, [r3, #0]
 80010de:	0003      	movs	r3, r0
 80010e0:	01db      	lsls	r3, r3, #7
 80010e2:	18d3      	adds	r3, r2, r3
 80010e4:	b2c9      	uxtb	r1, r1
 80010e6:	4a03      	ldr	r2, [pc, #12]	@ (80010f4 <ssd1306_DrawPixel+0xc0>)
 80010e8:	54d1      	strb	r1, [r2, r3]
 80010ea:	e000      	b.n	80010ee <ssd1306_DrawPixel+0xba>
        return;
 80010ec:	46c0      	nop			@ (mov r8, r8)
    }
}
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b003      	add	sp, #12
 80010f2:	bd90      	pop	{r4, r7, pc}
 80010f4:	20000724 	.word	0x20000724

080010f8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b089      	sub	sp, #36	@ 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	0004      	movs	r4, r0
 8001100:	0038      	movs	r0, r7
 8001102:	6001      	str	r1, [r0, #0]
 8001104:	6042      	str	r2, [r0, #4]
 8001106:	6083      	str	r3, [r0, #8]
 8001108:	210f      	movs	r1, #15
 800110a:	187b      	adds	r3, r7, r1
 800110c:	1c22      	adds	r2, r4, #0
 800110e:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001110:	000a      	movs	r2, r1
 8001112:	18bb      	adds	r3, r7, r2
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b1f      	cmp	r3, #31
 8001118:	d903      	bls.n	8001122 <ssd1306_WriteChar+0x2a>
 800111a:	18bb      	adds	r3, r7, r2
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001120:	d901      	bls.n	8001126 <ssd1306_WriteChar+0x2e>
        return 0;
 8001122:	2300      	movs	r3, #0
 8001124:	e08b      	b.n	800123e <ssd1306_WriteChar+0x146>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8001126:	003b      	movs	r3, r7
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d008      	beq.n	8001140 <ssd1306_WriteChar+0x48>
 800112e:	003b      	movs	r3, r7
 8001130:	689a      	ldr	r2, [r3, #8]
 8001132:	230f      	movs	r3, #15
 8001134:	18fb      	adds	r3, r7, r3
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	3b20      	subs	r3, #32
 800113a:	18d3      	adds	r3, r2, r3
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	e001      	b.n	8001144 <ssd1306_WriteChar+0x4c>
 8001140:	003b      	movs	r3, r7
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2117      	movs	r1, #23
 8001146:	187a      	adds	r2, r7, r1
 8001148:	7013      	strb	r3, [r2, #0]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 800114a:	4b3f      	ldr	r3, [pc, #252]	@ (8001248 <ssd1306_WriteChar+0x150>)
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	001a      	movs	r2, r3
 8001150:	187b      	adds	r3, r7, r1
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	18d3      	adds	r3, r2, r3
 8001156:	2b80      	cmp	r3, #128	@ 0x80
 8001158:	dc07      	bgt.n	800116a <ssd1306_WriteChar+0x72>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800115a:	4b3b      	ldr	r3, [pc, #236]	@ (8001248 <ssd1306_WriteChar+0x150>)
 800115c:	885b      	ldrh	r3, [r3, #2]
 800115e:	001a      	movs	r2, r3
 8001160:	003b      	movs	r3, r7
 8001162:	785b      	ldrb	r3, [r3, #1]
 8001164:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001166:	2b40      	cmp	r3, #64	@ 0x40
 8001168:	dd01      	ble.n	800116e <ssd1306_WriteChar+0x76>
    {
        // Not enough space on current line
        return 0;
 800116a:	2300      	movs	r3, #0
 800116c:	e067      	b.n	800123e <ssd1306_WriteChar+0x146>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	e051      	b.n	8001218 <ssd1306_WriteChar+0x120>
        b = Font.data[(ch - 32) * Font.height + i];
 8001174:	003b      	movs	r3, r7
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	230f      	movs	r3, #15
 800117a:	18fb      	adds	r3, r7, r3
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	3b20      	subs	r3, #32
 8001180:	0039      	movs	r1, r7
 8001182:	7849      	ldrb	r1, [r1, #1]
 8001184:	434b      	muls	r3, r1
 8001186:	0019      	movs	r1, r3
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	18cb      	adds	r3, r1, r3
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	18d3      	adds	r3, r2, r3
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8001194:	2300      	movs	r3, #0
 8001196:	61bb      	str	r3, [r7, #24]
 8001198:	e035      	b.n	8001206 <ssd1306_WriteChar+0x10e>
            if((b << j) & 0x8000)  {
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	409a      	lsls	r2, r3
 80011a0:	2380      	movs	r3, #128	@ 0x80
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	4013      	ands	r3, r2
 80011a6:	d014      	beq.n	80011d2 <ssd1306_WriteChar+0xda>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80011a8:	4b27      	ldr	r3, [pc, #156]	@ (8001248 <ssd1306_WriteChar+0x150>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	18d3      	adds	r3, r2, r3
 80011b4:	b2d8      	uxtb	r0, r3
 80011b6:	4b24      	ldr	r3, [pc, #144]	@ (8001248 <ssd1306_WriteChar+0x150>)
 80011b8:	885b      	ldrh	r3, [r3, #2]
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	18d3      	adds	r3, r2, r3
 80011c2:	b2d9      	uxtb	r1, r3
 80011c4:	2330      	movs	r3, #48	@ 0x30
 80011c6:	18fb      	adds	r3, r7, r3
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	001a      	movs	r2, r3
 80011cc:	f7ff ff32 	bl	8001034 <ssd1306_DrawPixel>
 80011d0:	e016      	b.n	8001200 <ssd1306_WriteChar+0x108>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80011d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001248 <ssd1306_WriteChar+0x150>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	18d3      	adds	r3, r2, r3
 80011de:	b2d8      	uxtb	r0, r3
 80011e0:	4b19      	ldr	r3, [pc, #100]	@ (8001248 <ssd1306_WriteChar+0x150>)
 80011e2:	885b      	ldrh	r3, [r3, #2]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	18d3      	adds	r3, r2, r3
 80011ec:	b2d9      	uxtb	r1, r3
 80011ee:	2330      	movs	r3, #48	@ 0x30
 80011f0:	18fb      	adds	r3, r7, r3
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	425a      	negs	r2, r3
 80011f6:	4153      	adcs	r3, r2
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	001a      	movs	r2, r3
 80011fc:	f7ff ff1a 	bl	8001034 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	3301      	adds	r3, #1
 8001204:	61bb      	str	r3, [r7, #24]
 8001206:	2317      	movs	r3, #23
 8001208:	18fb      	adds	r3, r7, r3
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	429a      	cmp	r2, r3
 8001210:	d3c3      	bcc.n	800119a <ssd1306_WriteChar+0xa2>
    for(i = 0; i < Font.height; i++) {
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3301      	adds	r3, #1
 8001216:	61fb      	str	r3, [r7, #28]
 8001218:	003b      	movs	r3, r7
 800121a:	785b      	ldrb	r3, [r3, #1]
 800121c:	001a      	movs	r2, r3
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	4293      	cmp	r3, r2
 8001222:	d3a7      	bcc.n	8001174 <ssd1306_WriteChar+0x7c>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8001224:	4b08      	ldr	r3, [pc, #32]	@ (8001248 <ssd1306_WriteChar+0x150>)
 8001226:	881a      	ldrh	r2, [r3, #0]
 8001228:	2317      	movs	r3, #23
 800122a:	18fb      	adds	r3, r7, r3
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	b29b      	uxth	r3, r3
 8001230:	18d3      	adds	r3, r2, r3
 8001232:	b29a      	uxth	r2, r3
 8001234:	4b04      	ldr	r3, [pc, #16]	@ (8001248 <ssd1306_WriteChar+0x150>)
 8001236:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001238:	230f      	movs	r3, #15
 800123a:	18fb      	adds	r3, r7, r3
 800123c:	781b      	ldrb	r3, [r3, #0]
}
 800123e:	0018      	movs	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	b009      	add	sp, #36	@ 0x24
 8001244:	bd90      	pop	{r4, r7, pc}
 8001246:	46c0      	nop			@ (mov r8, r8)
 8001248:	20000b24 	.word	0x20000b24

0800124c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af02      	add	r7, sp, #8
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	0038      	movs	r0, r7
 8001256:	6001      	str	r1, [r0, #0]
 8001258:	6042      	str	r2, [r0, #4]
 800125a:	6083      	str	r3, [r0, #8]
    while (*str) {
 800125c:	e017      	b.n	800128e <ssd1306_WriteString+0x42>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	7818      	ldrb	r0, [r3, #0]
 8001262:	003b      	movs	r3, r7
 8001264:	2218      	movs	r2, #24
 8001266:	18ba      	adds	r2, r7, r2
 8001268:	7812      	ldrb	r2, [r2, #0]
 800126a:	9200      	str	r2, [sp, #0]
 800126c:	6819      	ldr	r1, [r3, #0]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f7ff ff41 	bl	80010f8 <ssd1306_WriteChar>
 8001276:	0003      	movs	r3, r0
 8001278:	001a      	movs	r2, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	d002      	beq.n	8001288 <ssd1306_WriteString+0x3c>
            // Char could not be written
            return *str;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	e008      	b.n	800129a <ssd1306_WriteString+0x4e>
        }
        str++;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	3301      	adds	r3, #1
 800128c:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1e3      	bne.n	800125e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	781b      	ldrb	r3, [r3, #0]
}
 800129a:	0018      	movs	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	b004      	add	sp, #16
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	0002      	movs	r2, r0
 80012ac:	1dfb      	adds	r3, r7, #7
 80012ae:	701a      	strb	r2, [r3, #0]
 80012b0:	1dbb      	adds	r3, r7, #6
 80012b2:	1c0a      	adds	r2, r1, #0
 80012b4:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 80012b6:	1dfb      	adds	r3, r7, #7
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	4b05      	ldr	r3, [pc, #20]	@ (80012d4 <ssd1306_SetCursor+0x30>)
 80012be:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80012c0:	1dbb      	adds	r3, r7, #6
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	4b03      	ldr	r3, [pc, #12]	@ (80012d4 <ssd1306_SetCursor+0x30>)
 80012c8:	805a      	strh	r2, [r3, #2]
}
 80012ca:	46c0      	nop			@ (mov r8, r8)
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b002      	add	sp, #8
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	46c0      	nop			@ (mov r8, r8)
 80012d4:	20000b24 	.word	0x20000b24

080012d8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	0002      	movs	r2, r0
 80012e0:	1dfb      	adds	r3, r7, #7
 80012e2:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 80012e4:	210f      	movs	r1, #15
 80012e6:	187b      	adds	r3, r7, r1
 80012e8:	2281      	movs	r2, #129	@ 0x81
 80012ea:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80012ec:	187b      	adds	r3, r7, r1
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	0018      	movs	r0, r3
 80012f2:	f7ff fdb7 	bl	8000e64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80012f6:	1dfb      	adds	r3, r7, #7
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	0018      	movs	r0, r3
 80012fc:	f7ff fdb2 	bl	8000e64 <ssd1306_WriteCommand>
}
 8001300:	46c0      	nop			@ (mov r8, r8)
 8001302:	46bd      	mov	sp, r7
 8001304:	b004      	add	sp, #16
 8001306:	bd80      	pop	{r7, pc}

08001308 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	0002      	movs	r2, r0
 8001310:	1dfb      	adds	r3, r7, #7
 8001312:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8001314:	1dfb      	adds	r3, r7, #7
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d007      	beq.n	800132c <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 800131c:	230f      	movs	r3, #15
 800131e:	18fb      	adds	r3, r7, r3
 8001320:	22af      	movs	r2, #175	@ 0xaf
 8001322:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8001324:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <ssd1306_SetDisplayOn+0x48>)
 8001326:	2201      	movs	r2, #1
 8001328:	715a      	strb	r2, [r3, #5]
 800132a:	e006      	b.n	800133a <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 800132c:	230f      	movs	r3, #15
 800132e:	18fb      	adds	r3, r7, r3
 8001330:	22ae      	movs	r2, #174	@ 0xae
 8001332:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8001334:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <ssd1306_SetDisplayOn+0x48>)
 8001336:	2200      	movs	r2, #0
 8001338:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800133a:	230f      	movs	r3, #15
 800133c:	18fb      	adds	r3, r7, r3
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	0018      	movs	r0, r3
 8001342:	f7ff fd8f 	bl	8000e64 <ssd1306_WriteCommand>
}
 8001346:	46c0      	nop			@ (mov r8, r8)
 8001348:	46bd      	mov	sp, r7
 800134a:	b004      	add	sp, #16
 800134c:	bd80      	pop	{r7, pc}
 800134e:	46c0      	nop			@ (mov r8, r8)
 8001350:	20000b24 	.word	0x20000b24

08001354 <sendHexData>:
/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
void clear_ssd1306();
void refreash_display();

void sendHexData(uint8_t *data, size_t size, UART_HandleTypeDef *huart) {
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	4c23      	ldr	r4, [pc, #140]	@ (80013e4 <sendHexData+0x90>)
 8001358:	44a5      	add	sp, r4
 800135a:	af00      	add	r7, sp, #0
 800135c:	60f8      	str	r0, [r7, #12]
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
    char hexStr[sizeof(Logo)];
    for (int i = 0; i < size; i++) {
 8001362:	2300      	movs	r3, #0
 8001364:	4a20      	ldr	r2, [pc, #128]	@ (80013e8 <sendHexData+0x94>)
 8001366:	18ba      	adds	r2, r7, r2
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	e02f      	b.n	80013cc <sendHexData+0x78>
        snprintf(hexStr, sizeof(hexStr), "%2X", data[i]);
 800136c:	4b1e      	ldr	r3, [pc, #120]	@ (80013e8 <sendHexData+0x94>)
 800136e:	18fb      	adds	r3, r7, r3
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	18d3      	adds	r3, r2, r3
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4a1c      	ldr	r2, [pc, #112]	@ (80013ec <sendHexData+0x98>)
 800137a:	491d      	ldr	r1, [pc, #116]	@ (80013f0 <sendHexData+0x9c>)
 800137c:	2410      	movs	r4, #16
 800137e:	1938      	adds	r0, r7, r4
 8001380:	f004 fe1e 	bl	8005fc0 <sniprintf>
        HAL_UART_Transmit(huart, (uint8_t *)hexStr, 2, HAL_MAX_DELAY);
 8001384:	2301      	movs	r3, #1
 8001386:	425b      	negs	r3, r3
 8001388:	1939      	adds	r1, r7, r4
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	2202      	movs	r2, #2
 800138e:	f003 f971 	bl	8004674 <HAL_UART_Transmit>
        HAL_UART_Transmit(huart, (uint8_t *)" ", 1, HAL_MAX_DELAY);
 8001392:	2301      	movs	r3, #1
 8001394:	425b      	negs	r3, r3
 8001396:	4917      	ldr	r1, [pc, #92]	@ (80013f4 <sendHexData+0xa0>)
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	f003 f96a 	bl	8004674 <HAL_UART_Transmit>
        if (k == 9)
 80013a0:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <sendHexData+0xa4>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b09      	cmp	r3, #9
 80013a6:	d106      	bne.n	80013b6 <sendHexData+0x62>
                 {
                     printf("\r\n");
 80013a8:	4b14      	ldr	r3, [pc, #80]	@ (80013fc <sendHexData+0xa8>)
 80013aa:	0018      	movs	r0, r3
 80013ac:	f004 fdfe 	bl	8005fac <puts>
                     k = 0;
 80013b0:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <sendHexData+0xa4>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
                 }
                 k++;
 80013b6:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <sendHexData+0xa4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	4b0e      	ldr	r3, [pc, #56]	@ (80013f8 <sendHexData+0xa4>)
 80013be:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 80013c0:	4a09      	ldr	r2, [pc, #36]	@ (80013e8 <sendHexData+0x94>)
 80013c2:	18bb      	adds	r3, r7, r2
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	18ba      	adds	r2, r7, r2
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <sendHexData+0x94>)
 80013ce:	18fb      	adds	r3, r7, r3
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d8c9      	bhi.n	800136c <sendHexData+0x18>
    }
}
 80013d8:	46c0      	nop			@ (mov r8, r8)
 80013da:	46c0      	nop			@ (mov r8, r8)
 80013dc:	46bd      	mov	sp, r7
 80013de:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <sendHexData+0xac>)
 80013e0:	449d      	add	sp, r3
 80013e2:	bd90      	pop	{r4, r7, pc}
 80013e4:	fffff9dc 	.word	0xfffff9dc
 80013e8:	0000061c 	.word	0x0000061c
 80013ec:	08006e34 	.word	0x08006e34
 80013f0:	0000060c 	.word	0x0000060c
 80013f4:	08006e38 	.word	0x08006e38
 80013f8:	20000030 	.word	0x20000030
 80013fc:	08006e3c 	.word	0x08006e3c
 8001400:	00000624 	.word	0x00000624

08001404 <refreash_display>:
  HAL_UART_Transmit(&huart1, (uint8_t*)buffer2, len, -1);

}
*/
void refreash_display(char tekst[])
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af02      	add	r7, sp, #8
 800140a:	6078      	str	r0, [r7, #4]
	clear_ssd1306();
 800140c:	f000 f818 	bl	8001440 <clear_ssd1306>
	ssd1306_SetCursor(0, 0);
 8001410:	2100      	movs	r1, #0
 8001412:	2000      	movs	r0, #0
 8001414:	f7ff ff46 	bl	80012a4 <ssd1306_SetCursor>
	ssd1306_WriteString (tekst, Font_11x18, 1);
 8001418:	4b08      	ldr	r3, [pc, #32]	@ (800143c <refreash_display+0x38>)
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	2201      	movs	r2, #1
 800141e:	9200      	str	r2, [sp, #0]
 8001420:	6819      	ldr	r1, [r3, #0]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f7ff ff11 	bl	800124c <ssd1306_WriteString>
	HAL_Delay(10);
 800142a:	200a      	movs	r0, #10
 800142c:	f000 fd5e 	bl	8001eec <HAL_Delay>
	ssd1306_UpdateScreen(); // Display
 8001430:	f7ff fdd2 	bl	8000fd8 <ssd1306_UpdateScreen>
}
 8001434:	46c0      	nop			@ (mov r8, r8)
 8001436:	46bd      	mov	sp, r7
 8001438:	b002      	add	sp, #8
 800143a:	bd80      	pop	{r7, pc}
 800143c:	080087cc 	.word	0x080087cc

08001440 <clear_ssd1306>:


void clear_ssd1306()
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	ssd1306_Fill(0);  // Wypełnij ekran czarnym kolorem
 8001444:	2000      	movs	r0, #0
 8001446:	f7ff fdad 	bl	8000fa4 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 800144a:	f7ff fdc5 	bl	8000fd8 <ssd1306_UpdateScreen>
}
 800144e:	46c0      	nop			@ (mov r8, r8)
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <_write>:

int _write(int file, char *ptr, int len)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	b29a      	uxth	r2, r3
 8001464:	2301      	movs	r3, #1
 8001466:	425b      	negs	r3, r3
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	4804      	ldr	r0, [pc, #16]	@ (800147c <_write+0x28>)
 800146c:	f003 f902 	bl	8004674 <HAL_UART_Transmit>
    return len;
 8001470:	687b      	ldr	r3, [r7, #4]
}
 8001472:	0018      	movs	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	b004      	add	sp, #16
 8001478:	bd80      	pop	{r7, pc}
 800147a:	46c0      	nop			@ (mov r8, r8)
 800147c:	200011e8 	.word	0x200011e8

08001480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001482:	b087      	sub	sp, #28
 8001484:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001486:	f000 fcc1 	bl	8001e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800148a:	f000 f921 	bl	80016d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800148e:	f000 fa3d 	bl	800190c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001492:	f000 fa0b 	bl	80018ac <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001496:	f000 f9d1 	bl	800183c <MX_SPI1_Init>
  MX_I2C1_Init();
 800149a:	f000 f98f 	bl	80017bc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 800149e:	f7ff fd15 	bl	8000ecc <ssd1306_Init>
  HAL_Delay(100);
 80014a2:	2064      	movs	r0, #100	@ 0x64
 80014a4:	f000 fd22 	bl	8001eec <HAL_Delay>
  ssd1306_SetCursor(0,0);
 80014a8:	2100      	movs	r1, #0
 80014aa:	2000      	movs	r0, #0
 80014ac:	f7ff fefa 	bl	80012a4 <ssd1306_SetCursor>
  HAL_UART_Receive_IT(&huart1, buffer, sizeof(buffer));
 80014b0:	4a77      	ldr	r2, [pc, #476]	@ (8001690 <main+0x210>)
 80014b2:	4978      	ldr	r1, [pc, #480]	@ (8001694 <main+0x214>)
 80014b4:	4b78      	ldr	r3, [pc, #480]	@ (8001698 <main+0x218>)
 80014b6:	0018      	movs	r0, r3
 80014b8:	f003 f97c 	bl	80047b4 <HAL_UART_Receive_IT>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    if (HAL_GPIO_ReadPin(BSP_GPIO_Port, BSP_Pin) == GPIO_PIN_RESET)
 80014bc:	2380      	movs	r3, #128	@ 0x80
 80014be:	01db      	lsls	r3, r3, #7
 80014c0:	4a76      	ldr	r2, [pc, #472]	@ (800169c <main+0x21c>)
 80014c2:	0019      	movs	r1, r3
 80014c4:	0010      	movs	r0, r2
 80014c6:	f001 f8eb 	bl	80026a0 <HAL_GPIO_ReadPin>
 80014ca:	1e03      	subs	r3, r0, #0
 80014cc:	d138      	bne.n	8001540 <main+0xc0>
       {
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80014ce:	4b73      	ldr	r3, [pc, #460]	@ (800169c <main+0x21c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	2110      	movs	r1, #16
 80014d4:	0018      	movs	r0, r3
 80014d6:	f001 f900 	bl	80026da <HAL_GPIO_WritePin>
		refreash_display("Default");
 80014da:	4b71      	ldr	r3, [pc, #452]	@ (80016a0 <main+0x220>)
 80014dc:	0018      	movs	r0, r3
 80014de:	f7ff ff91 	bl	8001404 <refreash_display>
		BSP_EPD_Init();
 80014e2:	f7ff fc55 	bl	8000d90 <BSP_EPD_Init>
		uint8_t a = 0;
 80014e6:	240b      	movs	r4, #11
 80014e8:	193b      	adds	r3, r7, r4
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
		uint8_t b = 0;
 80014ee:	250a      	movs	r5, #10
 80014f0:	197b      	adds	r3, r7, r5
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
		uint8_t c = 72;
 80014f6:	2609      	movs	r6, #9
 80014f8:	19bb      	adds	r3, r7, r6
 80014fa:	2248      	movs	r2, #72	@ 0x48
 80014fc:	701a      	strb	r2, [r3, #0]
		uint8_t d = 172;
 80014fe:	2308      	movs	r3, #8
 8001500:	18fb      	adds	r3, r7, r3
 8001502:	22ac      	movs	r2, #172	@ 0xac
 8001504:	701a      	strb	r2, [r3, #0]
		BSP_EPD_Clear(EPD_COLOR_WHITE);
 8001506:	20ff      	movs	r0, #255	@ 0xff
 8001508:	f7ff fc7a 	bl	8000e00 <BSP_EPD_Clear>
		gde021a1_DrawImage(a, b, c, d, Logo);
 800150c:	193b      	adds	r3, r7, r4
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	b298      	uxth	r0, r3
 8001512:	197b      	adds	r3, r7, r5
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b299      	uxth	r1, r3
 8001518:	19bb      	adds	r3, r7, r6
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	b29a      	uxth	r2, r3
 800151e:	2308      	movs	r3, #8
 8001520:	18fb      	adds	r3, r7, r3
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	b29c      	uxth	r4, r3
 8001526:	4b5f      	ldr	r3, [pc, #380]	@ (80016a4 <main+0x224>)
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	0023      	movs	r3, r4
 800152c:	f7ff f8aa 	bl	8000684 <gde021a1_DrawImage>
		gde021a1_RefreshDisplay();
 8001530:	f7ff f88c 	bl	800064c <gde021a1_RefreshDisplay>
		HAL_Delay(1000);
 8001534:	23fa      	movs	r3, #250	@ 0xfa
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	0018      	movs	r0, r3
 800153a:	f000 fcd7 	bl	8001eec <HAL_Delay>
 800153e:	e7bd      	b.n	80014bc <main+0x3c>
       }

    else if (HAL_GPIO_ReadPin(Send_GPIO_Port, Send_Pin) == GPIO_PIN_RESET)
 8001540:	2380      	movs	r3, #128	@ 0x80
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	4a58      	ldr	r2, [pc, #352]	@ (80016a8 <main+0x228>)
 8001546:	0019      	movs	r1, r3
 8001548:	0010      	movs	r0, r2
 800154a:	f001 f8a9 	bl	80026a0 <HAL_GPIO_ReadPin>
 800154e:	1e03      	subs	r3, r0, #0
 8001550:	d12d      	bne.n	80015ae <main+0x12e>
       {
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001552:	4b52      	ldr	r3, [pc, #328]	@ (800169c <main+0x21c>)
 8001554:	2200      	movs	r2, #0
 8001556:	2110      	movs	r1, #16
 8001558:	0018      	movs	r0, r3
 800155a:	f001 f8be 	bl	80026da <HAL_GPIO_WritePin>
        HAL_Delay(50);
 800155e:	2032      	movs	r0, #50	@ 0x32
 8001560:	f000 fcc4 	bl	8001eec <HAL_Delay>
 	    printf("Image raw data...\r\n");
 8001564:	4b51      	ldr	r3, [pc, #324]	@ (80016ac <main+0x22c>)
 8001566:	0018      	movs	r0, r3
 8001568:	f004 fd20 	bl	8005fac <puts>
 	 	sendHexData(Logo, sizeof(Logo), &huart1);  // Wysyłamy pierwsze 16 bajtów w formacie hex
 800156c:	4a4a      	ldr	r2, [pc, #296]	@ (8001698 <main+0x218>)
 800156e:	4948      	ldr	r1, [pc, #288]	@ (8001690 <main+0x210>)
 8001570:	4b4c      	ldr	r3, [pc, #304]	@ (80016a4 <main+0x224>)
 8001572:	0018      	movs	r0, r3
 8001574:	f7ff feee 	bl	8001354 <sendHexData>
 	 	char newline[] = "\r\n";
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	4a4d      	ldr	r2, [pc, #308]	@ (80016b0 <main+0x230>)
 800157c:	8811      	ldrh	r1, [r2, #0]
 800157e:	8019      	strh	r1, [r3, #0]
 8001580:	7892      	ldrb	r2, [r2, #2]
 8001582:	709a      	strb	r2, [r3, #2]
 	 	HAL_UART_Transmit(&huart1, (uint8_t *)newline, sizeof(newline) - 1, HAL_MAX_DELAY);
 8001584:	2301      	movs	r3, #1
 8001586:	425b      	negs	r3, r3
 8001588:	1d39      	adds	r1, r7, #4
 800158a:	4843      	ldr	r0, [pc, #268]	@ (8001698 <main+0x218>)
 800158c:	2202      	movs	r2, #2
 800158e:	f003 f871 	bl	8004674 <HAL_UART_Transmit>
 	 	printf("\r\nData have sent\r\n");
 8001592:	4b48      	ldr	r3, [pc, #288]	@ (80016b4 <main+0x234>)
 8001594:	0018      	movs	r0, r3
 8001596:	f004 fd09 	bl	8005fac <puts>
 	 	refreash_display("Sent data");
 800159a:	4b47      	ldr	r3, [pc, #284]	@ (80016b8 <main+0x238>)
 800159c:	0018      	movs	r0, r3
 800159e:	f7ff ff31 	bl	8001404 <refreash_display>
 	 	HAL_Delay(1000);
 80015a2:	23fa      	movs	r3, #250	@ 0xfa
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	0018      	movs	r0, r3
 80015a8:	f000 fca0 	bl	8001eec <HAL_Delay>
 80015ac:	e786      	b.n	80014bc <main+0x3c>
       }
	 else if (HAL_GPIO_ReadPin(SSD1306_GPIO_Port, SSD1306_Pin) == GPIO_PIN_RESET)
 80015ae:	4b3b      	ldr	r3, [pc, #236]	@ (800169c <main+0x21c>)
 80015b0:	2104      	movs	r1, #4
 80015b2:	0018      	movs	r0, r3
 80015b4:	f001 f874 	bl	80026a0 <HAL_GPIO_ReadPin>
 80015b8:	1e03      	subs	r3, r0, #0
 80015ba:	d125      	bne.n	8001608 <main+0x188>
	   {
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80015bc:	4b37      	ldr	r3, [pc, #220]	@ (800169c <main+0x21c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	2110      	movs	r1, #16
 80015c2:	0018      	movs	r0, r3
 80015c4:	f001 f889 	bl	80026da <HAL_GPIO_WritePin>
		clear_ssd1306();
 80015c8:	f7ff ff3a 	bl	8001440 <clear_ssd1306>
		ssd1306_SetCursor(0, 0);
 80015cc:	2100      	movs	r1, #0
 80015ce:	2000      	movs	r0, #0
 80015d0:	f7ff fe68 	bl	80012a4 <ssd1306_SetCursor>
		ssd1306_WriteString ("", Font_11x18, 1);
 80015d4:	4b39      	ldr	r3, [pc, #228]	@ (80016bc <main+0x23c>)
 80015d6:	483a      	ldr	r0, [pc, #232]	@ (80016c0 <main+0x240>)
 80015d8:	2201      	movs	r2, #1
 80015da:	9200      	str	r2, [sp, #0]
 80015dc:	6819      	ldr	r1, [r3, #0]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f7ff fe33 	bl	800124c <ssd1306_WriteString>
		HAL_Delay(10);
 80015e6:	200a      	movs	r0, #10
 80015e8:	f000 fc80 	bl	8001eec <HAL_Delay>
		ssd1306_UpdateScreen(); // Display
 80015ec:	f7ff fcf4 	bl	8000fd8 <ssd1306_UpdateScreen>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80015f0:	4b2a      	ldr	r3, [pc, #168]	@ (800169c <main+0x21c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	2110      	movs	r1, #16
 80015f6:	0018      	movs	r0, r3
 80015f8:	f001 f86f 	bl	80026da <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80015fc:	23fa      	movs	r3, #250	@ 0xfa
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	0018      	movs	r0, r3
 8001602:	f000 fc73 	bl	8001eec <HAL_Delay>
 8001606:	e759      	b.n	80014bc <main+0x3c>
	   }
	  else if (flaga == 1)
 8001608:	4b2e      	ldr	r3, [pc, #184]	@ (80016c4 <main+0x244>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d137      	bne.n	8001680 <main+0x200>
	  {
		flaga = 0;
 8001610:	4b2c      	ldr	r3, [pc, #176]	@ (80016c4 <main+0x244>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
        refreash_display("Received");
 8001616:	4b2c      	ldr	r3, [pc, #176]	@ (80016c8 <main+0x248>)
 8001618:	0018      	movs	r0, r3
 800161a:	f7ff fef3 	bl	8001404 <refreash_display>
		HAL_Delay(50);
 800161e:	2032      	movs	r0, #50	@ 0x32
 8001620:	f000 fc64 	bl	8001eec <HAL_Delay>
        HAL_Delay(3000);
 8001624:	4b29      	ldr	r3, [pc, #164]	@ (80016cc <main+0x24c>)
 8001626:	0018      	movs	r0, r3
 8001628:	f000 fc60 	bl	8001eec <HAL_Delay>
		BSP_EPD_Init();
 800162c:	f7ff fbb0 	bl	8000d90 <BSP_EPD_Init>
		uint8_t a = 0;
 8001630:	240f      	movs	r4, #15
 8001632:	193b      	adds	r3, r7, r4
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
		uint8_t b = 0;
 8001638:	250e      	movs	r5, #14
 800163a:	197b      	adds	r3, r7, r5
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
		uint8_t c = 72;
 8001640:	260d      	movs	r6, #13
 8001642:	19bb      	adds	r3, r7, r6
 8001644:	2248      	movs	r2, #72	@ 0x48
 8001646:	701a      	strb	r2, [r3, #0]
		uint8_t d = 172;
 8001648:	230c      	movs	r3, #12
 800164a:	18fb      	adds	r3, r7, r3
 800164c:	22ac      	movs	r2, #172	@ 0xac
 800164e:	701a      	strb	r2, [r3, #0]
		BSP_EPD_Clear(EPD_COLOR_WHITE);
 8001650:	20ff      	movs	r0, #255	@ 0xff
 8001652:	f7ff fbd5 	bl	8000e00 <BSP_EPD_Clear>
		gde021a1_DrawImage(a, b, c, d, buffer);
 8001656:	193b      	adds	r3, r7, r4
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	b298      	uxth	r0, r3
 800165c:	197b      	adds	r3, r7, r5
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	b299      	uxth	r1, r3
 8001662:	19bb      	adds	r3, r7, r6
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b29a      	uxth	r2, r3
 8001668:	230c      	movs	r3, #12
 800166a:	18fb      	adds	r3, r7, r3
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	b29c      	uxth	r4, r3
 8001670:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <main+0x214>)
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	0023      	movs	r3, r4
 8001676:	f7ff f805 	bl	8000684 <gde021a1_DrawImage>
		gde021a1_RefreshDisplay();
 800167a:	f7fe ffe7 	bl	800064c <gde021a1_RefreshDisplay>
 800167e:	e71d      	b.n	80014bc <main+0x3c>
	  }
	  else
	  {
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <main+0x21c>)
 8001682:	2201      	movs	r2, #1
 8001684:	2110      	movs	r1, #16
 8001686:	0018      	movs	r0, r3
 8001688:	f001 f827 	bl	80026da <HAL_GPIO_WritePin>
    if (HAL_GPIO_ReadPin(BSP_GPIO_Port, BSP_Pin) == GPIO_PIN_RESET)
 800168c:	e716      	b.n	80014bc <main+0x3c>
 800168e:	46c0      	nop			@ (mov r8, r8)
 8001690:	0000060c 	.word	0x0000060c
 8001694:	20000b30 	.word	0x20000b30
 8001698:	200011e8 	.word	0x200011e8
 800169c:	50000400 	.word	0x50000400
 80016a0:	08006e40 	.word	0x08006e40
 80016a4:	20000034 	.word	0x20000034
 80016a8:	50000800 	.word	0x50000800
 80016ac:	08006e48 	.word	0x08006e48
 80016b0:	08006e8c 	.word	0x08006e8c
 80016b4:	08006e5c 	.word	0x08006e5c
 80016b8:	08006e70 	.word	0x08006e70
 80016bc:	080087cc 	.word	0x080087cc
 80016c0:	08006e7c 	.word	0x08006e7c
 80016c4:	20000b2c 	.word	0x20000b2c
 80016c8:	08006e80 	.word	0x08006e80
 80016cc:	00000bb8 	.word	0x00000bb8

080016d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b09d      	sub	sp, #116	@ 0x74
 80016d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d6:	2438      	movs	r4, #56	@ 0x38
 80016d8:	193b      	adds	r3, r7, r4
 80016da:	0018      	movs	r0, r3
 80016dc:	2338      	movs	r3, #56	@ 0x38
 80016de:	001a      	movs	r2, r3
 80016e0:	2100      	movs	r1, #0
 80016e2:	f004 fda0 	bl	8006226 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e6:	2324      	movs	r3, #36	@ 0x24
 80016e8:	18fb      	adds	r3, r7, r3
 80016ea:	0018      	movs	r0, r3
 80016ec:	2314      	movs	r3, #20
 80016ee:	001a      	movs	r2, r3
 80016f0:	2100      	movs	r1, #0
 80016f2:	f004 fd98 	bl	8006226 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f6:	003b      	movs	r3, r7
 80016f8:	0018      	movs	r0, r3
 80016fa:	2324      	movs	r3, #36	@ 0x24
 80016fc:	001a      	movs	r2, r3
 80016fe:	2100      	movs	r1, #0
 8001700:	f004 fd91 	bl	8006226 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001704:	4b2b      	ldr	r3, [pc, #172]	@ (80017b4 <SystemClock_Config+0xe4>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a2b      	ldr	r2, [pc, #172]	@ (80017b8 <SystemClock_Config+0xe8>)
 800170a:	401a      	ands	r2, r3
 800170c:	4b29      	ldr	r3, [pc, #164]	@ (80017b4 <SystemClock_Config+0xe4>)
 800170e:	2180      	movs	r1, #128	@ 0x80
 8001710:	0109      	lsls	r1, r1, #4
 8001712:	430a      	orrs	r2, r1
 8001714:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001716:	0021      	movs	r1, r4
 8001718:	187b      	adds	r3, r7, r1
 800171a:	2202      	movs	r2, #2
 800171c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800171e:	187b      	adds	r3, r7, r1
 8001720:	2201      	movs	r2, #1
 8001722:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001724:	187b      	adds	r3, r7, r1
 8001726:	2210      	movs	r2, #16
 8001728:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172a:	187b      	adds	r3, r7, r1
 800172c:	2202      	movs	r2, #2
 800172e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001730:	187b      	adds	r3, r7, r1
 8001732:	2200      	movs	r2, #0
 8001734:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001736:	187b      	adds	r3, r7, r1
 8001738:	2280      	movs	r2, #128	@ 0x80
 800173a:	02d2      	lsls	r2, r2, #11
 800173c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800173e:	187b      	adds	r3, r7, r1
 8001740:	2280      	movs	r2, #128	@ 0x80
 8001742:	03d2      	lsls	r2, r2, #15
 8001744:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001746:	187b      	adds	r3, r7, r1
 8001748:	0018      	movs	r0, r3
 800174a:	f001 fccf 	bl	80030ec <HAL_RCC_OscConfig>
 800174e:	1e03      	subs	r3, r0, #0
 8001750:	d001      	beq.n	8001756 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001752:	f000 f977 	bl	8001a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001756:	2124      	movs	r1, #36	@ 0x24
 8001758:	187b      	adds	r3, r7, r1
 800175a:	220f      	movs	r2, #15
 800175c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800175e:	187b      	adds	r3, r7, r1
 8001760:	2203      	movs	r2, #3
 8001762:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001764:	187b      	adds	r3, r7, r1
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800176a:	187b      	adds	r3, r7, r1
 800176c:	2200      	movs	r2, #0
 800176e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001770:	187b      	adds	r3, r7, r1
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001776:	187b      	adds	r3, r7, r1
 8001778:	2101      	movs	r1, #1
 800177a:	0018      	movs	r0, r3
 800177c:	f002 f87a 	bl	8003874 <HAL_RCC_ClockConfig>
 8001780:	1e03      	subs	r3, r0, #0
 8001782:	d001      	beq.n	8001788 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001784:	f000 f95e 	bl	8001a44 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001788:	003b      	movs	r3, r7
 800178a:	2209      	movs	r2, #9
 800178c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 800178e:	003b      	movs	r3, r7
 8001790:	2201      	movs	r2, #1
 8001792:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001794:	003b      	movs	r3, r7
 8001796:	2200      	movs	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800179a:	003b      	movs	r3, r7
 800179c:	0018      	movs	r0, r3
 800179e:	f002 fa8d 	bl	8003cbc <HAL_RCCEx_PeriphCLKConfig>
 80017a2:	1e03      	subs	r3, r0, #0
 80017a4:	d001      	beq.n	80017aa <SystemClock_Config+0xda>
  {
    Error_Handler();
 80017a6:	f000 f94d 	bl	8001a44 <Error_Handler>
  }
}
 80017aa:	46c0      	nop			@ (mov r8, r8)
 80017ac:	46bd      	mov	sp, r7
 80017ae:	b01d      	add	sp, #116	@ 0x74
 80017b0:	bd90      	pop	{r4, r7, pc}
 80017b2:	46c0      	nop			@ (mov r8, r8)
 80017b4:	40007000 	.word	0x40007000
 80017b8:	ffffe7ff 	.word	0xffffe7ff

080017bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001830 <MX_I2C1_Init+0x74>)
 80017c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001834 <MX_I2C1_Init+0x78>)
 80017c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 80017c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001830 <MX_I2C1_Init+0x74>)
 80017c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001838 <MX_I2C1_Init+0x7c>)
 80017ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017cc:	4b18      	ldr	r3, [pc, #96]	@ (8001830 <MX_I2C1_Init+0x74>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017d2:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <MX_I2C1_Init+0x74>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017d8:	4b15      	ldr	r3, [pc, #84]	@ (8001830 <MX_I2C1_Init+0x74>)
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017de:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <MX_I2C1_Init+0x74>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017e4:	4b12      	ldr	r3, [pc, #72]	@ (8001830 <MX_I2C1_Init+0x74>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ea:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <MX_I2C1_Init+0x74>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <MX_I2C1_Init+0x74>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <MX_I2C1_Init+0x74>)
 80017f8:	0018      	movs	r0, r3
 80017fa:	f000 ff8b 	bl	8002714 <HAL_I2C_Init>
 80017fe:	1e03      	subs	r3, r0, #0
 8001800:	d001      	beq.n	8001806 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001802:	f000 f91f 	bl	8001a44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001806:	4b0a      	ldr	r3, [pc, #40]	@ (8001830 <MX_I2C1_Init+0x74>)
 8001808:	2100      	movs	r1, #0
 800180a:	0018      	movs	r0, r3
 800180c:	f001 fbd6 	bl	8002fbc <HAL_I2CEx_ConfigAnalogFilter>
 8001810:	1e03      	subs	r3, r0, #0
 8001812:	d001      	beq.n	8001818 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001814:	f000 f916 	bl	8001a44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001818:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <MX_I2C1_Init+0x74>)
 800181a:	2100      	movs	r1, #0
 800181c:	0018      	movs	r0, r3
 800181e:	f001 fc19 	bl	8003054 <HAL_I2CEx_ConfigDigitalFilter>
 8001822:	1e03      	subs	r3, r0, #0
 8001824:	d001      	beq.n	800182a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001826:	f000 f90d 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800182a:	46c0      	nop			@ (mov r8, r8)
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	2000113c 	.word	0x2000113c
 8001834:	40005400 	.word	0x40005400
 8001838:	00300f38 	.word	0x00300f38

0800183c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001840:	4b18      	ldr	r3, [pc, #96]	@ (80018a4 <MX_SPI1_Init+0x68>)
 8001842:	4a19      	ldr	r2, [pc, #100]	@ (80018a8 <MX_SPI1_Init+0x6c>)
 8001844:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001846:	4b17      	ldr	r3, [pc, #92]	@ (80018a4 <MX_SPI1_Init+0x68>)
 8001848:	2282      	movs	r2, #130	@ 0x82
 800184a:	0052      	lsls	r2, r2, #1
 800184c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800184e:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <MX_SPI1_Init+0x68>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001854:	4b13      	ldr	r3, [pc, #76]	@ (80018a4 <MX_SPI1_Init+0x68>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800185a:	4b12      	ldr	r3, [pc, #72]	@ (80018a4 <MX_SPI1_Init+0x68>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001860:	4b10      	ldr	r3, [pc, #64]	@ (80018a4 <MX_SPI1_Init+0x68>)
 8001862:	2200      	movs	r2, #0
 8001864:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001866:	4b0f      	ldr	r3, [pc, #60]	@ (80018a4 <MX_SPI1_Init+0x68>)
 8001868:	2280      	movs	r2, #128	@ 0x80
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800186e:	4b0d      	ldr	r3, [pc, #52]	@ (80018a4 <MX_SPI1_Init+0x68>)
 8001870:	2238      	movs	r2, #56	@ 0x38
 8001872:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001874:	4b0b      	ldr	r3, [pc, #44]	@ (80018a4 <MX_SPI1_Init+0x68>)
 8001876:	2200      	movs	r2, #0
 8001878:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800187a:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <MX_SPI1_Init+0x68>)
 800187c:	2200      	movs	r2, #0
 800187e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001880:	4b08      	ldr	r3, [pc, #32]	@ (80018a4 <MX_SPI1_Init+0x68>)
 8001882:	2200      	movs	r2, #0
 8001884:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001886:	4b07      	ldr	r3, [pc, #28]	@ (80018a4 <MX_SPI1_Init+0x68>)
 8001888:	2207      	movs	r2, #7
 800188a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800188c:	4b05      	ldr	r3, [pc, #20]	@ (80018a4 <MX_SPI1_Init+0x68>)
 800188e:	0018      	movs	r0, r3
 8001890:	f002 fba2 	bl	8003fd8 <HAL_SPI_Init>
 8001894:	1e03      	subs	r3, r0, #0
 8001896:	d001      	beq.n	800189c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001898:	f000 f8d4 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800189c:	46c0      	nop			@ (mov r8, r8)
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	46c0      	nop			@ (mov r8, r8)
 80018a4:	20001190 	.word	0x20001190
 80018a8:	40013000 	.word	0x40013000

080018ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018b0:	4b14      	ldr	r3, [pc, #80]	@ (8001904 <MX_USART1_UART_Init+0x58>)
 80018b2:	4a15      	ldr	r2, [pc, #84]	@ (8001908 <MX_USART1_UART_Init+0x5c>)
 80018b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018b6:	4b13      	ldr	r3, [pc, #76]	@ (8001904 <MX_USART1_UART_Init+0x58>)
 80018b8:	22e1      	movs	r2, #225	@ 0xe1
 80018ba:	0252      	lsls	r2, r2, #9
 80018bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018be:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <MX_USART1_UART_Init+0x58>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001904 <MX_USART1_UART_Init+0x58>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <MX_USART1_UART_Init+0x58>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001904 <MX_USART1_UART_Init+0x58>)
 80018d2:	220c      	movs	r2, #12
 80018d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <MX_USART1_UART_Init+0x58>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018dc:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <MX_USART1_UART_Init+0x58>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018e2:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <MX_USART1_UART_Init+0x58>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018e8:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <MX_USART1_UART_Init+0x58>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018ee:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <MX_USART1_UART_Init+0x58>)
 80018f0:	0018      	movs	r0, r3
 80018f2:	f002 fe6b 	bl	80045cc <HAL_UART_Init>
 80018f6:	1e03      	subs	r3, r0, #0
 80018f8:	d001      	beq.n	80018fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80018fa:	f000 f8a3 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018fe:	46c0      	nop			@ (mov r8, r8)
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	200011e8 	.word	0x200011e8
 8001908:	40013800 	.word	0x40013800

0800190c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800190c:	b590      	push	{r4, r7, lr}
 800190e:	b089      	sub	sp, #36	@ 0x24
 8001910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001912:	240c      	movs	r4, #12
 8001914:	193b      	adds	r3, r7, r4
 8001916:	0018      	movs	r0, r3
 8001918:	2314      	movs	r3, #20
 800191a:	001a      	movs	r2, r3
 800191c:	2100      	movs	r1, #0
 800191e:	f004 fc82 	bl	8006226 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001922:	4b30      	ldr	r3, [pc, #192]	@ (80019e4 <MX_GPIO_Init+0xd8>)
 8001924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001926:	4b2f      	ldr	r3, [pc, #188]	@ (80019e4 <MX_GPIO_Init+0xd8>)
 8001928:	2104      	movs	r1, #4
 800192a:	430a      	orrs	r2, r1
 800192c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800192e:	4b2d      	ldr	r3, [pc, #180]	@ (80019e4 <MX_GPIO_Init+0xd8>)
 8001930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001932:	2204      	movs	r2, #4
 8001934:	4013      	ands	r3, r2
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800193a:	4b2a      	ldr	r3, [pc, #168]	@ (80019e4 <MX_GPIO_Init+0xd8>)
 800193c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800193e:	4b29      	ldr	r3, [pc, #164]	@ (80019e4 <MX_GPIO_Init+0xd8>)
 8001940:	2101      	movs	r1, #1
 8001942:	430a      	orrs	r2, r1
 8001944:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001946:	4b27      	ldr	r3, [pc, #156]	@ (80019e4 <MX_GPIO_Init+0xd8>)
 8001948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800194a:	2201      	movs	r2, #1
 800194c:	4013      	ands	r3, r2
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001952:	4b24      	ldr	r3, [pc, #144]	@ (80019e4 <MX_GPIO_Init+0xd8>)
 8001954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001956:	4b23      	ldr	r3, [pc, #140]	@ (80019e4 <MX_GPIO_Init+0xd8>)
 8001958:	2102      	movs	r1, #2
 800195a:	430a      	orrs	r2, r1
 800195c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800195e:	4b21      	ldr	r3, [pc, #132]	@ (80019e4 <MX_GPIO_Init+0xd8>)
 8001960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001962:	2202      	movs	r2, #2
 8001964:	4013      	ands	r3, r2
 8001966:	603b      	str	r3, [r7, #0]
 8001968:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800196a:	4b1f      	ldr	r3, [pc, #124]	@ (80019e8 <MX_GPIO_Init+0xdc>)
 800196c:	2200      	movs	r2, #0
 800196e:	2110      	movs	r1, #16
 8001970:	0018      	movs	r0, r3
 8001972:	f000 feb2 	bl	80026da <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Send_Pin */
  GPIO_InitStruct.Pin = Send_Pin;
 8001976:	193b      	adds	r3, r7, r4
 8001978:	2280      	movs	r2, #128	@ 0x80
 800197a:	0212      	lsls	r2, r2, #8
 800197c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800197e:	193b      	adds	r3, r7, r4
 8001980:	2200      	movs	r2, #0
 8001982:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001984:	193b      	adds	r3, r7, r4
 8001986:	2201      	movs	r2, #1
 8001988:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Send_GPIO_Port, &GPIO_InitStruct);
 800198a:	193b      	adds	r3, r7, r4
 800198c:	4a17      	ldr	r2, [pc, #92]	@ (80019ec <MX_GPIO_Init+0xe0>)
 800198e:	0019      	movs	r1, r3
 8001990:	0010      	movs	r0, r2
 8001992:	f000 fc35 	bl	8002200 <HAL_GPIO_Init>

  /*Configure GPIO pins : SSD1306_Pin BSP_Pin */
  GPIO_InitStruct.Pin = SSD1306_Pin|BSP_Pin;
 8001996:	193b      	adds	r3, r7, r4
 8001998:	4a15      	ldr	r2, [pc, #84]	@ (80019f0 <MX_GPIO_Init+0xe4>)
 800199a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199c:	193b      	adds	r3, r7, r4
 800199e:	2200      	movs	r2, #0
 80019a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019a2:	193b      	adds	r3, r7, r4
 80019a4:	2201      	movs	r2, #1
 80019a6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a8:	193b      	adds	r3, r7, r4
 80019aa:	4a0f      	ldr	r2, [pc, #60]	@ (80019e8 <MX_GPIO_Init+0xdc>)
 80019ac:	0019      	movs	r1, r3
 80019ae:	0010      	movs	r0, r2
 80019b0:	f000 fc26 	bl	8002200 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80019b4:	0021      	movs	r1, r4
 80019b6:	187b      	adds	r3, r7, r1
 80019b8:	2210      	movs	r2, #16
 80019ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019bc:	187b      	adds	r3, r7, r1
 80019be:	2201      	movs	r2, #1
 80019c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	187b      	adds	r3, r7, r1
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	187b      	adds	r3, r7, r1
 80019ca:	2200      	movs	r2, #0
 80019cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80019ce:	187b      	adds	r3, r7, r1
 80019d0:	4a05      	ldr	r2, [pc, #20]	@ (80019e8 <MX_GPIO_Init+0xdc>)
 80019d2:	0019      	movs	r1, r3
 80019d4:	0010      	movs	r0, r2
 80019d6:	f000 fc13 	bl	8002200 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019da:	46c0      	nop			@ (mov r8, r8)
 80019dc:	46bd      	mov	sp, r7
 80019de:	b009      	add	sp, #36	@ 0x24
 80019e0:	bd90      	pop	{r4, r7, pc}
 80019e2:	46c0      	nop			@ (mov r8, r8)
 80019e4:	40021000 	.word	0x40021000
 80019e8:	50000400 	.word	0x50000400
 80019ec:	50000800 	.word	0x50000800
 80019f0:	00004004 	.word	0x00004004

080019f4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0a      	ldr	r2, [pc, #40]	@ (8001a2c <HAL_UART_RxCpltCallback+0x38>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d10e      	bne.n	8001a24 <HAL_UART_RxCpltCallback+0x30>
		{
		 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001a06:	4b0a      	ldr	r3, [pc, #40]	@ (8001a30 <HAL_UART_RxCpltCallback+0x3c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2110      	movs	r1, #16
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f000 fe64 	bl	80026da <HAL_GPIO_WritePin>
         HAL_UART_Receive_IT(&huart1, buffer, sizeof(buffer));
 8001a12:	4a08      	ldr	r2, [pc, #32]	@ (8001a34 <HAL_UART_RxCpltCallback+0x40>)
 8001a14:	4908      	ldr	r1, [pc, #32]	@ (8001a38 <HAL_UART_RxCpltCallback+0x44>)
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <HAL_UART_RxCpltCallback+0x48>)
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f002 fecb 	bl	80047b4 <HAL_UART_Receive_IT>
         flaga = 1;
 8001a1e:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <HAL_UART_RxCpltCallback+0x4c>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	601a      	str	r2, [r3, #0]
		}
}
 8001a24:	46c0      	nop			@ (mov r8, r8)
 8001a26:	46bd      	mov	sp, r7
 8001a28:	b002      	add	sp, #8
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40013800 	.word	0x40013800
 8001a30:	50000400 	.word	0x50000400
 8001a34:	0000060c 	.word	0x0000060c
 8001a38:	20000b30 	.word	0x20000b30
 8001a3c:	200011e8 	.word	0x200011e8
 8001a40:	20000b2c 	.word	0x20000b2c

08001a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a48:	b672      	cpsid	i
}
 8001a4a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a4c:	46c0      	nop			@ (mov r8, r8)
 8001a4e:	e7fd      	b.n	8001a4c <Error_Handler+0x8>

08001a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a54:	4b07      	ldr	r3, [pc, #28]	@ (8001a74 <HAL_MspInit+0x24>)
 8001a56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a58:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <HAL_MspInit+0x24>)
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a60:	4b04      	ldr	r3, [pc, #16]	@ (8001a74 <HAL_MspInit+0x24>)
 8001a62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a64:	4b03      	ldr	r3, [pc, #12]	@ (8001a74 <HAL_MspInit+0x24>)
 8001a66:	2180      	movs	r1, #128	@ 0x80
 8001a68:	0549      	lsls	r1, r1, #21
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a6e:	46c0      	nop			@ (mov r8, r8)
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40021000 	.word	0x40021000

08001a78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b089      	sub	sp, #36	@ 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	240c      	movs	r4, #12
 8001a82:	193b      	adds	r3, r7, r4
 8001a84:	0018      	movs	r0, r3
 8001a86:	2314      	movs	r3, #20
 8001a88:	001a      	movs	r2, r3
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	f004 fbcb 	bl	8006226 <memset>
  if(hi2c->Instance==I2C1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a17      	ldr	r2, [pc, #92]	@ (8001af4 <HAL_I2C_MspInit+0x7c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d128      	bne.n	8001aec <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9a:	4b17      	ldr	r3, [pc, #92]	@ (8001af8 <HAL_I2C_MspInit+0x80>)
 8001a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a9e:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <HAL_I2C_MspInit+0x80>)
 8001aa0:	2102      	movs	r1, #2
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001aa6:	4b14      	ldr	r3, [pc, #80]	@ (8001af8 <HAL_I2C_MspInit+0x80>)
 8001aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aaa:	2202      	movs	r2, #2
 8001aac:	4013      	ands	r3, r2
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ab2:	0021      	movs	r1, r4
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	22c0      	movs	r2, #192	@ 0xc0
 8001ab8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aba:	187b      	adds	r3, r7, r1
 8001abc:	2212      	movs	r2, #18
 8001abe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	187b      	adds	r3, r7, r1
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac6:	187b      	adds	r3, r7, r1
 8001ac8:	2203      	movs	r2, #3
 8001aca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001acc:	187b      	adds	r3, r7, r1
 8001ace:	2201      	movs	r2, #1
 8001ad0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad2:	187b      	adds	r3, r7, r1
 8001ad4:	4a09      	ldr	r2, [pc, #36]	@ (8001afc <HAL_I2C_MspInit+0x84>)
 8001ad6:	0019      	movs	r1, r3
 8001ad8:	0010      	movs	r0, r2
 8001ada:	f000 fb91 	bl	8002200 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ade:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <HAL_I2C_MspInit+0x80>)
 8001ae0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ae2:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <HAL_I2C_MspInit+0x80>)
 8001ae4:	2180      	movs	r1, #128	@ 0x80
 8001ae6:	0389      	lsls	r1, r1, #14
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001aec:	46c0      	nop			@ (mov r8, r8)
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b009      	add	sp, #36	@ 0x24
 8001af2:	bd90      	pop	{r4, r7, pc}
 8001af4:	40005400 	.word	0x40005400
 8001af8:	40021000 	.word	0x40021000
 8001afc:	50000400 	.word	0x50000400

08001b00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b089      	sub	sp, #36	@ 0x24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	240c      	movs	r4, #12
 8001b0a:	193b      	adds	r3, r7, r4
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	2314      	movs	r3, #20
 8001b10:	001a      	movs	r2, r3
 8001b12:	2100      	movs	r1, #0
 8001b14:	f004 fb87 	bl	8006226 <memset>
  if(hspi->Instance==SPI1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a18      	ldr	r2, [pc, #96]	@ (8001b80 <HAL_SPI_MspInit+0x80>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d129      	bne.n	8001b76 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b22:	4b18      	ldr	r3, [pc, #96]	@ (8001b84 <HAL_SPI_MspInit+0x84>)
 8001b24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b26:	4b17      	ldr	r3, [pc, #92]	@ (8001b84 <HAL_SPI_MspInit+0x84>)
 8001b28:	2180      	movs	r1, #128	@ 0x80
 8001b2a:	0149      	lsls	r1, r1, #5
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b30:	4b14      	ldr	r3, [pc, #80]	@ (8001b84 <HAL_SPI_MspInit+0x84>)
 8001b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b34:	4b13      	ldr	r3, [pc, #76]	@ (8001b84 <HAL_SPI_MspInit+0x84>)
 8001b36:	2101      	movs	r1, #1
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b3c:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <HAL_SPI_MspInit+0x84>)
 8001b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b40:	2201      	movs	r2, #1
 8001b42:	4013      	ands	r3, r2
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b48:	0021      	movs	r1, r4
 8001b4a:	187b      	adds	r3, r7, r1
 8001b4c:	22e0      	movs	r2, #224	@ 0xe0
 8001b4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	187b      	adds	r3, r7, r1
 8001b52:	2202      	movs	r2, #2
 8001b54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	187b      	adds	r3, r7, r1
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5c:	187b      	adds	r3, r7, r1
 8001b5e:	2203      	movs	r2, #3
 8001b60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001b62:	187b      	adds	r3, r7, r1
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b68:	187a      	adds	r2, r7, r1
 8001b6a:	23a0      	movs	r3, #160	@ 0xa0
 8001b6c:	05db      	lsls	r3, r3, #23
 8001b6e:	0011      	movs	r1, r2
 8001b70:	0018      	movs	r0, r3
 8001b72:	f000 fb45 	bl	8002200 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001b76:	46c0      	nop			@ (mov r8, r8)
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b009      	add	sp, #36	@ 0x24
 8001b7c:	bd90      	pop	{r4, r7, pc}
 8001b7e:	46c0      	nop			@ (mov r8, r8)
 8001b80:	40013000 	.word	0x40013000
 8001b84:	40021000 	.word	0x40021000

08001b88 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a09      	ldr	r2, [pc, #36]	@ (8001bbc <HAL_SPI_MspDeInit+0x34>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d10b      	bne.n	8001bb2 <HAL_SPI_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001b9a:	4b09      	ldr	r3, [pc, #36]	@ (8001bc0 <HAL_SPI_MspDeInit+0x38>)
 8001b9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b9e:	4b08      	ldr	r3, [pc, #32]	@ (8001bc0 <HAL_SPI_MspDeInit+0x38>)
 8001ba0:	4908      	ldr	r1, [pc, #32]	@ (8001bc4 <HAL_SPI_MspDeInit+0x3c>)
 8001ba2:	400a      	ands	r2, r1
 8001ba4:	635a      	str	r2, [r3, #52]	@ 0x34
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8001ba6:	23a0      	movs	r3, #160	@ 0xa0
 8001ba8:	05db      	lsls	r3, r3, #23
 8001baa:	21e0      	movs	r1, #224	@ 0xe0
 8001bac:	0018      	movs	r0, r3
 8001bae:	f000 fc9d 	bl	80024ec <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8001bb2:	46c0      	nop			@ (mov r8, r8)
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	b002      	add	sp, #8
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	46c0      	nop			@ (mov r8, r8)
 8001bbc:	40013000 	.word	0x40013000
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	ffffefff 	.word	0xffffefff

08001bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bc8:	b590      	push	{r4, r7, lr}
 8001bca:	b089      	sub	sp, #36	@ 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	240c      	movs	r4, #12
 8001bd2:	193b      	adds	r3, r7, r4
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	2314      	movs	r3, #20
 8001bd8:	001a      	movs	r2, r3
 8001bda:	2100      	movs	r1, #0
 8001bdc:	f004 fb23 	bl	8006226 <memset>
  if(huart->Instance==USART1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a1c      	ldr	r2, [pc, #112]	@ (8001c58 <HAL_UART_MspInit+0x90>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d132      	bne.n	8001c50 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bea:	4b1c      	ldr	r3, [pc, #112]	@ (8001c5c <HAL_UART_MspInit+0x94>)
 8001bec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bee:	4b1b      	ldr	r3, [pc, #108]	@ (8001c5c <HAL_UART_MspInit+0x94>)
 8001bf0:	2180      	movs	r1, #128	@ 0x80
 8001bf2:	01c9      	lsls	r1, r1, #7
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf8:	4b18      	ldr	r3, [pc, #96]	@ (8001c5c <HAL_UART_MspInit+0x94>)
 8001bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bfc:	4b17      	ldr	r3, [pc, #92]	@ (8001c5c <HAL_UART_MspInit+0x94>)
 8001bfe:	2101      	movs	r1, #1
 8001c00:	430a      	orrs	r2, r1
 8001c02:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c04:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <HAL_UART_MspInit+0x94>)
 8001c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c08:	2201      	movs	r2, #1
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c10:	193b      	adds	r3, r7, r4
 8001c12:	22c0      	movs	r2, #192	@ 0xc0
 8001c14:	00d2      	lsls	r2, r2, #3
 8001c16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	0021      	movs	r1, r4
 8001c1a:	187b      	adds	r3, r7, r1
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	187b      	adds	r3, r7, r1
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c26:	187b      	adds	r3, r7, r1
 8001c28:	2203      	movs	r2, #3
 8001c2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001c2c:	187b      	adds	r3, r7, r1
 8001c2e:	2204      	movs	r2, #4
 8001c30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c32:	187a      	adds	r2, r7, r1
 8001c34:	23a0      	movs	r3, #160	@ 0xa0
 8001c36:	05db      	lsls	r3, r3, #23
 8001c38:	0011      	movs	r1, r2
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f000 fae0 	bl	8002200 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c40:	2200      	movs	r2, #0
 8001c42:	2100      	movs	r1, #0
 8001c44:	201b      	movs	r0, #27
 8001c46:	f000 fa21 	bl	800208c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c4a:	201b      	movs	r0, #27
 8001c4c:	f000 fa33 	bl	80020b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001c50:	46c0      	nop			@ (mov r8, r8)
 8001c52:	46bd      	mov	sp, r7
 8001c54:	b009      	add	sp, #36	@ 0x24
 8001c56:	bd90      	pop	{r4, r7, pc}
 8001c58:	40013800 	.word	0x40013800
 8001c5c:	40021000 	.word	0x40021000

08001c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c64:	46c0      	nop			@ (mov r8, r8)
 8001c66:	e7fd      	b.n	8001c64 <NMI_Handler+0x4>

08001c68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c6c:	46c0      	nop			@ (mov r8, r8)
 8001c6e:	e7fd      	b.n	8001c6c <HardFault_Handler+0x4>

08001c70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c74:	46c0      	nop			@ (mov r8, r8)
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c7e:	46c0      	nop			@ (mov r8, r8)
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c88:	f000 f914 	bl	8001eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c8c:	46c0      	nop			@ (mov r8, r8)
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c98:	4b03      	ldr	r3, [pc, #12]	@ (8001ca8 <USART1_IRQHandler+0x14>)
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f002 fde8 	bl	8004870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ca0:	46c0      	nop			@ (mov r8, r8)
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	46c0      	nop			@ (mov r8, r8)
 8001ca8:	200011e8 	.word	0x200011e8

08001cac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	e00a      	b.n	8001cd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cbe:	e000      	b.n	8001cc2 <_read+0x16>
 8001cc0:	bf00      	nop
 8001cc2:	0001      	movs	r1, r0
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	1c5a      	adds	r2, r3, #1
 8001cc8:	60ba      	str	r2, [r7, #8]
 8001cca:	b2ca      	uxtb	r2, r1
 8001ccc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	dbf0      	blt.n	8001cbe <_read+0x12>
  }

  return len;
 8001cdc:	687b      	ldr	r3, [r7, #4]
}
 8001cde:	0018      	movs	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	b006      	add	sp, #24
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	425b      	negs	r3, r3
}
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b002      	add	sp, #8
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	0192      	lsls	r2, r2, #6
 8001d0a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	0018      	movs	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b002      	add	sp, #8
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <_isatty>:

int _isatty(int file)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d1e:	2301      	movs	r3, #1
}
 8001d20:	0018      	movs	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b002      	add	sp, #8
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	0018      	movs	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	b004      	add	sp, #16
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d48:	4a14      	ldr	r2, [pc, #80]	@ (8001d9c <_sbrk+0x5c>)
 8001d4a:	4b15      	ldr	r3, [pc, #84]	@ (8001da0 <_sbrk+0x60>)
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d54:	4b13      	ldr	r3, [pc, #76]	@ (8001da4 <_sbrk+0x64>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d102      	bne.n	8001d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d5c:	4b11      	ldr	r3, [pc, #68]	@ (8001da4 <_sbrk+0x64>)
 8001d5e:	4a12      	ldr	r2, [pc, #72]	@ (8001da8 <_sbrk+0x68>)
 8001d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d62:	4b10      	ldr	r3, [pc, #64]	@ (8001da4 <_sbrk+0x64>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	18d3      	adds	r3, r2, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d207      	bcs.n	8001d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d70:	f004 fab0 	bl	80062d4 <__errno>
 8001d74:	0003      	movs	r3, r0
 8001d76:	220c      	movs	r2, #12
 8001d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	425b      	negs	r3, r3
 8001d7e:	e009      	b.n	8001d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d80:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <_sbrk+0x64>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d86:	4b07      	ldr	r3, [pc, #28]	@ (8001da4 <_sbrk+0x64>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	18d2      	adds	r2, r2, r3
 8001d8e:	4b05      	ldr	r3, [pc, #20]	@ (8001da4 <_sbrk+0x64>)
 8001d90:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001d92:	68fb      	ldr	r3, [r7, #12]
}
 8001d94:	0018      	movs	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	b006      	add	sp, #24
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20002000 	.word	0x20002000
 8001da0:	00000400 	.word	0x00000400
 8001da4:	20001270 	.word	0x20001270
 8001da8:	200013c8 	.word	0x200013c8

08001dac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db0:	46c0      	nop			@ (mov r8, r8)
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001db8:	480d      	ldr	r0, [pc, #52]	@ (8001df0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001dba:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001dbc:	f7ff fff6 	bl	8001dac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dc0:	480c      	ldr	r0, [pc, #48]	@ (8001df4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dc2:	490d      	ldr	r1, [pc, #52]	@ (8001df8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001dfc <LoopForever+0xe>)
  movs r3, #0
 8001dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc8:	e002      	b.n	8001dd0 <LoopCopyDataInit>

08001dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dce:	3304      	adds	r3, #4

08001dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd4:	d3f9      	bcc.n	8001dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dd8:	4c0a      	ldr	r4, [pc, #40]	@ (8001e04 <LoopForever+0x16>)
  movs r3, #0
 8001dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ddc:	e001      	b.n	8001de2 <LoopFillZerobss>

08001dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de0:	3204      	adds	r2, #4

08001de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de4:	d3fb      	bcc.n	8001dde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001de6:	f004 fa7b 	bl	80062e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dea:	f7ff fb49 	bl	8001480 <main>

08001dee <LoopForever>:

LoopForever:
    b LoopForever
 8001dee:	e7fe      	b.n	8001dee <LoopForever>
  ldr   r0, =_estack
 8001df0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df8:	200006a8 	.word	0x200006a8
  ldr r2, =_sidata
 8001dfc:	08008888 	.word	0x08008888
  ldr r2, =_sbss
 8001e00:	200006a8 	.word	0x200006a8
  ldr r4, =_ebss
 8001e04:	200013c4 	.word	0x200013c4

08001e08 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e08:	e7fe      	b.n	8001e08 <ADC1_COMP_IRQHandler>
	...

08001e0c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e12:	1dfb      	adds	r3, r7, #7
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001e18:	4b0b      	ldr	r3, [pc, #44]	@ (8001e48 <HAL_Init+0x3c>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e48 <HAL_Init+0x3c>)
 8001e1e:	2140      	movs	r1, #64	@ 0x40
 8001e20:	430a      	orrs	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e24:	2000      	movs	r0, #0
 8001e26:	f000 f811 	bl	8001e4c <HAL_InitTick>
 8001e2a:	1e03      	subs	r3, r0, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001e2e:	1dfb      	adds	r3, r7, #7
 8001e30:	2201      	movs	r2, #1
 8001e32:	701a      	strb	r2, [r3, #0]
 8001e34:	e001      	b.n	8001e3a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e36:	f7ff fe0b 	bl	8001a50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e3a:	1dfb      	adds	r3, r7, #7
 8001e3c:	781b      	ldrb	r3, [r3, #0]
}
 8001e3e:	0018      	movs	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	b002      	add	sp, #8
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	46c0      	nop			@ (mov r8, r8)
 8001e48:	40022000 	.word	0x40022000

08001e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e4c:	b590      	push	{r4, r7, lr}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e54:	4b14      	ldr	r3, [pc, #80]	@ (8001ea8 <HAL_InitTick+0x5c>)
 8001e56:	681c      	ldr	r4, [r3, #0]
 8001e58:	4b14      	ldr	r3, [pc, #80]	@ (8001eac <HAL_InitTick+0x60>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	0019      	movs	r1, r3
 8001e5e:	23fa      	movs	r3, #250	@ 0xfa
 8001e60:	0098      	lsls	r0, r3, #2
 8001e62:	f7fe f95b 	bl	800011c <__udivsi3>
 8001e66:	0003      	movs	r3, r0
 8001e68:	0019      	movs	r1, r3
 8001e6a:	0020      	movs	r0, r4
 8001e6c:	f7fe f956 	bl	800011c <__udivsi3>
 8001e70:	0003      	movs	r3, r0
 8001e72:	0018      	movs	r0, r3
 8001e74:	f000 f92f 	bl	80020d6 <HAL_SYSTICK_Config>
 8001e78:	1e03      	subs	r3, r0, #0
 8001e7a:	d001      	beq.n	8001e80 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e00f      	b.n	8001ea0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b03      	cmp	r3, #3
 8001e84:	d80b      	bhi.n	8001e9e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	2301      	movs	r3, #1
 8001e8a:	425b      	negs	r3, r3
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	0018      	movs	r0, r3
 8001e90:	f000 f8fc 	bl	800208c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e94:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <HAL_InitTick+0x64>)
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	e000      	b.n	8001ea0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
}
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b003      	add	sp, #12
 8001ea6:	bd90      	pop	{r4, r7, pc}
 8001ea8:	20000640 	.word	0x20000640
 8001eac:	20000648 	.word	0x20000648
 8001eb0:	20000644 	.word	0x20000644

08001eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb8:	4b05      	ldr	r3, [pc, #20]	@ (8001ed0 <HAL_IncTick+0x1c>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	001a      	movs	r2, r3
 8001ebe:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <HAL_IncTick+0x20>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	18d2      	adds	r2, r2, r3
 8001ec4:	4b03      	ldr	r3, [pc, #12]	@ (8001ed4 <HAL_IncTick+0x20>)
 8001ec6:	601a      	str	r2, [r3, #0]
}
 8001ec8:	46c0      	nop			@ (mov r8, r8)
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	46c0      	nop			@ (mov r8, r8)
 8001ed0:	20000648 	.word	0x20000648
 8001ed4:	20001274 	.word	0x20001274

08001ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  return uwTick;
 8001edc:	4b02      	ldr	r3, [pc, #8]	@ (8001ee8 <HAL_GetTick+0x10>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	46c0      	nop			@ (mov r8, r8)
 8001ee8:	20001274 	.word	0x20001274

08001eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef4:	f7ff fff0 	bl	8001ed8 <HAL_GetTick>
 8001ef8:	0003      	movs	r3, r0
 8001efa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	3301      	adds	r3, #1
 8001f04:	d005      	beq.n	8001f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f06:	4b0a      	ldr	r3, [pc, #40]	@ (8001f30 <HAL_Delay+0x44>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	001a      	movs	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	189b      	adds	r3, r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f12:	46c0      	nop			@ (mov r8, r8)
 8001f14:	f7ff ffe0 	bl	8001ed8 <HAL_GetTick>
 8001f18:	0002      	movs	r2, r0
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d8f7      	bhi.n	8001f14 <HAL_Delay+0x28>
  {
  }
}
 8001f24:	46c0      	nop			@ (mov r8, r8)
 8001f26:	46c0      	nop			@ (mov r8, r8)
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b004      	add	sp, #16
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	46c0      	nop			@ (mov r8, r8)
 8001f30:	20000648 	.word	0x20000648

08001f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	0002      	movs	r2, r0
 8001f3c:	1dfb      	adds	r3, r7, #7
 8001f3e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f40:	1dfb      	adds	r3, r7, #7
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f46:	d809      	bhi.n	8001f5c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f48:	1dfb      	adds	r3, r7, #7
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	001a      	movs	r2, r3
 8001f4e:	231f      	movs	r3, #31
 8001f50:	401a      	ands	r2, r3
 8001f52:	4b04      	ldr	r3, [pc, #16]	@ (8001f64 <__NVIC_EnableIRQ+0x30>)
 8001f54:	2101      	movs	r1, #1
 8001f56:	4091      	lsls	r1, r2
 8001f58:	000a      	movs	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]
  }
}
 8001f5c:	46c0      	nop			@ (mov r8, r8)
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b002      	add	sp, #8
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	e000e100 	.word	0xe000e100

08001f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	0002      	movs	r2, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	1dfb      	adds	r3, r7, #7
 8001f74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f76:	1dfb      	adds	r3, r7, #7
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f7c:	d828      	bhi.n	8001fd0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f7e:	4a2f      	ldr	r2, [pc, #188]	@ (800203c <__NVIC_SetPriority+0xd4>)
 8001f80:	1dfb      	adds	r3, r7, #7
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	b25b      	sxtb	r3, r3
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	33c0      	adds	r3, #192	@ 0xc0
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	589b      	ldr	r3, [r3, r2]
 8001f8e:	1dfa      	adds	r2, r7, #7
 8001f90:	7812      	ldrb	r2, [r2, #0]
 8001f92:	0011      	movs	r1, r2
 8001f94:	2203      	movs	r2, #3
 8001f96:	400a      	ands	r2, r1
 8001f98:	00d2      	lsls	r2, r2, #3
 8001f9a:	21ff      	movs	r1, #255	@ 0xff
 8001f9c:	4091      	lsls	r1, r2
 8001f9e:	000a      	movs	r2, r1
 8001fa0:	43d2      	mvns	r2, r2
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	019b      	lsls	r3, r3, #6
 8001faa:	22ff      	movs	r2, #255	@ 0xff
 8001fac:	401a      	ands	r2, r3
 8001fae:	1dfb      	adds	r3, r7, #7
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	4003      	ands	r3, r0
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fbc:	481f      	ldr	r0, [pc, #124]	@ (800203c <__NVIC_SetPriority+0xd4>)
 8001fbe:	1dfb      	adds	r3, r7, #7
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	b25b      	sxtb	r3, r3
 8001fc4:	089b      	lsrs	r3, r3, #2
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	33c0      	adds	r3, #192	@ 0xc0
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001fce:	e031      	b.n	8002034 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fd0:	4a1b      	ldr	r2, [pc, #108]	@ (8002040 <__NVIC_SetPriority+0xd8>)
 8001fd2:	1dfb      	adds	r3, r7, #7
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	0019      	movs	r1, r3
 8001fd8:	230f      	movs	r3, #15
 8001fda:	400b      	ands	r3, r1
 8001fdc:	3b08      	subs	r3, #8
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	3306      	adds	r3, #6
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	18d3      	adds	r3, r2, r3
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	1dfa      	adds	r2, r7, #7
 8001fec:	7812      	ldrb	r2, [r2, #0]
 8001fee:	0011      	movs	r1, r2
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	400a      	ands	r2, r1
 8001ff4:	00d2      	lsls	r2, r2, #3
 8001ff6:	21ff      	movs	r1, #255	@ 0xff
 8001ff8:	4091      	lsls	r1, r2
 8001ffa:	000a      	movs	r2, r1
 8001ffc:	43d2      	mvns	r2, r2
 8001ffe:	401a      	ands	r2, r3
 8002000:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	019b      	lsls	r3, r3, #6
 8002006:	22ff      	movs	r2, #255	@ 0xff
 8002008:	401a      	ands	r2, r3
 800200a:	1dfb      	adds	r3, r7, #7
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	0018      	movs	r0, r3
 8002010:	2303      	movs	r3, #3
 8002012:	4003      	ands	r3, r0
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002018:	4809      	ldr	r0, [pc, #36]	@ (8002040 <__NVIC_SetPriority+0xd8>)
 800201a:	1dfb      	adds	r3, r7, #7
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	001c      	movs	r4, r3
 8002020:	230f      	movs	r3, #15
 8002022:	4023      	ands	r3, r4
 8002024:	3b08      	subs	r3, #8
 8002026:	089b      	lsrs	r3, r3, #2
 8002028:	430a      	orrs	r2, r1
 800202a:	3306      	adds	r3, #6
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	18c3      	adds	r3, r0, r3
 8002030:	3304      	adds	r3, #4
 8002032:	601a      	str	r2, [r3, #0]
}
 8002034:	46c0      	nop			@ (mov r8, r8)
 8002036:	46bd      	mov	sp, r7
 8002038:	b003      	add	sp, #12
 800203a:	bd90      	pop	{r4, r7, pc}
 800203c:	e000e100 	.word	0xe000e100
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	1e5a      	subs	r2, r3, #1
 8002050:	2380      	movs	r3, #128	@ 0x80
 8002052:	045b      	lsls	r3, r3, #17
 8002054:	429a      	cmp	r2, r3
 8002056:	d301      	bcc.n	800205c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002058:	2301      	movs	r3, #1
 800205a:	e010      	b.n	800207e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800205c:	4b0a      	ldr	r3, [pc, #40]	@ (8002088 <SysTick_Config+0x44>)
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	3a01      	subs	r2, #1
 8002062:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002064:	2301      	movs	r3, #1
 8002066:	425b      	negs	r3, r3
 8002068:	2103      	movs	r1, #3
 800206a:	0018      	movs	r0, r3
 800206c:	f7ff ff7c 	bl	8001f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002070:	4b05      	ldr	r3, [pc, #20]	@ (8002088 <SysTick_Config+0x44>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002076:	4b04      	ldr	r3, [pc, #16]	@ (8002088 <SysTick_Config+0x44>)
 8002078:	2207      	movs	r2, #7
 800207a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800207c:	2300      	movs	r3, #0
}
 800207e:	0018      	movs	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	b002      	add	sp, #8
 8002084:	bd80      	pop	{r7, pc}
 8002086:	46c0      	nop			@ (mov r8, r8)
 8002088:	e000e010 	.word	0xe000e010

0800208c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
 8002096:	210f      	movs	r1, #15
 8002098:	187b      	adds	r3, r7, r1
 800209a:	1c02      	adds	r2, r0, #0
 800209c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	187b      	adds	r3, r7, r1
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	b25b      	sxtb	r3, r3
 80020a6:	0011      	movs	r1, r2
 80020a8:	0018      	movs	r0, r3
 80020aa:	f7ff ff5d 	bl	8001f68 <__NVIC_SetPriority>
}
 80020ae:	46c0      	nop			@ (mov r8, r8)
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b004      	add	sp, #16
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	0002      	movs	r2, r0
 80020be:	1dfb      	adds	r3, r7, #7
 80020c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c2:	1dfb      	adds	r3, r7, #7
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	b25b      	sxtb	r3, r3
 80020c8:	0018      	movs	r0, r3
 80020ca:	f7ff ff33 	bl	8001f34 <__NVIC_EnableIRQ>
}
 80020ce:	46c0      	nop			@ (mov r8, r8)
 80020d0:	46bd      	mov	sp, r7
 80020d2:	b002      	add	sp, #8
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	0018      	movs	r0, r3
 80020e2:	f7ff ffaf 	bl	8002044 <SysTick_Config>
 80020e6:	0003      	movs	r3, r0
}
 80020e8:	0018      	movs	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	b002      	add	sp, #8
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020f8:	230f      	movs	r3, #15
 80020fa:	18fb      	adds	r3, r7, r3
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2225      	movs	r2, #37	@ 0x25
 8002104:	5c9b      	ldrb	r3, [r3, r2]
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d008      	beq.n	800211e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2204      	movs	r2, #4
 8002110:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2224      	movs	r2, #36	@ 0x24
 8002116:	2100      	movs	r1, #0
 8002118:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e024      	b.n	8002168 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	210e      	movs	r1, #14
 800212a:	438a      	bics	r2, r1
 800212c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2101      	movs	r1, #1
 800213a:	438a      	bics	r2, r1
 800213c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002142:	221c      	movs	r2, #28
 8002144:	401a      	ands	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	2101      	movs	r1, #1
 800214c:	4091      	lsls	r1, r2
 800214e:	000a      	movs	r2, r1
 8002150:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2225      	movs	r2, #37	@ 0x25
 8002156:	2101      	movs	r1, #1
 8002158:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2224      	movs	r2, #36	@ 0x24
 800215e:	2100      	movs	r1, #0
 8002160:	5499      	strb	r1, [r3, r2]

    return status;
 8002162:	230f      	movs	r3, #15
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002168:	0018      	movs	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	b004      	add	sp, #16
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002178:	210f      	movs	r1, #15
 800217a:	187b      	adds	r3, r7, r1
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2225      	movs	r2, #37	@ 0x25
 8002184:	5c9b      	ldrb	r3, [r3, r2]
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d006      	beq.n	800219a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2204      	movs	r2, #4
 8002190:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002192:	187b      	adds	r3, r7, r1
 8002194:	2201      	movs	r2, #1
 8002196:	701a      	strb	r2, [r3, #0]
 8002198:	e02a      	b.n	80021f0 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	210e      	movs	r1, #14
 80021a6:	438a      	bics	r2, r1
 80021a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2101      	movs	r1, #1
 80021b6:	438a      	bics	r2, r1
 80021b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021be:	221c      	movs	r2, #28
 80021c0:	401a      	ands	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c6:	2101      	movs	r1, #1
 80021c8:	4091      	lsls	r1, r2
 80021ca:	000a      	movs	r2, r1
 80021cc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2225      	movs	r2, #37	@ 0x25
 80021d2:	2101      	movs	r1, #1
 80021d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2224      	movs	r2, #36	@ 0x24
 80021da:	2100      	movs	r1, #0
 80021dc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d004      	beq.n	80021f0 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	0010      	movs	r0, r2
 80021ee:	4798      	blx	r3
    }
  }
  return status;
 80021f0:	230f      	movs	r3, #15
 80021f2:	18fb      	adds	r3, r7, r3
 80021f4:	781b      	ldrb	r3, [r3, #0]
}
 80021f6:	0018      	movs	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	b004      	add	sp, #16
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002216:	e14f      	b.n	80024b8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2101      	movs	r1, #1
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	4091      	lsls	r1, r2
 8002222:	000a      	movs	r2, r1
 8002224:	4013      	ands	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d100      	bne.n	8002230 <HAL_GPIO_Init+0x30>
 800222e:	e140      	b.n	80024b2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2203      	movs	r2, #3
 8002236:	4013      	ands	r3, r2
 8002238:	2b01      	cmp	r3, #1
 800223a:	d005      	beq.n	8002248 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2203      	movs	r2, #3
 8002242:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002244:	2b02      	cmp	r3, #2
 8002246:	d130      	bne.n	80022aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	2203      	movs	r2, #3
 8002254:	409a      	lsls	r2, r3
 8002256:	0013      	movs	r3, r2
 8002258:	43da      	mvns	r2, r3
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4013      	ands	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	409a      	lsls	r2, r3
 800226a:	0013      	movs	r3, r2
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800227e:	2201      	movs	r2, #1
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	409a      	lsls	r2, r3
 8002284:	0013      	movs	r3, r2
 8002286:	43da      	mvns	r2, r3
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4013      	ands	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	091b      	lsrs	r3, r3, #4
 8002294:	2201      	movs	r2, #1
 8002296:	401a      	ands	r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	409a      	lsls	r2, r3
 800229c:	0013      	movs	r3, r2
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2203      	movs	r2, #3
 80022b0:	4013      	ands	r3, r2
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d017      	beq.n	80022e6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	2203      	movs	r2, #3
 80022c2:	409a      	lsls	r2, r3
 80022c4:	0013      	movs	r3, r2
 80022c6:	43da      	mvns	r2, r3
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4013      	ands	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	409a      	lsls	r2, r3
 80022d8:	0013      	movs	r3, r2
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2203      	movs	r2, #3
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d123      	bne.n	800233a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	08da      	lsrs	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3208      	adds	r2, #8
 80022fa:	0092      	lsls	r2, r2, #2
 80022fc:	58d3      	ldr	r3, [r2, r3]
 80022fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	2207      	movs	r2, #7
 8002304:	4013      	ands	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	220f      	movs	r2, #15
 800230a:	409a      	lsls	r2, r3
 800230c:	0013      	movs	r3, r2
 800230e:	43da      	mvns	r2, r3
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	2107      	movs	r1, #7
 800231e:	400b      	ands	r3, r1
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	409a      	lsls	r2, r3
 8002324:	0013      	movs	r3, r2
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	08da      	lsrs	r2, r3, #3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3208      	adds	r2, #8
 8002334:	0092      	lsls	r2, r2, #2
 8002336:	6939      	ldr	r1, [r7, #16]
 8002338:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	2203      	movs	r2, #3
 8002346:	409a      	lsls	r2, r3
 8002348:	0013      	movs	r3, r2
 800234a:	43da      	mvns	r2, r3
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4013      	ands	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2203      	movs	r2, #3
 8002358:	401a      	ands	r2, r3
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	409a      	lsls	r2, r3
 8002360:	0013      	movs	r3, r2
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	23c0      	movs	r3, #192	@ 0xc0
 8002374:	029b      	lsls	r3, r3, #10
 8002376:	4013      	ands	r3, r2
 8002378:	d100      	bne.n	800237c <HAL_GPIO_Init+0x17c>
 800237a:	e09a      	b.n	80024b2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237c:	4b54      	ldr	r3, [pc, #336]	@ (80024d0 <HAL_GPIO_Init+0x2d0>)
 800237e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002380:	4b53      	ldr	r3, [pc, #332]	@ (80024d0 <HAL_GPIO_Init+0x2d0>)
 8002382:	2101      	movs	r1, #1
 8002384:	430a      	orrs	r2, r1
 8002386:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002388:	4a52      	ldr	r2, [pc, #328]	@ (80024d4 <HAL_GPIO_Init+0x2d4>)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	089b      	lsrs	r3, r3, #2
 800238e:	3302      	adds	r3, #2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	589b      	ldr	r3, [r3, r2]
 8002394:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2203      	movs	r2, #3
 800239a:	4013      	ands	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	220f      	movs	r2, #15
 80023a0:	409a      	lsls	r2, r3
 80023a2:	0013      	movs	r3, r2
 80023a4:	43da      	mvns	r2, r3
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	23a0      	movs	r3, #160	@ 0xa0
 80023b0:	05db      	lsls	r3, r3, #23
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d019      	beq.n	80023ea <HAL_GPIO_Init+0x1ea>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a47      	ldr	r2, [pc, #284]	@ (80024d8 <HAL_GPIO_Init+0x2d8>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d013      	beq.n	80023e6 <HAL_GPIO_Init+0x1e6>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a46      	ldr	r2, [pc, #280]	@ (80024dc <HAL_GPIO_Init+0x2dc>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00d      	beq.n	80023e2 <HAL_GPIO_Init+0x1e2>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a45      	ldr	r2, [pc, #276]	@ (80024e0 <HAL_GPIO_Init+0x2e0>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d007      	beq.n	80023de <HAL_GPIO_Init+0x1de>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a44      	ldr	r2, [pc, #272]	@ (80024e4 <HAL_GPIO_Init+0x2e4>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d101      	bne.n	80023da <HAL_GPIO_Init+0x1da>
 80023d6:	2305      	movs	r3, #5
 80023d8:	e008      	b.n	80023ec <HAL_GPIO_Init+0x1ec>
 80023da:	2306      	movs	r3, #6
 80023dc:	e006      	b.n	80023ec <HAL_GPIO_Init+0x1ec>
 80023de:	2303      	movs	r3, #3
 80023e0:	e004      	b.n	80023ec <HAL_GPIO_Init+0x1ec>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e002      	b.n	80023ec <HAL_GPIO_Init+0x1ec>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <HAL_GPIO_Init+0x1ec>
 80023ea:	2300      	movs	r3, #0
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	2103      	movs	r1, #3
 80023f0:	400a      	ands	r2, r1
 80023f2:	0092      	lsls	r2, r2, #2
 80023f4:	4093      	lsls	r3, r2
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023fc:	4935      	ldr	r1, [pc, #212]	@ (80024d4 <HAL_GPIO_Init+0x2d4>)
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	089b      	lsrs	r3, r3, #2
 8002402:	3302      	adds	r3, #2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800240a:	4b37      	ldr	r3, [pc, #220]	@ (80024e8 <HAL_GPIO_Init+0x2e8>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	43da      	mvns	r2, r3
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4013      	ands	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	2380      	movs	r3, #128	@ 0x80
 8002420:	035b      	lsls	r3, r3, #13
 8002422:	4013      	ands	r3, r2
 8002424:	d003      	beq.n	800242e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800242e:	4b2e      	ldr	r3, [pc, #184]	@ (80024e8 <HAL_GPIO_Init+0x2e8>)
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002434:	4b2c      	ldr	r3, [pc, #176]	@ (80024e8 <HAL_GPIO_Init+0x2e8>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	43da      	mvns	r2, r3
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	2380      	movs	r3, #128	@ 0x80
 800244a:	039b      	lsls	r3, r3, #14
 800244c:	4013      	ands	r3, r2
 800244e:	d003      	beq.n	8002458 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002458:	4b23      	ldr	r3, [pc, #140]	@ (80024e8 <HAL_GPIO_Init+0x2e8>)
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800245e:	4b22      	ldr	r3, [pc, #136]	@ (80024e8 <HAL_GPIO_Init+0x2e8>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	43da      	mvns	r2, r3
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	2380      	movs	r3, #128	@ 0x80
 8002474:	029b      	lsls	r3, r3, #10
 8002476:	4013      	ands	r3, r2
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002482:	4b19      	ldr	r3, [pc, #100]	@ (80024e8 <HAL_GPIO_Init+0x2e8>)
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002488:	4b17      	ldr	r3, [pc, #92]	@ (80024e8 <HAL_GPIO_Init+0x2e8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	43da      	mvns	r2, r3
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4013      	ands	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	2380      	movs	r3, #128	@ 0x80
 800249e:	025b      	lsls	r3, r3, #9
 80024a0:	4013      	ands	r3, r2
 80024a2:	d003      	beq.n	80024ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024ac:	4b0e      	ldr	r3, [pc, #56]	@ (80024e8 <HAL_GPIO_Init+0x2e8>)
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	3301      	adds	r3, #1
 80024b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	40da      	lsrs	r2, r3
 80024c0:	1e13      	subs	r3, r2, #0
 80024c2:	d000      	beq.n	80024c6 <HAL_GPIO_Init+0x2c6>
 80024c4:	e6a8      	b.n	8002218 <HAL_GPIO_Init+0x18>
  }
}
 80024c6:	46c0      	nop			@ (mov r8, r8)
 80024c8:	46c0      	nop			@ (mov r8, r8)
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b006      	add	sp, #24
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40010000 	.word	0x40010000
 80024d8:	50000400 	.word	0x50000400
 80024dc:	50000800 	.word	0x50000800
 80024e0:	50000c00 	.word	0x50000c00
 80024e4:	50001c00 	.word	0x50001c00
 80024e8:	40010400 	.word	0x40010400

080024ec <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8002502:	e0b6      	b.n	8002672 <HAL_GPIO_DeInit+0x186>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8002504:	2201      	movs	r2, #1
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	409a      	lsls	r2, r3
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d100      	bne.n	8002518 <HAL_GPIO_DeInit+0x2c>
 8002516:	e0a9      	b.n	800266c <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8002518:	4a5b      	ldr	r2, [pc, #364]	@ (8002688 <HAL_GPIO_DeInit+0x19c>)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	089b      	lsrs	r3, r3, #2
 800251e:	3302      	adds	r3, #2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	589b      	ldr	r3, [r3, r2]
 8002524:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2203      	movs	r2, #3
 800252a:	4013      	ands	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	220f      	movs	r2, #15
 8002530:	409a      	lsls	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4013      	ands	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	23a0      	movs	r3, #160	@ 0xa0
 800253c:	05db      	lsls	r3, r3, #23
 800253e:	429a      	cmp	r2, r3
 8002540:	d019      	beq.n	8002576 <HAL_GPIO_DeInit+0x8a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a51      	ldr	r2, [pc, #324]	@ (800268c <HAL_GPIO_DeInit+0x1a0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d013      	beq.n	8002572 <HAL_GPIO_DeInit+0x86>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a50      	ldr	r2, [pc, #320]	@ (8002690 <HAL_GPIO_DeInit+0x1a4>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d00d      	beq.n	800256e <HAL_GPIO_DeInit+0x82>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a4f      	ldr	r2, [pc, #316]	@ (8002694 <HAL_GPIO_DeInit+0x1a8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d007      	beq.n	800256a <HAL_GPIO_DeInit+0x7e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a4e      	ldr	r2, [pc, #312]	@ (8002698 <HAL_GPIO_DeInit+0x1ac>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d101      	bne.n	8002566 <HAL_GPIO_DeInit+0x7a>
 8002562:	2305      	movs	r3, #5
 8002564:	e008      	b.n	8002578 <HAL_GPIO_DeInit+0x8c>
 8002566:	2306      	movs	r3, #6
 8002568:	e006      	b.n	8002578 <HAL_GPIO_DeInit+0x8c>
 800256a:	2303      	movs	r3, #3
 800256c:	e004      	b.n	8002578 <HAL_GPIO_DeInit+0x8c>
 800256e:	2302      	movs	r3, #2
 8002570:	e002      	b.n	8002578 <HAL_GPIO_DeInit+0x8c>
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_GPIO_DeInit+0x8c>
 8002576:	2300      	movs	r3, #0
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	2103      	movs	r1, #3
 800257c:	400a      	ands	r2, r1
 800257e:	0092      	lsls	r2, r2, #2
 8002580:	4093      	lsls	r3, r2
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	429a      	cmp	r2, r3
 8002586:	d132      	bne.n	80025ee <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002588:	4b44      	ldr	r3, [pc, #272]	@ (800269c <HAL_GPIO_DeInit+0x1b0>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	43d9      	mvns	r1, r3
 8002590:	4b42      	ldr	r3, [pc, #264]	@ (800269c <HAL_GPIO_DeInit+0x1b0>)
 8002592:	400a      	ands	r2, r1
 8002594:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002596:	4b41      	ldr	r3, [pc, #260]	@ (800269c <HAL_GPIO_DeInit+0x1b0>)
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	43d9      	mvns	r1, r3
 800259e:	4b3f      	ldr	r3, [pc, #252]	@ (800269c <HAL_GPIO_DeInit+0x1b0>)
 80025a0:	400a      	ands	r2, r1
 80025a2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80025a4:	4b3d      	ldr	r3, [pc, #244]	@ (800269c <HAL_GPIO_DeInit+0x1b0>)
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	43d9      	mvns	r1, r3
 80025ac:	4b3b      	ldr	r3, [pc, #236]	@ (800269c <HAL_GPIO_DeInit+0x1b0>)
 80025ae:	400a      	ands	r2, r1
 80025b0:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80025b2:	4b3a      	ldr	r3, [pc, #232]	@ (800269c <HAL_GPIO_DeInit+0x1b0>)
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	43d9      	mvns	r1, r3
 80025ba:	4b38      	ldr	r3, [pc, #224]	@ (800269c <HAL_GPIO_DeInit+0x1b0>)
 80025bc:	400a      	ands	r2, r1
 80025be:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	2203      	movs	r2, #3
 80025c4:	4013      	ands	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	220f      	movs	r2, #15
 80025ca:	409a      	lsls	r2, r3
 80025cc:	0013      	movs	r3, r2
 80025ce:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80025d0:	4a2d      	ldr	r2, [pc, #180]	@ (8002688 <HAL_GPIO_DeInit+0x19c>)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	089b      	lsrs	r3, r3, #2
 80025d6:	3302      	adds	r3, #2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	589a      	ldr	r2, [r3, r2]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	43d9      	mvns	r1, r3
 80025e0:	4829      	ldr	r0, [pc, #164]	@ (8002688 <HAL_GPIO_DeInit+0x19c>)
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	089b      	lsrs	r3, r3, #2
 80025e6:	400a      	ands	r2, r1
 80025e8:	3302      	adds	r3, #2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	2103      	movs	r1, #3
 80025f8:	4099      	lsls	r1, r3
 80025fa:	000b      	movs	r3, r1
 80025fc:	431a      	orrs	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	08da      	lsrs	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3208      	adds	r2, #8
 800260a:	0092      	lsls	r2, r2, #2
 800260c:	58d3      	ldr	r3, [r2, r3]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	2107      	movs	r1, #7
 8002612:	400a      	ands	r2, r1
 8002614:	0092      	lsls	r2, r2, #2
 8002616:	210f      	movs	r1, #15
 8002618:	4091      	lsls	r1, r2
 800261a:	000a      	movs	r2, r1
 800261c:	43d1      	mvns	r1, r2
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	08d2      	lsrs	r2, r2, #3
 8002622:	4019      	ands	r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3208      	adds	r2, #8
 8002628:	0092      	lsls	r2, r2, #2
 800262a:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	0052      	lsls	r2, r2, #1
 8002634:	2103      	movs	r1, #3
 8002636:	4091      	lsls	r1, r2
 8002638:	000a      	movs	r2, r1
 800263a:	43d2      	mvns	r2, r2
 800263c:	401a      	ands	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2101      	movs	r1, #1
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	4091      	lsls	r1, r2
 800264c:	000a      	movs	r2, r1
 800264e:	43d2      	mvns	r2, r2
 8002650:	401a      	ands	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	0052      	lsls	r2, r2, #1
 800265e:	2103      	movs	r1, #3
 8002660:	4091      	lsls	r1, r2
 8002662:	000a      	movs	r2, r1
 8002664:	43d2      	mvns	r2, r2
 8002666:	401a      	ands	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	609a      	str	r2, [r3, #8]
    }
    position++;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	3301      	adds	r3, #1
 8002670:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	40da      	lsrs	r2, r3
 8002678:	1e13      	subs	r3, r2, #0
 800267a:	d000      	beq.n	800267e <HAL_GPIO_DeInit+0x192>
 800267c:	e742      	b.n	8002504 <HAL_GPIO_DeInit+0x18>
  }
}
 800267e:	46c0      	nop			@ (mov r8, r8)
 8002680:	46c0      	nop			@ (mov r8, r8)
 8002682:	46bd      	mov	sp, r7
 8002684:	b006      	add	sp, #24
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40010000 	.word	0x40010000
 800268c:	50000400 	.word	0x50000400
 8002690:	50000800 	.word	0x50000800
 8002694:	50000c00 	.word	0x50000c00
 8002698:	50001c00 	.word	0x50001c00
 800269c:	40010400 	.word	0x40010400

080026a0 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	000a      	movs	r2, r1
 80026aa:	1cbb      	adds	r3, r7, #2
 80026ac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	1cba      	adds	r2, r7, #2
 80026b4:	8812      	ldrh	r2, [r2, #0]
 80026b6:	4013      	ands	r3, r2
 80026b8:	d004      	beq.n	80026c4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80026ba:	230f      	movs	r3, #15
 80026bc:	18fb      	adds	r3, r7, r3
 80026be:	2201      	movs	r2, #1
 80026c0:	701a      	strb	r2, [r3, #0]
 80026c2:	e003      	b.n	80026cc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026c4:	230f      	movs	r3, #15
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80026cc:	230f      	movs	r3, #15
 80026ce:	18fb      	adds	r3, r7, r3
 80026d0:	781b      	ldrb	r3, [r3, #0]
}
 80026d2:	0018      	movs	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	b004      	add	sp, #16
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	0008      	movs	r0, r1
 80026e4:	0011      	movs	r1, r2
 80026e6:	1cbb      	adds	r3, r7, #2
 80026e8:	1c02      	adds	r2, r0, #0
 80026ea:	801a      	strh	r2, [r3, #0]
 80026ec:	1c7b      	adds	r3, r7, #1
 80026ee:	1c0a      	adds	r2, r1, #0
 80026f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026f2:	1c7b      	adds	r3, r7, #1
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d004      	beq.n	8002704 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026fa:	1cbb      	adds	r3, r7, #2
 80026fc:	881a      	ldrh	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002702:	e003      	b.n	800270c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002704:	1cbb      	adds	r3, r7, #2
 8002706:	881a      	ldrh	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800270c:	46c0      	nop			@ (mov r8, r8)
 800270e:	46bd      	mov	sp, r7
 8002710:	b002      	add	sp, #8
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e082      	b.n	800282c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2241      	movs	r2, #65	@ 0x41
 800272a:	5c9b      	ldrb	r3, [r3, r2]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d107      	bne.n	8002742 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2240      	movs	r2, #64	@ 0x40
 8002736:	2100      	movs	r1, #0
 8002738:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	0018      	movs	r0, r3
 800273e:	f7ff f99b 	bl	8001a78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2241      	movs	r2, #65	@ 0x41
 8002746:	2124      	movs	r1, #36	@ 0x24
 8002748:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2101      	movs	r1, #1
 8002756:	438a      	bics	r2, r1
 8002758:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4934      	ldr	r1, [pc, #208]	@ (8002834 <HAL_I2C_Init+0x120>)
 8002764:	400a      	ands	r2, r1
 8002766:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4931      	ldr	r1, [pc, #196]	@ (8002838 <HAL_I2C_Init+0x124>)
 8002774:	400a      	ands	r2, r1
 8002776:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d108      	bne.n	8002792 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2180      	movs	r1, #128	@ 0x80
 800278a:	0209      	lsls	r1, r1, #8
 800278c:	430a      	orrs	r2, r1
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	e007      	b.n	80027a2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2184      	movs	r1, #132	@ 0x84
 800279c:	0209      	lsls	r1, r1, #8
 800279e:	430a      	orrs	r2, r1
 80027a0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d104      	bne.n	80027b4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2280      	movs	r2, #128	@ 0x80
 80027b0:	0112      	lsls	r2, r2, #4
 80027b2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	491f      	ldr	r1, [pc, #124]	@ (800283c <HAL_I2C_Init+0x128>)
 80027c0:	430a      	orrs	r2, r1
 80027c2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	491a      	ldr	r1, [pc, #104]	@ (8002838 <HAL_I2C_Init+0x124>)
 80027d0:	400a      	ands	r2, r1
 80027d2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	431a      	orrs	r2, r3
 80027de:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69d9      	ldr	r1, [r3, #28]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1a      	ldr	r2, [r3, #32]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2101      	movs	r1, #1
 800280a:	430a      	orrs	r2, r1
 800280c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2241      	movs	r2, #65	@ 0x41
 8002818:	2120      	movs	r1, #32
 800281a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2242      	movs	r2, #66	@ 0x42
 8002826:	2100      	movs	r1, #0
 8002828:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	0018      	movs	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	b002      	add	sp, #8
 8002832:	bd80      	pop	{r7, pc}
 8002834:	f0ffffff 	.word	0xf0ffffff
 8002838:	ffff7fff 	.word	0xffff7fff
 800283c:	02008000 	.word	0x02008000

08002840 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b089      	sub	sp, #36	@ 0x24
 8002844:	af02      	add	r7, sp, #8
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	000c      	movs	r4, r1
 800284a:	0010      	movs	r0, r2
 800284c:	0019      	movs	r1, r3
 800284e:	230a      	movs	r3, #10
 8002850:	18fb      	adds	r3, r7, r3
 8002852:	1c22      	adds	r2, r4, #0
 8002854:	801a      	strh	r2, [r3, #0]
 8002856:	2308      	movs	r3, #8
 8002858:	18fb      	adds	r3, r7, r3
 800285a:	1c02      	adds	r2, r0, #0
 800285c:	801a      	strh	r2, [r3, #0]
 800285e:	1dbb      	adds	r3, r7, #6
 8002860:	1c0a      	adds	r2, r1, #0
 8002862:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2241      	movs	r2, #65	@ 0x41
 8002868:	5c9b      	ldrb	r3, [r3, r2]
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b20      	cmp	r3, #32
 800286e:	d000      	beq.n	8002872 <HAL_I2C_Mem_Write+0x32>
 8002870:	e10c      	b.n	8002a8c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002874:	2b00      	cmp	r3, #0
 8002876:	d004      	beq.n	8002882 <HAL_I2C_Mem_Write+0x42>
 8002878:	232c      	movs	r3, #44	@ 0x2c
 800287a:	18fb      	adds	r3, r7, r3
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d105      	bne.n	800288e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2280      	movs	r2, #128	@ 0x80
 8002886:	0092      	lsls	r2, r2, #2
 8002888:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e0ff      	b.n	8002a8e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2240      	movs	r2, #64	@ 0x40
 8002892:	5c9b      	ldrb	r3, [r3, r2]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <HAL_I2C_Mem_Write+0x5c>
 8002898:	2302      	movs	r3, #2
 800289a:	e0f8      	b.n	8002a8e <HAL_I2C_Mem_Write+0x24e>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2240      	movs	r2, #64	@ 0x40
 80028a0:	2101      	movs	r1, #1
 80028a2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028a4:	f7ff fb18 	bl	8001ed8 <HAL_GetTick>
 80028a8:	0003      	movs	r3, r0
 80028aa:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028ac:	2380      	movs	r3, #128	@ 0x80
 80028ae:	0219      	lsls	r1, r3, #8
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	2319      	movs	r3, #25
 80028b8:	2201      	movs	r2, #1
 80028ba:	f000 f975 	bl	8002ba8 <I2C_WaitOnFlagUntilTimeout>
 80028be:	1e03      	subs	r3, r0, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e0e3      	b.n	8002a8e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2241      	movs	r2, #65	@ 0x41
 80028ca:	2121      	movs	r1, #33	@ 0x21
 80028cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2242      	movs	r2, #66	@ 0x42
 80028d2:	2140      	movs	r1, #64	@ 0x40
 80028d4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	222c      	movs	r2, #44	@ 0x2c
 80028e6:	18ba      	adds	r2, r7, r2
 80028e8:	8812      	ldrh	r2, [r2, #0]
 80028ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028f2:	1dbb      	adds	r3, r7, #6
 80028f4:	881c      	ldrh	r4, [r3, #0]
 80028f6:	2308      	movs	r3, #8
 80028f8:	18fb      	adds	r3, r7, r3
 80028fa:	881a      	ldrh	r2, [r3, #0]
 80028fc:	230a      	movs	r3, #10
 80028fe:	18fb      	adds	r3, r7, r3
 8002900:	8819      	ldrh	r1, [r3, #0]
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	9301      	str	r3, [sp, #4]
 8002908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	0023      	movs	r3, r4
 800290e:	f000 f8c5 	bl	8002a9c <I2C_RequestMemoryWrite>
 8002912:	1e03      	subs	r3, r0, #0
 8002914:	d005      	beq.n	8002922 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2240      	movs	r2, #64	@ 0x40
 800291a:	2100      	movs	r1, #0
 800291c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e0b5      	b.n	8002a8e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002926:	b29b      	uxth	r3, r3
 8002928:	2bff      	cmp	r3, #255	@ 0xff
 800292a:	d911      	bls.n	8002950 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	22ff      	movs	r2, #255	@ 0xff
 8002930:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002936:	b2da      	uxtb	r2, r3
 8002938:	2380      	movs	r3, #128	@ 0x80
 800293a:	045c      	lsls	r4, r3, #17
 800293c:	230a      	movs	r3, #10
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	8819      	ldrh	r1, [r3, #0]
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	2300      	movs	r3, #0
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	0023      	movs	r3, r4
 800294a:	f000 fafd 	bl	8002f48 <I2C_TransferConfig>
 800294e:	e012      	b.n	8002976 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002954:	b29a      	uxth	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800295e:	b2da      	uxtb	r2, r3
 8002960:	2380      	movs	r3, #128	@ 0x80
 8002962:	049c      	lsls	r4, r3, #18
 8002964:	230a      	movs	r3, #10
 8002966:	18fb      	adds	r3, r7, r3
 8002968:	8819      	ldrh	r1, [r3, #0]
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	2300      	movs	r3, #0
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	0023      	movs	r3, r4
 8002972:	f000 fae9 	bl	8002f48 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	0018      	movs	r0, r3
 800297e:	f000 f961 	bl	8002c44 <I2C_WaitOnTXISFlagUntilTimeout>
 8002982:	1e03      	subs	r3, r0, #0
 8002984:	d001      	beq.n	800298a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e081      	b.n	8002a8e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298e:	781a      	ldrb	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029be:	b29b      	uxth	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d03a      	beq.n	8002a3a <HAL_I2C_Mem_Write+0x1fa>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d136      	bne.n	8002a3a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	0013      	movs	r3, r2
 80029d6:	2200      	movs	r2, #0
 80029d8:	2180      	movs	r1, #128	@ 0x80
 80029da:	f000 f8e5 	bl	8002ba8 <I2C_WaitOnFlagUntilTimeout>
 80029de:	1e03      	subs	r3, r0, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e053      	b.n	8002a8e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2bff      	cmp	r3, #255	@ 0xff
 80029ee:	d911      	bls.n	8002a14 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	22ff      	movs	r2, #255	@ 0xff
 80029f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	2380      	movs	r3, #128	@ 0x80
 80029fe:	045c      	lsls	r4, r3, #17
 8002a00:	230a      	movs	r3, #10
 8002a02:	18fb      	adds	r3, r7, r3
 8002a04:	8819      	ldrh	r1, [r3, #0]
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	2300      	movs	r3, #0
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	0023      	movs	r3, r4
 8002a0e:	f000 fa9b 	bl	8002f48 <I2C_TransferConfig>
 8002a12:	e012      	b.n	8002a3a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	2380      	movs	r3, #128	@ 0x80
 8002a26:	049c      	lsls	r4, r3, #18
 8002a28:	230a      	movs	r3, #10
 8002a2a:	18fb      	adds	r3, r7, r3
 8002a2c:	8819      	ldrh	r1, [r3, #0]
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	2300      	movs	r3, #0
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	0023      	movs	r3, r4
 8002a36:	f000 fa87 	bl	8002f48 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d198      	bne.n	8002976 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f000 f940 	bl	8002cd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a50:	1e03      	subs	r3, r0, #0
 8002a52:	d001      	beq.n	8002a58 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e01a      	b.n	8002a8e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	490b      	ldr	r1, [pc, #44]	@ (8002a98 <HAL_I2C_Mem_Write+0x258>)
 8002a6c:	400a      	ands	r2, r1
 8002a6e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2241      	movs	r2, #65	@ 0x41
 8002a74:	2120      	movs	r1, #32
 8002a76:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2242      	movs	r2, #66	@ 0x42
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2240      	movs	r2, #64	@ 0x40
 8002a84:	2100      	movs	r1, #0
 8002a86:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	e000      	b.n	8002a8e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002a8c:	2302      	movs	r3, #2
  }
}
 8002a8e:	0018      	movs	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b007      	add	sp, #28
 8002a94:	bd90      	pop	{r4, r7, pc}
 8002a96:	46c0      	nop			@ (mov r8, r8)
 8002a98:	fe00e800 	.word	0xfe00e800

08002a9c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002a9c:	b5b0      	push	{r4, r5, r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af02      	add	r7, sp, #8
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	000c      	movs	r4, r1
 8002aa6:	0010      	movs	r0, r2
 8002aa8:	0019      	movs	r1, r3
 8002aaa:	250a      	movs	r5, #10
 8002aac:	197b      	adds	r3, r7, r5
 8002aae:	1c22      	adds	r2, r4, #0
 8002ab0:	801a      	strh	r2, [r3, #0]
 8002ab2:	2308      	movs	r3, #8
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	1c02      	adds	r2, r0, #0
 8002ab8:	801a      	strh	r2, [r3, #0]
 8002aba:	1dbb      	adds	r3, r7, #6
 8002abc:	1c0a      	adds	r2, r1, #0
 8002abe:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002ac0:	1dbb      	adds	r3, r7, #6
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	2380      	movs	r3, #128	@ 0x80
 8002ac8:	045c      	lsls	r4, r3, #17
 8002aca:	197b      	adds	r3, r7, r5
 8002acc:	8819      	ldrh	r1, [r3, #0]
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	4b23      	ldr	r3, [pc, #140]	@ (8002b60 <I2C_RequestMemoryWrite+0xc4>)
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	0023      	movs	r3, r4
 8002ad6:	f000 fa37 	bl	8002f48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002adc:	6a39      	ldr	r1, [r7, #32]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	f000 f8af 	bl	8002c44 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ae6:	1e03      	subs	r3, r0, #0
 8002ae8:	d001      	beq.n	8002aee <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e033      	b.n	8002b56 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002aee:	1dbb      	adds	r3, r7, #6
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d107      	bne.n	8002b06 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002af6:	2308      	movs	r3, #8
 8002af8:	18fb      	adds	r3, r7, r3
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b04:	e019      	b.n	8002b3a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b06:	2308      	movs	r3, #8
 8002b08:	18fb      	adds	r3, r7, r3
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	0a1b      	lsrs	r3, r3, #8
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b1a:	6a39      	ldr	r1, [r7, #32]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f000 f890 	bl	8002c44 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b24:	1e03      	subs	r3, r0, #0
 8002b26:	d001      	beq.n	8002b2c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e014      	b.n	8002b56 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b2c:	2308      	movs	r3, #8
 8002b2e:	18fb      	adds	r3, r7, r3
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002b3a:	6a3a      	ldr	r2, [r7, #32]
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	0013      	movs	r3, r2
 8002b44:	2200      	movs	r2, #0
 8002b46:	2180      	movs	r1, #128	@ 0x80
 8002b48:	f000 f82e 	bl	8002ba8 <I2C_WaitOnFlagUntilTimeout>
 8002b4c:	1e03      	subs	r3, r0, #0
 8002b4e:	d001      	beq.n	8002b54 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	0018      	movs	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b004      	add	sp, #16
 8002b5c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b5e:	46c0      	nop			@ (mov r8, r8)
 8002b60:	80002000 	.word	0x80002000

08002b64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	2202      	movs	r2, #2
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d103      	bne.n	8002b82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d007      	beq.n	8002ba0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	619a      	str	r2, [r3, #24]
  }
}
 8002ba0:	46c0      	nop			@ (mov r8, r8)
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b002      	add	sp, #8
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	603b      	str	r3, [r7, #0]
 8002bb4:	1dfb      	adds	r3, r7, #7
 8002bb6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bb8:	e030      	b.n	8002c1c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	d02d      	beq.n	8002c1c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc0:	f7ff f98a 	bl	8001ed8 <HAL_GetTick>
 8002bc4:	0002      	movs	r2, r0
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d302      	bcc.n	8002bd6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d122      	bne.n	8002c1c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	4013      	ands	r3, r2
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	425a      	negs	r2, r3
 8002be6:	4153      	adcs	r3, r2
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	001a      	movs	r2, r3
 8002bec:	1dfb      	adds	r3, r7, #7
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d113      	bne.n	8002c1c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2241      	movs	r2, #65	@ 0x41
 8002c04:	2120      	movs	r1, #32
 8002c06:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2242      	movs	r2, #66	@ 0x42
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2240      	movs	r2, #64	@ 0x40
 8002c14:	2100      	movs	r1, #0
 8002c16:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e00f      	b.n	8002c3c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	4013      	ands	r3, r2
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	425a      	negs	r2, r3
 8002c2c:	4153      	adcs	r3, r2
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	001a      	movs	r2, r3
 8002c32:	1dfb      	adds	r3, r7, #7
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d0bf      	beq.n	8002bba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b004      	add	sp, #16
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c50:	e032      	b.n	8002cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f000 f87d 	bl	8002d58 <I2C_IsErrorOccurred>
 8002c5e:	1e03      	subs	r3, r0, #0
 8002c60:	d001      	beq.n	8002c66 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e030      	b.n	8002cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	d025      	beq.n	8002cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c6c:	f7ff f934 	bl	8001ed8 <HAL_GetTick>
 8002c70:	0002      	movs	r2, r0
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d302      	bcc.n	8002c82 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d11a      	bne.n	8002cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	2202      	movs	r2, #2
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d013      	beq.n	8002cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c94:	2220      	movs	r2, #32
 8002c96:	431a      	orrs	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2241      	movs	r2, #65	@ 0x41
 8002ca0:	2120      	movs	r1, #32
 8002ca2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2242      	movs	r2, #66	@ 0x42
 8002ca8:	2100      	movs	r1, #0
 8002caa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2240      	movs	r2, #64	@ 0x40
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e007      	b.n	8002cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d1c5      	bne.n	8002c52 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	0018      	movs	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b004      	add	sp, #16
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cdc:	e02f      	b.n	8002d3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f000 f837 	bl	8002d58 <I2C_IsErrorOccurred>
 8002cea:	1e03      	subs	r3, r0, #0
 8002cec:	d001      	beq.n	8002cf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e02d      	b.n	8002d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf2:	f7ff f8f1 	bl	8001ed8 <HAL_GetTick>
 8002cf6:	0002      	movs	r2, r0
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d302      	bcc.n	8002d08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d11a      	bne.n	8002d3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b20      	cmp	r3, #32
 8002d14:	d013      	beq.n	8002d3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2241      	movs	r2, #65	@ 0x41
 8002d26:	2120      	movs	r1, #32
 8002d28:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2242      	movs	r2, #66	@ 0x42
 8002d2e:	2100      	movs	r1, #0
 8002d30:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2240      	movs	r2, #64	@ 0x40
 8002d36:	2100      	movs	r1, #0
 8002d38:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e007      	b.n	8002d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	2220      	movs	r2, #32
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b20      	cmp	r3, #32
 8002d4a:	d1c8      	bne.n	8002cde <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	0018      	movs	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	b004      	add	sp, #16
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08a      	sub	sp, #40	@ 0x28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d64:	2327      	movs	r3, #39	@ 0x27
 8002d66:	18fb      	adds	r3, r7, r3
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	2210      	movs	r2, #16
 8002d80:	4013      	ands	r3, r2
 8002d82:	d100      	bne.n	8002d86 <I2C_IsErrorOccurred+0x2e>
 8002d84:	e079      	b.n	8002e7a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2210      	movs	r2, #16
 8002d8c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d8e:	e057      	b.n	8002e40 <I2C_IsErrorOccurred+0xe8>
 8002d90:	2227      	movs	r2, #39	@ 0x27
 8002d92:	18bb      	adds	r3, r7, r2
 8002d94:	18ba      	adds	r2, r7, r2
 8002d96:	7812      	ldrb	r2, [r2, #0]
 8002d98:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	d04f      	beq.n	8002e40 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002da0:	f7ff f89a 	bl	8001ed8 <HAL_GetTick>
 8002da4:	0002      	movs	r2, r0
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d302      	bcc.n	8002db6 <I2C_IsErrorOccurred+0x5e>
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d144      	bne.n	8002e40 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	2380      	movs	r3, #128	@ 0x80
 8002dbe:	01db      	lsls	r3, r3, #7
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002dc4:	2013      	movs	r0, #19
 8002dc6:	183b      	adds	r3, r7, r0
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	2142      	movs	r1, #66	@ 0x42
 8002dcc:	5c52      	ldrb	r2, [r2, r1]
 8002dce:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699a      	ldr	r2, [r3, #24]
 8002dd6:	2380      	movs	r3, #128	@ 0x80
 8002dd8:	021b      	lsls	r3, r3, #8
 8002dda:	401a      	ands	r2, r3
 8002ddc:	2380      	movs	r3, #128	@ 0x80
 8002dde:	021b      	lsls	r3, r3, #8
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d126      	bne.n	8002e32 <I2C_IsErrorOccurred+0xda>
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	2380      	movs	r3, #128	@ 0x80
 8002de8:	01db      	lsls	r3, r3, #7
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d021      	beq.n	8002e32 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002dee:	183b      	adds	r3, r7, r0
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b20      	cmp	r3, #32
 8002df4:	d01d      	beq.n	8002e32 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2180      	movs	r1, #128	@ 0x80
 8002e02:	01c9      	lsls	r1, r1, #7
 8002e04:	430a      	orrs	r2, r1
 8002e06:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e08:	f7ff f866 	bl	8001ed8 <HAL_GetTick>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e10:	e00f      	b.n	8002e32 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e12:	f7ff f861 	bl	8001ed8 <HAL_GetTick>
 8002e16:	0002      	movs	r2, r0
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b19      	cmp	r3, #25
 8002e1e:	d908      	bls.n	8002e32 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	2220      	movs	r2, #32
 8002e24:	4313      	orrs	r3, r2
 8002e26:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e28:	2327      	movs	r3, #39	@ 0x27
 8002e2a:	18fb      	adds	r3, r7, r3
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	701a      	strb	r2, [r3, #0]

              break;
 8002e30:	e006      	b.n	8002e40 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d1e8      	bne.n	8002e12 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	2220      	movs	r2, #32
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b20      	cmp	r3, #32
 8002e4c:	d004      	beq.n	8002e58 <I2C_IsErrorOccurred+0x100>
 8002e4e:	2327      	movs	r3, #39	@ 0x27
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d09b      	beq.n	8002d90 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e58:	2327      	movs	r3, #39	@ 0x27
 8002e5a:	18fb      	adds	r3, r7, r3
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d103      	bne.n	8002e6a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2220      	movs	r2, #32
 8002e68:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e72:	2327      	movs	r3, #39	@ 0x27
 8002e74:	18fb      	adds	r3, r7, r3
 8002e76:	2201      	movs	r2, #1
 8002e78:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	2380      	movs	r3, #128	@ 0x80
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d00c      	beq.n	8002ea6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	4313      	orrs	r3, r2
 8002e92:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2280      	movs	r2, #128	@ 0x80
 8002e9a:	0052      	lsls	r2, r2, #1
 8002e9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e9e:	2327      	movs	r3, #39	@ 0x27
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	2380      	movs	r3, #128	@ 0x80
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4013      	ands	r3, r2
 8002eae:	d00c      	beq.n	8002eca <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	2208      	movs	r2, #8
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2280      	movs	r2, #128	@ 0x80
 8002ebe:	00d2      	lsls	r2, r2, #3
 8002ec0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ec2:	2327      	movs	r3, #39	@ 0x27
 8002ec4:	18fb      	adds	r3, r7, r3
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	2380      	movs	r3, #128	@ 0x80
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d00c      	beq.n	8002eee <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2280      	movs	r2, #128	@ 0x80
 8002ee2:	0092      	lsls	r2, r2, #2
 8002ee4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ee6:	2327      	movs	r3, #39	@ 0x27
 8002ee8:	18fb      	adds	r3, r7, r3
 8002eea:	2201      	movs	r2, #1
 8002eec:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002eee:	2327      	movs	r3, #39	@ 0x27
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d01d      	beq.n	8002f34 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	0018      	movs	r0, r3
 8002efc:	f7ff fe32 	bl	8002b64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	490e      	ldr	r1, [pc, #56]	@ (8002f44 <I2C_IsErrorOccurred+0x1ec>)
 8002f0c:	400a      	ands	r2, r1
 8002f0e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2241      	movs	r2, #65	@ 0x41
 8002f20:	2120      	movs	r1, #32
 8002f22:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2242      	movs	r2, #66	@ 0x42
 8002f28:	2100      	movs	r1, #0
 8002f2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2240      	movs	r2, #64	@ 0x40
 8002f30:	2100      	movs	r1, #0
 8002f32:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002f34:	2327      	movs	r3, #39	@ 0x27
 8002f36:	18fb      	adds	r3, r7, r3
 8002f38:	781b      	ldrb	r3, [r3, #0]
}
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	b00a      	add	sp, #40	@ 0x28
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	46c0      	nop			@ (mov r8, r8)
 8002f44:	fe00e800 	.word	0xfe00e800

08002f48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f48:	b590      	push	{r4, r7, lr}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	0008      	movs	r0, r1
 8002f52:	0011      	movs	r1, r2
 8002f54:	607b      	str	r3, [r7, #4]
 8002f56:	240a      	movs	r4, #10
 8002f58:	193b      	adds	r3, r7, r4
 8002f5a:	1c02      	adds	r2, r0, #0
 8002f5c:	801a      	strh	r2, [r3, #0]
 8002f5e:	2009      	movs	r0, #9
 8002f60:	183b      	adds	r3, r7, r0
 8002f62:	1c0a      	adds	r2, r1, #0
 8002f64:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f66:	193b      	adds	r3, r7, r4
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	059b      	lsls	r3, r3, #22
 8002f6c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f6e:	183b      	adds	r3, r7, r0
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	0419      	lsls	r1, r3, #16
 8002f74:	23ff      	movs	r3, #255	@ 0xff
 8002f76:	041b      	lsls	r3, r3, #16
 8002f78:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f7a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f82:	4313      	orrs	r3, r2
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	085b      	lsrs	r3, r3, #1
 8002f88:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f92:	0d51      	lsrs	r1, r2, #21
 8002f94:	2280      	movs	r2, #128	@ 0x80
 8002f96:	00d2      	lsls	r2, r2, #3
 8002f98:	400a      	ands	r2, r1
 8002f9a:	4907      	ldr	r1, [pc, #28]	@ (8002fb8 <I2C_TransferConfig+0x70>)
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	43d2      	mvns	r2, r2
 8002fa0:	401a      	ands	r2, r3
 8002fa2:	0011      	movs	r1, r2
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002fae:	46c0      	nop			@ (mov r8, r8)
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	b007      	add	sp, #28
 8002fb4:	bd90      	pop	{r4, r7, pc}
 8002fb6:	46c0      	nop			@ (mov r8, r8)
 8002fb8:	03ff63ff 	.word	0x03ff63ff

08002fbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2241      	movs	r2, #65	@ 0x41
 8002fca:	5c9b      	ldrb	r3, [r3, r2]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b20      	cmp	r3, #32
 8002fd0:	d138      	bne.n	8003044 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2240      	movs	r2, #64	@ 0x40
 8002fd6:	5c9b      	ldrb	r3, [r3, r2]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e032      	b.n	8003046 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2240      	movs	r2, #64	@ 0x40
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2241      	movs	r2, #65	@ 0x41
 8002fec:	2124      	movs	r1, #36	@ 0x24
 8002fee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	438a      	bics	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4911      	ldr	r1, [pc, #68]	@ (8003050 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800300c:	400a      	ands	r2, r1
 800300e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6819      	ldr	r1, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2101      	movs	r1, #1
 800302c:	430a      	orrs	r2, r1
 800302e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2241      	movs	r2, #65	@ 0x41
 8003034:	2120      	movs	r1, #32
 8003036:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	2100      	movs	r1, #0
 800303e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003040:	2300      	movs	r3, #0
 8003042:	e000      	b.n	8003046 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003044:	2302      	movs	r3, #2
  }
}
 8003046:	0018      	movs	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	b002      	add	sp, #8
 800304c:	bd80      	pop	{r7, pc}
 800304e:	46c0      	nop			@ (mov r8, r8)
 8003050:	ffffefff 	.word	0xffffefff

08003054 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2241      	movs	r2, #65	@ 0x41
 8003062:	5c9b      	ldrb	r3, [r3, r2]
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b20      	cmp	r3, #32
 8003068:	d139      	bne.n	80030de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2240      	movs	r2, #64	@ 0x40
 800306e:	5c9b      	ldrb	r3, [r3, r2]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003074:	2302      	movs	r3, #2
 8003076:	e033      	b.n	80030e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2240      	movs	r2, #64	@ 0x40
 800307c:	2101      	movs	r1, #1
 800307e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2241      	movs	r2, #65	@ 0x41
 8003084:	2124      	movs	r1, #36	@ 0x24
 8003086:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2101      	movs	r1, #1
 8003094:	438a      	bics	r2, r1
 8003096:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4a11      	ldr	r2, [pc, #68]	@ (80030e8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	021b      	lsls	r3, r3, #8
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2101      	movs	r1, #1
 80030c6:	430a      	orrs	r2, r1
 80030c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2241      	movs	r2, #65	@ 0x41
 80030ce:	2120      	movs	r1, #32
 80030d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2240      	movs	r2, #64	@ 0x40
 80030d6:	2100      	movs	r1, #0
 80030d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	e000      	b.n	80030e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030de:	2302      	movs	r3, #2
  }
}
 80030e0:	0018      	movs	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b004      	add	sp, #16
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	fffff0ff 	.word	0xfffff0ff

080030ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030ec:	b5b0      	push	{r4, r5, r7, lr}
 80030ee:	b08a      	sub	sp, #40	@ 0x28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d102      	bne.n	8003100 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	f000 fbaf 	bl	800385e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003100:	4bcf      	ldr	r3, [pc, #828]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	220c      	movs	r2, #12
 8003106:	4013      	ands	r3, r2
 8003108:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800310a:	4bcd      	ldr	r3, [pc, #820]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	2380      	movs	r3, #128	@ 0x80
 8003110:	025b      	lsls	r3, r3, #9
 8003112:	4013      	ands	r3, r2
 8003114:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2201      	movs	r2, #1
 800311c:	4013      	ands	r3, r2
 800311e:	d100      	bne.n	8003122 <HAL_RCC_OscConfig+0x36>
 8003120:	e07e      	b.n	8003220 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	2b08      	cmp	r3, #8
 8003126:	d007      	beq.n	8003138 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	2b0c      	cmp	r3, #12
 800312c:	d112      	bne.n	8003154 <HAL_RCC_OscConfig+0x68>
 800312e:	69fa      	ldr	r2, [r7, #28]
 8003130:	2380      	movs	r3, #128	@ 0x80
 8003132:	025b      	lsls	r3, r3, #9
 8003134:	429a      	cmp	r2, r3
 8003136:	d10d      	bne.n	8003154 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003138:	4bc1      	ldr	r3, [pc, #772]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	2380      	movs	r3, #128	@ 0x80
 800313e:	029b      	lsls	r3, r3, #10
 8003140:	4013      	ands	r3, r2
 8003142:	d100      	bne.n	8003146 <HAL_RCC_OscConfig+0x5a>
 8003144:	e06b      	b.n	800321e <HAL_RCC_OscConfig+0x132>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d167      	bne.n	800321e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	f000 fb85 	bl	800385e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	2380      	movs	r3, #128	@ 0x80
 800315a:	025b      	lsls	r3, r3, #9
 800315c:	429a      	cmp	r2, r3
 800315e:	d107      	bne.n	8003170 <HAL_RCC_OscConfig+0x84>
 8003160:	4bb7      	ldr	r3, [pc, #732]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4bb6      	ldr	r3, [pc, #728]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 8003166:	2180      	movs	r1, #128	@ 0x80
 8003168:	0249      	lsls	r1, r1, #9
 800316a:	430a      	orrs	r2, r1
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	e027      	b.n	80031c0 <HAL_RCC_OscConfig+0xd4>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	23a0      	movs	r3, #160	@ 0xa0
 8003176:	02db      	lsls	r3, r3, #11
 8003178:	429a      	cmp	r2, r3
 800317a:	d10e      	bne.n	800319a <HAL_RCC_OscConfig+0xae>
 800317c:	4bb0      	ldr	r3, [pc, #704]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	4baf      	ldr	r3, [pc, #700]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 8003182:	2180      	movs	r1, #128	@ 0x80
 8003184:	02c9      	lsls	r1, r1, #11
 8003186:	430a      	orrs	r2, r1
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	4bad      	ldr	r3, [pc, #692]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	4bac      	ldr	r3, [pc, #688]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 8003190:	2180      	movs	r1, #128	@ 0x80
 8003192:	0249      	lsls	r1, r1, #9
 8003194:	430a      	orrs	r2, r1
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	e012      	b.n	80031c0 <HAL_RCC_OscConfig+0xd4>
 800319a:	4ba9      	ldr	r3, [pc, #676]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	4ba8      	ldr	r3, [pc, #672]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 80031a0:	49a8      	ldr	r1, [pc, #672]	@ (8003444 <HAL_RCC_OscConfig+0x358>)
 80031a2:	400a      	ands	r2, r1
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	4ba6      	ldr	r3, [pc, #664]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	2380      	movs	r3, #128	@ 0x80
 80031ac:	025b      	lsls	r3, r3, #9
 80031ae:	4013      	ands	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4ba2      	ldr	r3, [pc, #648]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	4ba1      	ldr	r3, [pc, #644]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 80031ba:	49a3      	ldr	r1, [pc, #652]	@ (8003448 <HAL_RCC_OscConfig+0x35c>)
 80031bc:	400a      	ands	r2, r1
 80031be:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d015      	beq.n	80031f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c8:	f7fe fe86 	bl	8001ed8 <HAL_GetTick>
 80031cc:	0003      	movs	r3, r0
 80031ce:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031d0:	e009      	b.n	80031e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031d2:	f7fe fe81 	bl	8001ed8 <HAL_GetTick>
 80031d6:	0002      	movs	r2, r0
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b64      	cmp	r3, #100	@ 0x64
 80031de:	d902      	bls.n	80031e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	f000 fb3c 	bl	800385e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031e6:	4b96      	ldr	r3, [pc, #600]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	2380      	movs	r3, #128	@ 0x80
 80031ec:	029b      	lsls	r3, r3, #10
 80031ee:	4013      	ands	r3, r2
 80031f0:	d0ef      	beq.n	80031d2 <HAL_RCC_OscConfig+0xe6>
 80031f2:	e015      	b.n	8003220 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f4:	f7fe fe70 	bl	8001ed8 <HAL_GetTick>
 80031f8:	0003      	movs	r3, r0
 80031fa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031fe:	f7fe fe6b 	bl	8001ed8 <HAL_GetTick>
 8003202:	0002      	movs	r2, r0
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b64      	cmp	r3, #100	@ 0x64
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e326      	b.n	800385e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003210:	4b8b      	ldr	r3, [pc, #556]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	2380      	movs	r3, #128	@ 0x80
 8003216:	029b      	lsls	r3, r3, #10
 8003218:	4013      	ands	r3, r2
 800321a:	d1f0      	bne.n	80031fe <HAL_RCC_OscConfig+0x112>
 800321c:	e000      	b.n	8003220 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800321e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2202      	movs	r2, #2
 8003226:	4013      	ands	r3, r2
 8003228:	d100      	bne.n	800322c <HAL_RCC_OscConfig+0x140>
 800322a:	e08b      	b.n	8003344 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	2b04      	cmp	r3, #4
 8003236:	d005      	beq.n	8003244 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	2b0c      	cmp	r3, #12
 800323c:	d13e      	bne.n	80032bc <HAL_RCC_OscConfig+0x1d0>
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d13b      	bne.n	80032bc <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003244:	4b7e      	ldr	r3, [pc, #504]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2204      	movs	r2, #4
 800324a:	4013      	ands	r3, r2
 800324c:	d004      	beq.n	8003258 <HAL_RCC_OscConfig+0x16c>
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e302      	b.n	800385e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003258:	4b79      	ldr	r3, [pc, #484]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	4a7b      	ldr	r2, [pc, #492]	@ (800344c <HAL_RCC_OscConfig+0x360>)
 800325e:	4013      	ands	r3, r2
 8003260:	0019      	movs	r1, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	021a      	lsls	r2, r3, #8
 8003268:	4b75      	ldr	r3, [pc, #468]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800326e:	4b74      	ldr	r3, [pc, #464]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2209      	movs	r2, #9
 8003274:	4393      	bics	r3, r2
 8003276:	0019      	movs	r1, r3
 8003278:	4b71      	ldr	r3, [pc, #452]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	430a      	orrs	r2, r1
 800327e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003280:	f000 fc40 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 8003284:	0001      	movs	r1, r0
 8003286:	4b6e      	ldr	r3, [pc, #440]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	091b      	lsrs	r3, r3, #4
 800328c:	220f      	movs	r2, #15
 800328e:	4013      	ands	r3, r2
 8003290:	4a6f      	ldr	r2, [pc, #444]	@ (8003450 <HAL_RCC_OscConfig+0x364>)
 8003292:	5cd3      	ldrb	r3, [r2, r3]
 8003294:	000a      	movs	r2, r1
 8003296:	40da      	lsrs	r2, r3
 8003298:	4b6e      	ldr	r3, [pc, #440]	@ (8003454 <HAL_RCC_OscConfig+0x368>)
 800329a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800329c:	4b6e      	ldr	r3, [pc, #440]	@ (8003458 <HAL_RCC_OscConfig+0x36c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2513      	movs	r5, #19
 80032a2:	197c      	adds	r4, r7, r5
 80032a4:	0018      	movs	r0, r3
 80032a6:	f7fe fdd1 	bl	8001e4c <HAL_InitTick>
 80032aa:	0003      	movs	r3, r0
 80032ac:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80032ae:	197b      	adds	r3, r7, r5
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d046      	beq.n	8003344 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80032b6:	197b      	adds	r3, r7, r5
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	e2d0      	b.n	800385e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d027      	beq.n	8003312 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80032c2:	4b5f      	ldr	r3, [pc, #380]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2209      	movs	r2, #9
 80032c8:	4393      	bics	r3, r2
 80032ca:	0019      	movs	r1, r3
 80032cc:	4b5c      	ldr	r3, [pc, #368]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d4:	f7fe fe00 	bl	8001ed8 <HAL_GetTick>
 80032d8:	0003      	movs	r3, r0
 80032da:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032de:	f7fe fdfb 	bl	8001ed8 <HAL_GetTick>
 80032e2:	0002      	movs	r2, r0
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e2b6      	b.n	800385e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032f0:	4b53      	ldr	r3, [pc, #332]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2204      	movs	r2, #4
 80032f6:	4013      	ands	r3, r2
 80032f8:	d0f1      	beq.n	80032de <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fa:	4b51      	ldr	r3, [pc, #324]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	4a53      	ldr	r2, [pc, #332]	@ (800344c <HAL_RCC_OscConfig+0x360>)
 8003300:	4013      	ands	r3, r2
 8003302:	0019      	movs	r1, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	021a      	lsls	r2, r3, #8
 800330a:	4b4d      	ldr	r3, [pc, #308]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 800330c:	430a      	orrs	r2, r1
 800330e:	605a      	str	r2, [r3, #4]
 8003310:	e018      	b.n	8003344 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003312:	4b4b      	ldr	r3, [pc, #300]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	4b4a      	ldr	r3, [pc, #296]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 8003318:	2101      	movs	r1, #1
 800331a:	438a      	bics	r2, r1
 800331c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331e:	f7fe fddb 	bl	8001ed8 <HAL_GetTick>
 8003322:	0003      	movs	r3, r0
 8003324:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003328:	f7fe fdd6 	bl	8001ed8 <HAL_GetTick>
 800332c:	0002      	movs	r2, r0
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e291      	b.n	800385e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800333a:	4b41      	ldr	r3, [pc, #260]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2204      	movs	r2, #4
 8003340:	4013      	ands	r3, r2
 8003342:	d1f1      	bne.n	8003328 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2210      	movs	r2, #16
 800334a:	4013      	ands	r3, r2
 800334c:	d100      	bne.n	8003350 <HAL_RCC_OscConfig+0x264>
 800334e:	e0a1      	b.n	8003494 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d140      	bne.n	80033d8 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003356:	4b3a      	ldr	r3, [pc, #232]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	2380      	movs	r3, #128	@ 0x80
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4013      	ands	r3, r2
 8003360:	d005      	beq.n	800336e <HAL_RCC_OscConfig+0x282>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e277      	b.n	800385e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800336e:	4b34      	ldr	r3, [pc, #208]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4a3a      	ldr	r2, [pc, #232]	@ (800345c <HAL_RCC_OscConfig+0x370>)
 8003374:	4013      	ands	r3, r2
 8003376:	0019      	movs	r1, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800337c:	4b30      	ldr	r3, [pc, #192]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 800337e:	430a      	orrs	r2, r1
 8003380:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003382:	4b2f      	ldr	r3, [pc, #188]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	021b      	lsls	r3, r3, #8
 8003388:	0a19      	lsrs	r1, r3, #8
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	061a      	lsls	r2, r3, #24
 8003390:	4b2b      	ldr	r3, [pc, #172]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	0b5b      	lsrs	r3, r3, #13
 800339c:	3301      	adds	r3, #1
 800339e:	2280      	movs	r2, #128	@ 0x80
 80033a0:	0212      	lsls	r2, r2, #8
 80033a2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80033a4:	4b26      	ldr	r3, [pc, #152]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	091b      	lsrs	r3, r3, #4
 80033aa:	210f      	movs	r1, #15
 80033ac:	400b      	ands	r3, r1
 80033ae:	4928      	ldr	r1, [pc, #160]	@ (8003450 <HAL_RCC_OscConfig+0x364>)
 80033b0:	5ccb      	ldrb	r3, [r1, r3]
 80033b2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80033b4:	4b27      	ldr	r3, [pc, #156]	@ (8003454 <HAL_RCC_OscConfig+0x368>)
 80033b6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80033b8:	4b27      	ldr	r3, [pc, #156]	@ (8003458 <HAL_RCC_OscConfig+0x36c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2513      	movs	r5, #19
 80033be:	197c      	adds	r4, r7, r5
 80033c0:	0018      	movs	r0, r3
 80033c2:	f7fe fd43 	bl	8001e4c <HAL_InitTick>
 80033c6:	0003      	movs	r3, r0
 80033c8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80033ca:	197b      	adds	r3, r7, r5
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d060      	beq.n	8003494 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80033d2:	197b      	adds	r3, r7, r5
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	e242      	b.n	800385e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d03f      	beq.n	8003460 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033e0:	4b17      	ldr	r3, [pc, #92]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	4b16      	ldr	r3, [pc, #88]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 80033e6:	2180      	movs	r1, #128	@ 0x80
 80033e8:	0049      	lsls	r1, r1, #1
 80033ea:	430a      	orrs	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ee:	f7fe fd73 	bl	8001ed8 <HAL_GetTick>
 80033f2:	0003      	movs	r3, r0
 80033f4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033f8:	f7fe fd6e 	bl	8001ed8 <HAL_GetTick>
 80033fc:	0002      	movs	r2, r0
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e229      	b.n	800385e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800340a:	4b0d      	ldr	r3, [pc, #52]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	2380      	movs	r3, #128	@ 0x80
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4013      	ands	r3, r2
 8003414:	d0f0      	beq.n	80033f8 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003416:	4b0a      	ldr	r3, [pc, #40]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	4a10      	ldr	r2, [pc, #64]	@ (800345c <HAL_RCC_OscConfig+0x370>)
 800341c:	4013      	ands	r3, r2
 800341e:	0019      	movs	r1, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003424:	4b06      	ldr	r3, [pc, #24]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 8003426:	430a      	orrs	r2, r1
 8003428:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800342a:	4b05      	ldr	r3, [pc, #20]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	021b      	lsls	r3, r3, #8
 8003430:	0a19      	lsrs	r1, r3, #8
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	061a      	lsls	r2, r3, #24
 8003438:	4b01      	ldr	r3, [pc, #4]	@ (8003440 <HAL_RCC_OscConfig+0x354>)
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	e029      	b.n	8003494 <HAL_RCC_OscConfig+0x3a8>
 8003440:	40021000 	.word	0x40021000
 8003444:	fffeffff 	.word	0xfffeffff
 8003448:	fffbffff 	.word	0xfffbffff
 800344c:	ffffe0ff 	.word	0xffffe0ff
 8003450:	080087d8 	.word	0x080087d8
 8003454:	20000640 	.word	0x20000640
 8003458:	20000644 	.word	0x20000644
 800345c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003460:	4bbd      	ldr	r3, [pc, #756]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	4bbc      	ldr	r3, [pc, #752]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 8003466:	49bd      	ldr	r1, [pc, #756]	@ (800375c <HAL_RCC_OscConfig+0x670>)
 8003468:	400a      	ands	r2, r1
 800346a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fe fd34 	bl	8001ed8 <HAL_GetTick>
 8003470:	0003      	movs	r3, r0
 8003472:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003476:	f7fe fd2f 	bl	8001ed8 <HAL_GetTick>
 800347a:	0002      	movs	r2, r0
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e1ea      	b.n	800385e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003488:	4bb3      	ldr	r3, [pc, #716]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	2380      	movs	r3, #128	@ 0x80
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4013      	ands	r3, r2
 8003492:	d1f0      	bne.n	8003476 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2208      	movs	r2, #8
 800349a:	4013      	ands	r3, r2
 800349c:	d036      	beq.n	800350c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d019      	beq.n	80034da <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034a6:	4bac      	ldr	r3, [pc, #688]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 80034a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80034aa:	4bab      	ldr	r3, [pc, #684]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 80034ac:	2101      	movs	r1, #1
 80034ae:	430a      	orrs	r2, r1
 80034b0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b2:	f7fe fd11 	bl	8001ed8 <HAL_GetTick>
 80034b6:	0003      	movs	r3, r0
 80034b8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034bc:	f7fe fd0c 	bl	8001ed8 <HAL_GetTick>
 80034c0:	0002      	movs	r2, r0
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e1c7      	b.n	800385e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80034ce:	4ba2      	ldr	r3, [pc, #648]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 80034d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034d2:	2202      	movs	r2, #2
 80034d4:	4013      	ands	r3, r2
 80034d6:	d0f1      	beq.n	80034bc <HAL_RCC_OscConfig+0x3d0>
 80034d8:	e018      	b.n	800350c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034da:	4b9f      	ldr	r3, [pc, #636]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 80034dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80034de:	4b9e      	ldr	r3, [pc, #632]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 80034e0:	2101      	movs	r1, #1
 80034e2:	438a      	bics	r2, r1
 80034e4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e6:	f7fe fcf7 	bl	8001ed8 <HAL_GetTick>
 80034ea:	0003      	movs	r3, r0
 80034ec:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034f0:	f7fe fcf2 	bl	8001ed8 <HAL_GetTick>
 80034f4:	0002      	movs	r2, r0
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e1ad      	b.n	800385e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003502:	4b95      	ldr	r3, [pc, #596]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 8003504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003506:	2202      	movs	r2, #2
 8003508:	4013      	ands	r3, r2
 800350a:	d1f1      	bne.n	80034f0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2204      	movs	r2, #4
 8003512:	4013      	ands	r3, r2
 8003514:	d100      	bne.n	8003518 <HAL_RCC_OscConfig+0x42c>
 8003516:	e0ae      	b.n	8003676 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003518:	2027      	movs	r0, #39	@ 0x27
 800351a:	183b      	adds	r3, r7, r0
 800351c:	2200      	movs	r2, #0
 800351e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003520:	4b8d      	ldr	r3, [pc, #564]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 8003522:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003524:	2380      	movs	r3, #128	@ 0x80
 8003526:	055b      	lsls	r3, r3, #21
 8003528:	4013      	ands	r3, r2
 800352a:	d109      	bne.n	8003540 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800352c:	4b8a      	ldr	r3, [pc, #552]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 800352e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003530:	4b89      	ldr	r3, [pc, #548]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 8003532:	2180      	movs	r1, #128	@ 0x80
 8003534:	0549      	lsls	r1, r1, #21
 8003536:	430a      	orrs	r2, r1
 8003538:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800353a:	183b      	adds	r3, r7, r0
 800353c:	2201      	movs	r2, #1
 800353e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003540:	4b87      	ldr	r3, [pc, #540]	@ (8003760 <HAL_RCC_OscConfig+0x674>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	2380      	movs	r3, #128	@ 0x80
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	4013      	ands	r3, r2
 800354a:	d11a      	bne.n	8003582 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800354c:	4b84      	ldr	r3, [pc, #528]	@ (8003760 <HAL_RCC_OscConfig+0x674>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4b83      	ldr	r3, [pc, #524]	@ (8003760 <HAL_RCC_OscConfig+0x674>)
 8003552:	2180      	movs	r1, #128	@ 0x80
 8003554:	0049      	lsls	r1, r1, #1
 8003556:	430a      	orrs	r2, r1
 8003558:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800355a:	f7fe fcbd 	bl	8001ed8 <HAL_GetTick>
 800355e:	0003      	movs	r3, r0
 8003560:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003564:	f7fe fcb8 	bl	8001ed8 <HAL_GetTick>
 8003568:	0002      	movs	r2, r0
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b64      	cmp	r3, #100	@ 0x64
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e173      	b.n	800385e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003576:	4b7a      	ldr	r3, [pc, #488]	@ (8003760 <HAL_RCC_OscConfig+0x674>)
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	2380      	movs	r3, #128	@ 0x80
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	4013      	ands	r3, r2
 8003580:	d0f0      	beq.n	8003564 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	2380      	movs	r3, #128	@ 0x80
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	429a      	cmp	r2, r3
 800358c:	d107      	bne.n	800359e <HAL_RCC_OscConfig+0x4b2>
 800358e:	4b72      	ldr	r3, [pc, #456]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 8003590:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003592:	4b71      	ldr	r3, [pc, #452]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 8003594:	2180      	movs	r1, #128	@ 0x80
 8003596:	0049      	lsls	r1, r1, #1
 8003598:	430a      	orrs	r2, r1
 800359a:	651a      	str	r2, [r3, #80]	@ 0x50
 800359c:	e031      	b.n	8003602 <HAL_RCC_OscConfig+0x516>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10c      	bne.n	80035c0 <HAL_RCC_OscConfig+0x4d4>
 80035a6:	4b6c      	ldr	r3, [pc, #432]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 80035a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035aa:	4b6b      	ldr	r3, [pc, #428]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 80035ac:	496b      	ldr	r1, [pc, #428]	@ (800375c <HAL_RCC_OscConfig+0x670>)
 80035ae:	400a      	ands	r2, r1
 80035b0:	651a      	str	r2, [r3, #80]	@ 0x50
 80035b2:	4b69      	ldr	r3, [pc, #420]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 80035b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035b6:	4b68      	ldr	r3, [pc, #416]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 80035b8:	496a      	ldr	r1, [pc, #424]	@ (8003764 <HAL_RCC_OscConfig+0x678>)
 80035ba:	400a      	ands	r2, r1
 80035bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80035be:	e020      	b.n	8003602 <HAL_RCC_OscConfig+0x516>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	23a0      	movs	r3, #160	@ 0xa0
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d10e      	bne.n	80035ea <HAL_RCC_OscConfig+0x4fe>
 80035cc:	4b62      	ldr	r3, [pc, #392]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 80035ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035d0:	4b61      	ldr	r3, [pc, #388]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 80035d2:	2180      	movs	r1, #128	@ 0x80
 80035d4:	00c9      	lsls	r1, r1, #3
 80035d6:	430a      	orrs	r2, r1
 80035d8:	651a      	str	r2, [r3, #80]	@ 0x50
 80035da:	4b5f      	ldr	r3, [pc, #380]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 80035dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035de:	4b5e      	ldr	r3, [pc, #376]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 80035e0:	2180      	movs	r1, #128	@ 0x80
 80035e2:	0049      	lsls	r1, r1, #1
 80035e4:	430a      	orrs	r2, r1
 80035e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80035e8:	e00b      	b.n	8003602 <HAL_RCC_OscConfig+0x516>
 80035ea:	4b5b      	ldr	r3, [pc, #364]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 80035ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035ee:	4b5a      	ldr	r3, [pc, #360]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 80035f0:	495a      	ldr	r1, [pc, #360]	@ (800375c <HAL_RCC_OscConfig+0x670>)
 80035f2:	400a      	ands	r2, r1
 80035f4:	651a      	str	r2, [r3, #80]	@ 0x50
 80035f6:	4b58      	ldr	r3, [pc, #352]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 80035f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035fa:	4b57      	ldr	r3, [pc, #348]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 80035fc:	4959      	ldr	r1, [pc, #356]	@ (8003764 <HAL_RCC_OscConfig+0x678>)
 80035fe:	400a      	ands	r2, r1
 8003600:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d015      	beq.n	8003636 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800360a:	f7fe fc65 	bl	8001ed8 <HAL_GetTick>
 800360e:	0003      	movs	r3, r0
 8003610:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003612:	e009      	b.n	8003628 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003614:	f7fe fc60 	bl	8001ed8 <HAL_GetTick>
 8003618:	0002      	movs	r2, r0
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	4a52      	ldr	r2, [pc, #328]	@ (8003768 <HAL_RCC_OscConfig+0x67c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e11a      	b.n	800385e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003628:	4b4b      	ldr	r3, [pc, #300]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 800362a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800362c:	2380      	movs	r3, #128	@ 0x80
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4013      	ands	r3, r2
 8003632:	d0ef      	beq.n	8003614 <HAL_RCC_OscConfig+0x528>
 8003634:	e014      	b.n	8003660 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003636:	f7fe fc4f 	bl	8001ed8 <HAL_GetTick>
 800363a:	0003      	movs	r3, r0
 800363c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800363e:	e009      	b.n	8003654 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003640:	f7fe fc4a 	bl	8001ed8 <HAL_GetTick>
 8003644:	0002      	movs	r2, r0
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	4a47      	ldr	r2, [pc, #284]	@ (8003768 <HAL_RCC_OscConfig+0x67c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e104      	b.n	800385e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003654:	4b40      	ldr	r3, [pc, #256]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 8003656:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003658:	2380      	movs	r3, #128	@ 0x80
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4013      	ands	r3, r2
 800365e:	d1ef      	bne.n	8003640 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003660:	2327      	movs	r3, #39	@ 0x27
 8003662:	18fb      	adds	r3, r7, r3
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d105      	bne.n	8003676 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800366a:	4b3b      	ldr	r3, [pc, #236]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 800366c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800366e:	4b3a      	ldr	r3, [pc, #232]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 8003670:	493e      	ldr	r1, [pc, #248]	@ (800376c <HAL_RCC_OscConfig+0x680>)
 8003672:	400a      	ands	r2, r1
 8003674:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2220      	movs	r2, #32
 800367c:	4013      	ands	r3, r2
 800367e:	d049      	beq.n	8003714 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d026      	beq.n	80036d6 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003688:	4b33      	ldr	r3, [pc, #204]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	4b32      	ldr	r3, [pc, #200]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 800368e:	2101      	movs	r1, #1
 8003690:	430a      	orrs	r2, r1
 8003692:	609a      	str	r2, [r3, #8]
 8003694:	4b30      	ldr	r3, [pc, #192]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 8003696:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003698:	4b2f      	ldr	r3, [pc, #188]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 800369a:	2101      	movs	r1, #1
 800369c:	430a      	orrs	r2, r1
 800369e:	635a      	str	r2, [r3, #52]	@ 0x34
 80036a0:	4b33      	ldr	r3, [pc, #204]	@ (8003770 <HAL_RCC_OscConfig+0x684>)
 80036a2:	6a1a      	ldr	r2, [r3, #32]
 80036a4:	4b32      	ldr	r3, [pc, #200]	@ (8003770 <HAL_RCC_OscConfig+0x684>)
 80036a6:	2180      	movs	r1, #128	@ 0x80
 80036a8:	0189      	lsls	r1, r1, #6
 80036aa:	430a      	orrs	r2, r1
 80036ac:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ae:	f7fe fc13 	bl	8001ed8 <HAL_GetTick>
 80036b2:	0003      	movs	r3, r0
 80036b4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036b8:	f7fe fc0e 	bl	8001ed8 <HAL_GetTick>
 80036bc:	0002      	movs	r2, r0
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e0c9      	b.n	800385e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80036ca:	4b23      	ldr	r3, [pc, #140]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2202      	movs	r2, #2
 80036d0:	4013      	ands	r3, r2
 80036d2:	d0f1      	beq.n	80036b8 <HAL_RCC_OscConfig+0x5cc>
 80036d4:	e01e      	b.n	8003714 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80036d6:	4b20      	ldr	r3, [pc, #128]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	4b1f      	ldr	r3, [pc, #124]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 80036dc:	2101      	movs	r1, #1
 80036de:	438a      	bics	r2, r1
 80036e0:	609a      	str	r2, [r3, #8]
 80036e2:	4b23      	ldr	r3, [pc, #140]	@ (8003770 <HAL_RCC_OscConfig+0x684>)
 80036e4:	6a1a      	ldr	r2, [r3, #32]
 80036e6:	4b22      	ldr	r3, [pc, #136]	@ (8003770 <HAL_RCC_OscConfig+0x684>)
 80036e8:	4922      	ldr	r1, [pc, #136]	@ (8003774 <HAL_RCC_OscConfig+0x688>)
 80036ea:	400a      	ands	r2, r1
 80036ec:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ee:	f7fe fbf3 	bl	8001ed8 <HAL_GetTick>
 80036f2:	0003      	movs	r3, r0
 80036f4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036f8:	f7fe fbee 	bl	8001ed8 <HAL_GetTick>
 80036fc:	0002      	movs	r2, r0
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e0a9      	b.n	800385e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800370a:	4b13      	ldr	r3, [pc, #76]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2202      	movs	r2, #2
 8003710:	4013      	ands	r3, r2
 8003712:	d1f1      	bne.n	80036f8 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003718:	2b00      	cmp	r3, #0
 800371a:	d100      	bne.n	800371e <HAL_RCC_OscConfig+0x632>
 800371c:	e09e      	b.n	800385c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	2b0c      	cmp	r3, #12
 8003722:	d100      	bne.n	8003726 <HAL_RCC_OscConfig+0x63a>
 8003724:	e077      	b.n	8003816 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372a:	2b02      	cmp	r3, #2
 800372c:	d158      	bne.n	80037e0 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372e:	4b0a      	ldr	r3, [pc, #40]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	4b09      	ldr	r3, [pc, #36]	@ (8003758 <HAL_RCC_OscConfig+0x66c>)
 8003734:	4910      	ldr	r1, [pc, #64]	@ (8003778 <HAL_RCC_OscConfig+0x68c>)
 8003736:	400a      	ands	r2, r1
 8003738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373a:	f7fe fbcd 	bl	8001ed8 <HAL_GetTick>
 800373e:	0003      	movs	r3, r0
 8003740:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003742:	e01b      	b.n	800377c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003744:	f7fe fbc8 	bl	8001ed8 <HAL_GetTick>
 8003748:	0002      	movs	r2, r0
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d914      	bls.n	800377c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e083      	b.n	800385e <HAL_RCC_OscConfig+0x772>
 8003756:	46c0      	nop			@ (mov r8, r8)
 8003758:	40021000 	.word	0x40021000
 800375c:	fffffeff 	.word	0xfffffeff
 8003760:	40007000 	.word	0x40007000
 8003764:	fffffbff 	.word	0xfffffbff
 8003768:	00001388 	.word	0x00001388
 800376c:	efffffff 	.word	0xefffffff
 8003770:	40010000 	.word	0x40010000
 8003774:	ffffdfff 	.word	0xffffdfff
 8003778:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800377c:	4b3a      	ldr	r3, [pc, #232]	@ (8003868 <HAL_RCC_OscConfig+0x77c>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	2380      	movs	r3, #128	@ 0x80
 8003782:	049b      	lsls	r3, r3, #18
 8003784:	4013      	ands	r3, r2
 8003786:	d1dd      	bne.n	8003744 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003788:	4b37      	ldr	r3, [pc, #220]	@ (8003868 <HAL_RCC_OscConfig+0x77c>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	4a37      	ldr	r2, [pc, #220]	@ (800386c <HAL_RCC_OscConfig+0x780>)
 800378e:	4013      	ands	r3, r2
 8003790:	0019      	movs	r1, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037a0:	431a      	orrs	r2, r3
 80037a2:	4b31      	ldr	r3, [pc, #196]	@ (8003868 <HAL_RCC_OscConfig+0x77c>)
 80037a4:	430a      	orrs	r2, r1
 80037a6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a8:	4b2f      	ldr	r3, [pc, #188]	@ (8003868 <HAL_RCC_OscConfig+0x77c>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	4b2e      	ldr	r3, [pc, #184]	@ (8003868 <HAL_RCC_OscConfig+0x77c>)
 80037ae:	2180      	movs	r1, #128	@ 0x80
 80037b0:	0449      	lsls	r1, r1, #17
 80037b2:	430a      	orrs	r2, r1
 80037b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b6:	f7fe fb8f 	bl	8001ed8 <HAL_GetTick>
 80037ba:	0003      	movs	r3, r0
 80037bc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c0:	f7fe fb8a 	bl	8001ed8 <HAL_GetTick>
 80037c4:	0002      	movs	r2, r0
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e045      	b.n	800385e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80037d2:	4b25      	ldr	r3, [pc, #148]	@ (8003868 <HAL_RCC_OscConfig+0x77c>)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	2380      	movs	r3, #128	@ 0x80
 80037d8:	049b      	lsls	r3, r3, #18
 80037da:	4013      	ands	r3, r2
 80037dc:	d0f0      	beq.n	80037c0 <HAL_RCC_OscConfig+0x6d4>
 80037de:	e03d      	b.n	800385c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e0:	4b21      	ldr	r3, [pc, #132]	@ (8003868 <HAL_RCC_OscConfig+0x77c>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4b20      	ldr	r3, [pc, #128]	@ (8003868 <HAL_RCC_OscConfig+0x77c>)
 80037e6:	4922      	ldr	r1, [pc, #136]	@ (8003870 <HAL_RCC_OscConfig+0x784>)
 80037e8:	400a      	ands	r2, r1
 80037ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ec:	f7fe fb74 	bl	8001ed8 <HAL_GetTick>
 80037f0:	0003      	movs	r3, r0
 80037f2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f6:	f7fe fb6f 	bl	8001ed8 <HAL_GetTick>
 80037fa:	0002      	movs	r2, r0
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e02a      	b.n	800385e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003808:	4b17      	ldr	r3, [pc, #92]	@ (8003868 <HAL_RCC_OscConfig+0x77c>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	2380      	movs	r3, #128	@ 0x80
 800380e:	049b      	lsls	r3, r3, #18
 8003810:	4013      	ands	r3, r2
 8003812:	d1f0      	bne.n	80037f6 <HAL_RCC_OscConfig+0x70a>
 8003814:	e022      	b.n	800385c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e01d      	b.n	800385e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003822:	4b11      	ldr	r3, [pc, #68]	@ (8003868 <HAL_RCC_OscConfig+0x77c>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003828:	69fa      	ldr	r2, [r7, #28]
 800382a:	2380      	movs	r3, #128	@ 0x80
 800382c:	025b      	lsls	r3, r3, #9
 800382e:	401a      	ands	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003834:	429a      	cmp	r2, r3
 8003836:	d10f      	bne.n	8003858 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003838:	69fa      	ldr	r2, [r7, #28]
 800383a:	23f0      	movs	r3, #240	@ 0xf0
 800383c:	039b      	lsls	r3, r3, #14
 800383e:	401a      	ands	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003844:	429a      	cmp	r2, r3
 8003846:	d107      	bne.n	8003858 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003848:	69fa      	ldr	r2, [r7, #28]
 800384a:	23c0      	movs	r3, #192	@ 0xc0
 800384c:	041b      	lsls	r3, r3, #16
 800384e:	401a      	ands	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003854:	429a      	cmp	r2, r3
 8003856:	d001      	beq.n	800385c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e000      	b.n	800385e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	0018      	movs	r0, r3
 8003860:	46bd      	mov	sp, r7
 8003862:	b00a      	add	sp, #40	@ 0x28
 8003864:	bdb0      	pop	{r4, r5, r7, pc}
 8003866:	46c0      	nop			@ (mov r8, r8)
 8003868:	40021000 	.word	0x40021000
 800386c:	ff02ffff 	.word	0xff02ffff
 8003870:	feffffff 	.word	0xfeffffff

08003874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003874:	b5b0      	push	{r4, r5, r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e128      	b.n	8003ada <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003888:	4b96      	ldr	r3, [pc, #600]	@ (8003ae4 <HAL_RCC_ClockConfig+0x270>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2201      	movs	r2, #1
 800388e:	4013      	ands	r3, r2
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d91e      	bls.n	80038d4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003896:	4b93      	ldr	r3, [pc, #588]	@ (8003ae4 <HAL_RCC_ClockConfig+0x270>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2201      	movs	r2, #1
 800389c:	4393      	bics	r3, r2
 800389e:	0019      	movs	r1, r3
 80038a0:	4b90      	ldr	r3, [pc, #576]	@ (8003ae4 <HAL_RCC_ClockConfig+0x270>)
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038a8:	f7fe fb16 	bl	8001ed8 <HAL_GetTick>
 80038ac:	0003      	movs	r3, r0
 80038ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b0:	e009      	b.n	80038c6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b2:	f7fe fb11 	bl	8001ed8 <HAL_GetTick>
 80038b6:	0002      	movs	r2, r0
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	4a8a      	ldr	r2, [pc, #552]	@ (8003ae8 <HAL_RCC_ClockConfig+0x274>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e109      	b.n	8003ada <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c6:	4b87      	ldr	r3, [pc, #540]	@ (8003ae4 <HAL_RCC_ClockConfig+0x270>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2201      	movs	r2, #1
 80038cc:	4013      	ands	r3, r2
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d1ee      	bne.n	80038b2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2202      	movs	r2, #2
 80038da:	4013      	ands	r3, r2
 80038dc:	d009      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038de:	4b83      	ldr	r3, [pc, #524]	@ (8003aec <HAL_RCC_ClockConfig+0x278>)
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	22f0      	movs	r2, #240	@ 0xf0
 80038e4:	4393      	bics	r3, r2
 80038e6:	0019      	movs	r1, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	4b7f      	ldr	r3, [pc, #508]	@ (8003aec <HAL_RCC_ClockConfig+0x278>)
 80038ee:	430a      	orrs	r2, r1
 80038f0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2201      	movs	r2, #1
 80038f8:	4013      	ands	r3, r2
 80038fa:	d100      	bne.n	80038fe <HAL_RCC_ClockConfig+0x8a>
 80038fc:	e089      	b.n	8003a12 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d107      	bne.n	8003916 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003906:	4b79      	ldr	r3, [pc, #484]	@ (8003aec <HAL_RCC_ClockConfig+0x278>)
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	2380      	movs	r3, #128	@ 0x80
 800390c:	029b      	lsls	r3, r3, #10
 800390e:	4013      	ands	r3, r2
 8003910:	d120      	bne.n	8003954 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e0e1      	b.n	8003ada <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b03      	cmp	r3, #3
 800391c:	d107      	bne.n	800392e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800391e:	4b73      	ldr	r3, [pc, #460]	@ (8003aec <HAL_RCC_ClockConfig+0x278>)
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	2380      	movs	r3, #128	@ 0x80
 8003924:	049b      	lsls	r3, r3, #18
 8003926:	4013      	ands	r3, r2
 8003928:	d114      	bne.n	8003954 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e0d5      	b.n	8003ada <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d106      	bne.n	8003944 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003936:	4b6d      	ldr	r3, [pc, #436]	@ (8003aec <HAL_RCC_ClockConfig+0x278>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2204      	movs	r2, #4
 800393c:	4013      	ands	r3, r2
 800393e:	d109      	bne.n	8003954 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e0ca      	b.n	8003ada <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003944:	4b69      	ldr	r3, [pc, #420]	@ (8003aec <HAL_RCC_ClockConfig+0x278>)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	2380      	movs	r3, #128	@ 0x80
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4013      	ands	r3, r2
 800394e:	d101      	bne.n	8003954 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e0c2      	b.n	8003ada <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003954:	4b65      	ldr	r3, [pc, #404]	@ (8003aec <HAL_RCC_ClockConfig+0x278>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	2203      	movs	r2, #3
 800395a:	4393      	bics	r3, r2
 800395c:	0019      	movs	r1, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	4b62      	ldr	r3, [pc, #392]	@ (8003aec <HAL_RCC_ClockConfig+0x278>)
 8003964:	430a      	orrs	r2, r1
 8003966:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003968:	f7fe fab6 	bl	8001ed8 <HAL_GetTick>
 800396c:	0003      	movs	r3, r0
 800396e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b02      	cmp	r3, #2
 8003976:	d111      	bne.n	800399c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003978:	e009      	b.n	800398e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800397a:	f7fe faad 	bl	8001ed8 <HAL_GetTick>
 800397e:	0002      	movs	r2, r0
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	4a58      	ldr	r2, [pc, #352]	@ (8003ae8 <HAL_RCC_ClockConfig+0x274>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d901      	bls.n	800398e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e0a5      	b.n	8003ada <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800398e:	4b57      	ldr	r3, [pc, #348]	@ (8003aec <HAL_RCC_ClockConfig+0x278>)
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	220c      	movs	r2, #12
 8003994:	4013      	ands	r3, r2
 8003996:	2b08      	cmp	r3, #8
 8003998:	d1ef      	bne.n	800397a <HAL_RCC_ClockConfig+0x106>
 800399a:	e03a      	b.n	8003a12 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d111      	bne.n	80039c8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039a4:	e009      	b.n	80039ba <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039a6:	f7fe fa97 	bl	8001ed8 <HAL_GetTick>
 80039aa:	0002      	movs	r2, r0
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	4a4d      	ldr	r2, [pc, #308]	@ (8003ae8 <HAL_RCC_ClockConfig+0x274>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e08f      	b.n	8003ada <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039ba:	4b4c      	ldr	r3, [pc, #304]	@ (8003aec <HAL_RCC_ClockConfig+0x278>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	220c      	movs	r2, #12
 80039c0:	4013      	ands	r3, r2
 80039c2:	2b0c      	cmp	r3, #12
 80039c4:	d1ef      	bne.n	80039a6 <HAL_RCC_ClockConfig+0x132>
 80039c6:	e024      	b.n	8003a12 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d11b      	bne.n	8003a08 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80039d0:	e009      	b.n	80039e6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d2:	f7fe fa81 	bl	8001ed8 <HAL_GetTick>
 80039d6:	0002      	movs	r2, r0
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	4a42      	ldr	r2, [pc, #264]	@ (8003ae8 <HAL_RCC_ClockConfig+0x274>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e079      	b.n	8003ada <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80039e6:	4b41      	ldr	r3, [pc, #260]	@ (8003aec <HAL_RCC_ClockConfig+0x278>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	220c      	movs	r2, #12
 80039ec:	4013      	ands	r3, r2
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d1ef      	bne.n	80039d2 <HAL_RCC_ClockConfig+0x15e>
 80039f2:	e00e      	b.n	8003a12 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f4:	f7fe fa70 	bl	8001ed8 <HAL_GetTick>
 80039f8:	0002      	movs	r2, r0
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	4a3a      	ldr	r2, [pc, #232]	@ (8003ae8 <HAL_RCC_ClockConfig+0x274>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e068      	b.n	8003ada <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a08:	4b38      	ldr	r3, [pc, #224]	@ (8003aec <HAL_RCC_ClockConfig+0x278>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	220c      	movs	r2, #12
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d1f0      	bne.n	80039f4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a12:	4b34      	ldr	r3, [pc, #208]	@ (8003ae4 <HAL_RCC_ClockConfig+0x270>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2201      	movs	r2, #1
 8003a18:	4013      	ands	r3, r2
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d21e      	bcs.n	8003a5e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a20:	4b30      	ldr	r3, [pc, #192]	@ (8003ae4 <HAL_RCC_ClockConfig+0x270>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2201      	movs	r2, #1
 8003a26:	4393      	bics	r3, r2
 8003a28:	0019      	movs	r1, r3
 8003a2a:	4b2e      	ldr	r3, [pc, #184]	@ (8003ae4 <HAL_RCC_ClockConfig+0x270>)
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a32:	f7fe fa51 	bl	8001ed8 <HAL_GetTick>
 8003a36:	0003      	movs	r3, r0
 8003a38:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3a:	e009      	b.n	8003a50 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a3c:	f7fe fa4c 	bl	8001ed8 <HAL_GetTick>
 8003a40:	0002      	movs	r2, r0
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	4a28      	ldr	r2, [pc, #160]	@ (8003ae8 <HAL_RCC_ClockConfig+0x274>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e044      	b.n	8003ada <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a50:	4b24      	ldr	r3, [pc, #144]	@ (8003ae4 <HAL_RCC_ClockConfig+0x270>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2201      	movs	r2, #1
 8003a56:	4013      	ands	r3, r2
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d1ee      	bne.n	8003a3c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2204      	movs	r2, #4
 8003a64:	4013      	ands	r3, r2
 8003a66:	d009      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a68:	4b20      	ldr	r3, [pc, #128]	@ (8003aec <HAL_RCC_ClockConfig+0x278>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	4a20      	ldr	r2, [pc, #128]	@ (8003af0 <HAL_RCC_ClockConfig+0x27c>)
 8003a6e:	4013      	ands	r3, r2
 8003a70:	0019      	movs	r1, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	4b1d      	ldr	r3, [pc, #116]	@ (8003aec <HAL_RCC_ClockConfig+0x278>)
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2208      	movs	r2, #8
 8003a82:	4013      	ands	r3, r2
 8003a84:	d00a      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a86:	4b19      	ldr	r3, [pc, #100]	@ (8003aec <HAL_RCC_ClockConfig+0x278>)
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	4a1a      	ldr	r2, [pc, #104]	@ (8003af4 <HAL_RCC_ClockConfig+0x280>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	0019      	movs	r1, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	00da      	lsls	r2, r3, #3
 8003a96:	4b15      	ldr	r3, [pc, #84]	@ (8003aec <HAL_RCC_ClockConfig+0x278>)
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a9c:	f000 f832 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 8003aa0:	0001      	movs	r1, r0
 8003aa2:	4b12      	ldr	r3, [pc, #72]	@ (8003aec <HAL_RCC_ClockConfig+0x278>)
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	091b      	lsrs	r3, r3, #4
 8003aa8:	220f      	movs	r2, #15
 8003aaa:	4013      	ands	r3, r2
 8003aac:	4a12      	ldr	r2, [pc, #72]	@ (8003af8 <HAL_RCC_ClockConfig+0x284>)
 8003aae:	5cd3      	ldrb	r3, [r2, r3]
 8003ab0:	000a      	movs	r2, r1
 8003ab2:	40da      	lsrs	r2, r3
 8003ab4:	4b11      	ldr	r3, [pc, #68]	@ (8003afc <HAL_RCC_ClockConfig+0x288>)
 8003ab6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ab8:	4b11      	ldr	r3, [pc, #68]	@ (8003b00 <HAL_RCC_ClockConfig+0x28c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	250b      	movs	r5, #11
 8003abe:	197c      	adds	r4, r7, r5
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	f7fe f9c3 	bl	8001e4c <HAL_InitTick>
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003aca:	197b      	adds	r3, r7, r5
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003ad2:	197b      	adds	r3, r7, r5
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	e000      	b.n	8003ada <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	0018      	movs	r0, r3
 8003adc:	46bd      	mov	sp, r7
 8003ade:	b004      	add	sp, #16
 8003ae0:	bdb0      	pop	{r4, r5, r7, pc}
 8003ae2:	46c0      	nop			@ (mov r8, r8)
 8003ae4:	40022000 	.word	0x40022000
 8003ae8:	00001388 	.word	0x00001388
 8003aec:	40021000 	.word	0x40021000
 8003af0:	fffff8ff 	.word	0xfffff8ff
 8003af4:	ffffc7ff 	.word	0xffffc7ff
 8003af8:	080087d8 	.word	0x080087d8
 8003afc:	20000640 	.word	0x20000640
 8003b00:	20000644 	.word	0x20000644

08003b04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b04:	b5b0      	push	{r4, r5, r7, lr}
 8003b06:	b08e      	sub	sp, #56	@ 0x38
 8003b08:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003b0a:	4b4c      	ldr	r3, [pc, #304]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x138>)
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b12:	230c      	movs	r3, #12
 8003b14:	4013      	ands	r3, r2
 8003b16:	2b0c      	cmp	r3, #12
 8003b18:	d014      	beq.n	8003b44 <HAL_RCC_GetSysClockFreq+0x40>
 8003b1a:	d900      	bls.n	8003b1e <HAL_RCC_GetSysClockFreq+0x1a>
 8003b1c:	e07b      	b.n	8003c16 <HAL_RCC_GetSysClockFreq+0x112>
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d002      	beq.n	8003b28 <HAL_RCC_GetSysClockFreq+0x24>
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d00b      	beq.n	8003b3e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b26:	e076      	b.n	8003c16 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003b28:	4b44      	ldr	r3, [pc, #272]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x138>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2210      	movs	r2, #16
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d002      	beq.n	8003b38 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003b32:	4b43      	ldr	r3, [pc, #268]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003b34:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003b36:	e07c      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003b38:	4b42      	ldr	r3, [pc, #264]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x140>)
 8003b3a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003b3c:	e079      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b3e:	4b42      	ldr	r3, [pc, #264]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x144>)
 8003b40:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003b42:	e076      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b46:	0c9a      	lsrs	r2, r3, #18
 8003b48:	230f      	movs	r3, #15
 8003b4a:	401a      	ands	r2, r3
 8003b4c:	4b3f      	ldr	r3, [pc, #252]	@ (8003c4c <HAL_RCC_GetSysClockFreq+0x148>)
 8003b4e:	5c9b      	ldrb	r3, [r3, r2]
 8003b50:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b54:	0d9a      	lsrs	r2, r3, #22
 8003b56:	2303      	movs	r3, #3
 8003b58:	4013      	ands	r3, r2
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b5e:	4b37      	ldr	r3, [pc, #220]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x138>)
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	2380      	movs	r3, #128	@ 0x80
 8003b64:	025b      	lsls	r3, r3, #9
 8003b66:	4013      	ands	r3, r2
 8003b68:	d01a      	beq.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b6c:	61bb      	str	r3, [r7, #24]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61fb      	str	r3, [r7, #28]
 8003b72:	4a35      	ldr	r2, [pc, #212]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x144>)
 8003b74:	2300      	movs	r3, #0
 8003b76:	69b8      	ldr	r0, [r7, #24]
 8003b78:	69f9      	ldr	r1, [r7, #28]
 8003b7a:	f7fc fb7b 	bl	8000274 <__aeabi_lmul>
 8003b7e:	0002      	movs	r2, r0
 8003b80:	000b      	movs	r3, r1
 8003b82:	0010      	movs	r0, r2
 8003b84:	0019      	movs	r1, r3
 8003b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	617b      	str	r3, [r7, #20]
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f7fc fb4f 	bl	8000234 <__aeabi_uldivmod>
 8003b96:	0002      	movs	r2, r0
 8003b98:	000b      	movs	r3, r1
 8003b9a:	0013      	movs	r3, r2
 8003b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b9e:	e037      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003ba0:	4b26      	ldr	r3, [pc, #152]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x138>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2210      	movs	r2, #16
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	d01a      	beq.n	8003be0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	4a23      	ldr	r2, [pc, #140]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	68b8      	ldr	r0, [r7, #8]
 8003bb8:	68f9      	ldr	r1, [r7, #12]
 8003bba:	f7fc fb5b 	bl	8000274 <__aeabi_lmul>
 8003bbe:	0002      	movs	r2, r0
 8003bc0:	000b      	movs	r3, r1
 8003bc2:	0010      	movs	r0, r2
 8003bc4:	0019      	movs	r1, r3
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc8:	603b      	str	r3, [r7, #0]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	607b      	str	r3, [r7, #4]
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f7fc fb2f 	bl	8000234 <__aeabi_uldivmod>
 8003bd6:	0002      	movs	r2, r0
 8003bd8:	000b      	movs	r3, r1
 8003bda:	0013      	movs	r3, r2
 8003bdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bde:	e017      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003be2:	0018      	movs	r0, r3
 8003be4:	2300      	movs	r3, #0
 8003be6:	0019      	movs	r1, r3
 8003be8:	4a16      	ldr	r2, [pc, #88]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x140>)
 8003bea:	2300      	movs	r3, #0
 8003bec:	f7fc fb42 	bl	8000274 <__aeabi_lmul>
 8003bf0:	0002      	movs	r2, r0
 8003bf2:	000b      	movs	r3, r1
 8003bf4:	0010      	movs	r0, r2
 8003bf6:	0019      	movs	r1, r3
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfa:	001c      	movs	r4, r3
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	001d      	movs	r5, r3
 8003c00:	0022      	movs	r2, r4
 8003c02:	002b      	movs	r3, r5
 8003c04:	f7fc fb16 	bl	8000234 <__aeabi_uldivmod>
 8003c08:	0002      	movs	r2, r0
 8003c0a:	000b      	movs	r3, r1
 8003c0c:	0013      	movs	r3, r2
 8003c0e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8003c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c12:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003c14:	e00d      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003c16:	4b09      	ldr	r3, [pc, #36]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x138>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	0b5b      	lsrs	r3, r3, #13
 8003c1c:	2207      	movs	r2, #7
 8003c1e:	4013      	ands	r3, r2
 8003c20:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	3301      	adds	r3, #1
 8003c26:	2280      	movs	r2, #128	@ 0x80
 8003c28:	0212      	lsls	r2, r2, #8
 8003c2a:	409a      	lsls	r2, r3
 8003c2c:	0013      	movs	r3, r2
 8003c2e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003c30:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8003c34:	0018      	movs	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	b00e      	add	sp, #56	@ 0x38
 8003c3a:	bdb0      	pop	{r4, r5, r7, pc}
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	003d0900 	.word	0x003d0900
 8003c44:	00f42400 	.word	0x00f42400
 8003c48:	007a1200 	.word	0x007a1200
 8003c4c:	080087f0 	.word	0x080087f0

08003c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c54:	4b02      	ldr	r3, [pc, #8]	@ (8003c60 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c56:	681b      	ldr	r3, [r3, #0]
}
 8003c58:	0018      	movs	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	46c0      	nop			@ (mov r8, r8)
 8003c60:	20000640 	.word	0x20000640

08003c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c68:	f7ff fff2 	bl	8003c50 <HAL_RCC_GetHCLKFreq>
 8003c6c:	0001      	movs	r1, r0
 8003c6e:	4b06      	ldr	r3, [pc, #24]	@ (8003c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	0a1b      	lsrs	r3, r3, #8
 8003c74:	2207      	movs	r2, #7
 8003c76:	4013      	ands	r3, r2
 8003c78:	4a04      	ldr	r2, [pc, #16]	@ (8003c8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c7a:	5cd3      	ldrb	r3, [r2, r3]
 8003c7c:	40d9      	lsrs	r1, r3
 8003c7e:	000b      	movs	r3, r1
}
 8003c80:	0018      	movs	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	46c0      	nop			@ (mov r8, r8)
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	080087e8 	.word	0x080087e8

08003c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c94:	f7ff ffdc 	bl	8003c50 <HAL_RCC_GetHCLKFreq>
 8003c98:	0001      	movs	r1, r0
 8003c9a:	4b06      	ldr	r3, [pc, #24]	@ (8003cb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	0adb      	lsrs	r3, r3, #11
 8003ca0:	2207      	movs	r2, #7
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	4a04      	ldr	r2, [pc, #16]	@ (8003cb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ca6:	5cd3      	ldrb	r3, [r2, r3]
 8003ca8:	40d9      	lsrs	r1, r3
 8003caa:	000b      	movs	r3, r1
}
 8003cac:	0018      	movs	r0, r3
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	46c0      	nop			@ (mov r8, r8)
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	080087e8 	.word	0x080087e8

08003cbc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003cc4:	2317      	movs	r3, #23
 8003cc6:	18fb      	adds	r3, r7, r3
 8003cc8:	2200      	movs	r2, #0
 8003cca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	d106      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	2380      	movs	r3, #128	@ 0x80
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	4013      	ands	r3, r2
 8003ce0:	d100      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003ce2:	e104      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ce4:	4bb1      	ldr	r3, [pc, #708]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ce6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ce8:	2380      	movs	r3, #128	@ 0x80
 8003cea:	055b      	lsls	r3, r3, #21
 8003cec:	4013      	ands	r3, r2
 8003cee:	d10a      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf0:	4bae      	ldr	r3, [pc, #696]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003cf2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cf4:	4bad      	ldr	r3, [pc, #692]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003cf6:	2180      	movs	r1, #128	@ 0x80
 8003cf8:	0549      	lsls	r1, r1, #21
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003cfe:	2317      	movs	r3, #23
 8003d00:	18fb      	adds	r3, r7, r3
 8003d02:	2201      	movs	r2, #1
 8003d04:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d06:	4baa      	ldr	r3, [pc, #680]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	2380      	movs	r3, #128	@ 0x80
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d11a      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d12:	4ba7      	ldr	r3, [pc, #668]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	4ba6      	ldr	r3, [pc, #664]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d18:	2180      	movs	r1, #128	@ 0x80
 8003d1a:	0049      	lsls	r1, r1, #1
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d20:	f7fe f8da 	bl	8001ed8 <HAL_GetTick>
 8003d24:	0003      	movs	r3, r0
 8003d26:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d28:	e008      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2a:	f7fe f8d5 	bl	8001ed8 <HAL_GetTick>
 8003d2e:	0002      	movs	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b64      	cmp	r3, #100	@ 0x64
 8003d36:	d901      	bls.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e133      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3c:	4b9c      	ldr	r3, [pc, #624]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	2380      	movs	r3, #128	@ 0x80
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	4013      	ands	r3, r2
 8003d46:	d0f0      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003d48:	4b98      	ldr	r3, [pc, #608]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	23c0      	movs	r3, #192	@ 0xc0
 8003d4e:	039b      	lsls	r3, r3, #14
 8003d50:	4013      	ands	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	23c0      	movs	r3, #192	@ 0xc0
 8003d5a:	039b      	lsls	r3, r3, #14
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d107      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	23c0      	movs	r3, #192	@ 0xc0
 8003d6a:	039b      	lsls	r3, r3, #14
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d013      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	23c0      	movs	r3, #192	@ 0xc0
 8003d7a:	029b      	lsls	r3, r3, #10
 8003d7c:	401a      	ands	r2, r3
 8003d7e:	23c0      	movs	r3, #192	@ 0xc0
 8003d80:	029b      	lsls	r3, r3, #10
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d10a      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003d86:	4b89      	ldr	r3, [pc, #548]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	2380      	movs	r3, #128	@ 0x80
 8003d8c:	029b      	lsls	r3, r3, #10
 8003d8e:	401a      	ands	r2, r3
 8003d90:	2380      	movs	r3, #128	@ 0x80
 8003d92:	029b      	lsls	r3, r3, #10
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d101      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e103      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003d9c:	4b83      	ldr	r3, [pc, #524]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003da0:	23c0      	movs	r3, #192	@ 0xc0
 8003da2:	029b      	lsls	r3, r3, #10
 8003da4:	4013      	ands	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d049      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	23c0      	movs	r3, #192	@ 0xc0
 8003db4:	029b      	lsls	r3, r3, #10
 8003db6:	4013      	ands	r3, r2
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d004      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d10d      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	23c0      	movs	r3, #192	@ 0xc0
 8003dce:	029b      	lsls	r3, r3, #10
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d034      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	2380      	movs	r3, #128	@ 0x80
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	4013      	ands	r3, r2
 8003de2:	d02e      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003de4:	4b71      	ldr	r3, [pc, #452]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003de8:	4a72      	ldr	r2, [pc, #456]	@ (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003dea:	4013      	ands	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dee:	4b6f      	ldr	r3, [pc, #444]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003df0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003df2:	4b6e      	ldr	r3, [pc, #440]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003df4:	2180      	movs	r1, #128	@ 0x80
 8003df6:	0309      	lsls	r1, r1, #12
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dfc:	4b6b      	ldr	r3, [pc, #428]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003dfe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e00:	4b6a      	ldr	r3, [pc, #424]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e02:	496d      	ldr	r1, [pc, #436]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003e04:	400a      	ands	r2, r1
 8003e06:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003e08:	4b68      	ldr	r3, [pc, #416]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	2380      	movs	r3, #128	@ 0x80
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	4013      	ands	r3, r2
 8003e16:	d014      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e18:	f7fe f85e 	bl	8001ed8 <HAL_GetTick>
 8003e1c:	0003      	movs	r3, r0
 8003e1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e20:	e009      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e22:	f7fe f859 	bl	8001ed8 <HAL_GetTick>
 8003e26:	0002      	movs	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	4a63      	ldr	r2, [pc, #396]	@ (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e0b6      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e36:	4b5d      	ldr	r3, [pc, #372]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e3a:	2380      	movs	r3, #128	@ 0x80
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4013      	ands	r3, r2
 8003e40:	d0ef      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	2380      	movs	r3, #128	@ 0x80
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	d01f      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	23c0      	movs	r3, #192	@ 0xc0
 8003e54:	029b      	lsls	r3, r3, #10
 8003e56:	401a      	ands	r2, r3
 8003e58:	23c0      	movs	r3, #192	@ 0xc0
 8003e5a:	029b      	lsls	r3, r3, #10
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d10c      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003e60:	4b52      	ldr	r3, [pc, #328]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a56      	ldr	r2, [pc, #344]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e66:	4013      	ands	r3, r2
 8003e68:	0019      	movs	r1, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	23c0      	movs	r3, #192	@ 0xc0
 8003e70:	039b      	lsls	r3, r3, #14
 8003e72:	401a      	ands	r2, r3
 8003e74:	4b4d      	ldr	r3, [pc, #308]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e76:	430a      	orrs	r2, r1
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	4b4c      	ldr	r3, [pc, #304]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e7c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	23c0      	movs	r3, #192	@ 0xc0
 8003e84:	029b      	lsls	r3, r3, #10
 8003e86:	401a      	ands	r2, r3
 8003e88:	4b48      	ldr	r3, [pc, #288]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2220      	movs	r2, #32
 8003e94:	4013      	ands	r3, r2
 8003e96:	d01f      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	23c0      	movs	r3, #192	@ 0xc0
 8003e9e:	029b      	lsls	r3, r3, #10
 8003ea0:	401a      	ands	r2, r3
 8003ea2:	23c0      	movs	r3, #192	@ 0xc0
 8003ea4:	029b      	lsls	r3, r3, #10
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d10c      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003eaa:	4b40      	ldr	r3, [pc, #256]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a44      	ldr	r2, [pc, #272]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	0019      	movs	r1, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	23c0      	movs	r3, #192	@ 0xc0
 8003eba:	039b      	lsls	r3, r3, #14
 8003ebc:	401a      	ands	r2, r3
 8003ebe:	4b3b      	ldr	r3, [pc, #236]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	4b39      	ldr	r3, [pc, #228]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ec6:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	23c0      	movs	r3, #192	@ 0xc0
 8003ece:	029b      	lsls	r3, r3, #10
 8003ed0:	401a      	ands	r2, r3
 8003ed2:	4b36      	ldr	r3, [pc, #216]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ed8:	2317      	movs	r3, #23
 8003eda:	18fb      	adds	r3, r7, r3
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d105      	bne.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ee2:	4b32      	ldr	r3, [pc, #200]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ee4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ee6:	4b31      	ldr	r3, [pc, #196]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ee8:	4936      	ldr	r1, [pc, #216]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003eea:	400a      	ands	r2, r1
 8003eec:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	d009      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ef8:	4b2c      	ldr	r3, [pc, #176]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003efc:	2203      	movs	r2, #3
 8003efe:	4393      	bics	r3, r2
 8003f00:	0019      	movs	r1, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	4b29      	ldr	r3, [pc, #164]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2202      	movs	r2, #2
 8003f12:	4013      	ands	r3, r2
 8003f14:	d009      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f16:	4b25      	ldr	r3, [pc, #148]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f1a:	220c      	movs	r2, #12
 8003f1c:	4393      	bics	r3, r2
 8003f1e:	0019      	movs	r1, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	4b21      	ldr	r3, [pc, #132]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f26:	430a      	orrs	r2, r1
 8003f28:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2204      	movs	r2, #4
 8003f30:	4013      	ands	r3, r2
 8003f32:	d009      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f34:	4b1d      	ldr	r3, [pc, #116]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f38:	4a23      	ldr	r2, [pc, #140]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	0019      	movs	r1, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695a      	ldr	r2, [r3, #20]
 8003f42:	4b1a      	ldr	r3, [pc, #104]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f44:	430a      	orrs	r2, r1
 8003f46:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2208      	movs	r2, #8
 8003f4e:	4013      	ands	r3, r2
 8003f50:	d009      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f52:	4b16      	ldr	r3, [pc, #88]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f56:	4a1d      	ldr	r2, [pc, #116]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	0019      	movs	r1, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	699a      	ldr	r2, [r3, #24]
 8003f60:	4b12      	ldr	r3, [pc, #72]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f62:	430a      	orrs	r2, r1
 8003f64:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2240      	movs	r2, #64	@ 0x40
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	d009      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f70:	4b0e      	ldr	r3, [pc, #56]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f74:	4a16      	ldr	r2, [pc, #88]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	0019      	movs	r1, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1a      	ldr	r2, [r3, #32]
 8003f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f80:	430a      	orrs	r2, r1
 8003f82:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2280      	movs	r2, #128	@ 0x80
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d009      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003f8e:	4b07      	ldr	r3, [pc, #28]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f92:	4a10      	ldr	r2, [pc, #64]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	0019      	movs	r1, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	69da      	ldr	r2, [r3, #28]
 8003f9c:	4b03      	ldr	r3, [pc, #12]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b006      	add	sp, #24
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	40007000 	.word	0x40007000
 8003fb4:	fffcffff 	.word	0xfffcffff
 8003fb8:	fff7ffff 	.word	0xfff7ffff
 8003fbc:	00001388 	.word	0x00001388
 8003fc0:	ffcfffff 	.word	0xffcfffff
 8003fc4:	efffffff 	.word	0xefffffff
 8003fc8:	fffff3ff 	.word	0xfffff3ff
 8003fcc:	ffffcfff 	.word	0xffffcfff
 8003fd0:	fbffffff 	.word	0xfbffffff
 8003fd4:	fff3ffff 	.word	0xfff3ffff

08003fd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e083      	b.n	80040f2 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d109      	bne.n	8004006 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	2382      	movs	r3, #130	@ 0x82
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d009      	beq.n	8004012 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	61da      	str	r2, [r3, #28]
 8004004:	e005      	b.n	8004012 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2251      	movs	r2, #81	@ 0x51
 800401c:	5c9b      	ldrb	r3, [r3, r2]
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d107      	bne.n	8004034 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2250      	movs	r2, #80	@ 0x50
 8004028:	2100      	movs	r1, #0
 800402a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	0018      	movs	r0, r3
 8004030:	f7fd fd66 	bl	8001b00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2251      	movs	r2, #81	@ 0x51
 8004038:	2102      	movs	r1, #2
 800403a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2140      	movs	r1, #64	@ 0x40
 8004048:	438a      	bics	r2, r1
 800404a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	2382      	movs	r3, #130	@ 0x82
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	401a      	ands	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6899      	ldr	r1, [r3, #8]
 800405a:	2384      	movs	r3, #132	@ 0x84
 800405c:	021b      	lsls	r3, r3, #8
 800405e:	400b      	ands	r3, r1
 8004060:	431a      	orrs	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68d9      	ldr	r1, [r3, #12]
 8004066:	2380      	movs	r3, #128	@ 0x80
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	400b      	ands	r3, r1
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	2102      	movs	r1, #2
 8004074:	400b      	ands	r3, r1
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	2101      	movs	r1, #1
 800407e:	400b      	ands	r3, r1
 8004080:	431a      	orrs	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6999      	ldr	r1, [r3, #24]
 8004086:	2380      	movs	r3, #128	@ 0x80
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	400b      	ands	r3, r1
 800408c:	431a      	orrs	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	2138      	movs	r1, #56	@ 0x38
 8004094:	400b      	ands	r3, r1
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	2180      	movs	r1, #128	@ 0x80
 800409e:	400b      	ands	r3, r1
 80040a0:	431a      	orrs	r2, r3
 80040a2:	0011      	movs	r1, r2
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040a8:	2380      	movs	r3, #128	@ 0x80
 80040aa:	019b      	lsls	r3, r3, #6
 80040ac:	401a      	ands	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	0c1b      	lsrs	r3, r3, #16
 80040bc:	2204      	movs	r2, #4
 80040be:	4013      	ands	r3, r2
 80040c0:	0019      	movs	r1, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c6:	2210      	movs	r2, #16
 80040c8:	401a      	ands	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	69da      	ldr	r2, [r3, #28]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4907      	ldr	r1, [pc, #28]	@ (80040fc <HAL_SPI_Init+0x124>)
 80040de:	400a      	ands	r2, r1
 80040e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2251      	movs	r2, #81	@ 0x51
 80040ec:	2101      	movs	r1, #1
 80040ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	0018      	movs	r0, r3
 80040f4:	46bd      	mov	sp, r7
 80040f6:	b002      	add	sp, #8
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	46c0      	nop			@ (mov r8, r8)
 80040fc:	fffff7ff 	.word	0xfffff7ff

08004100 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e01b      	b.n	800414a <HAL_SPI_DeInit+0x4a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2251      	movs	r2, #81	@ 0x51
 8004116:	2102      	movs	r1, #2
 8004118:	5499      	strb	r1, [r3, r2]

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2140      	movs	r1, #64	@ 0x40
 8004126:	438a      	bics	r2, r1
 8004128:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	0018      	movs	r0, r3
 800412e:	f7fd fd2b 	bl	8001b88 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2251      	movs	r2, #81	@ 0x51
 800413c:	2100      	movs	r1, #0
 800413e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2250      	movs	r2, #80	@ 0x50
 8004144:	2100      	movs	r1, #0
 8004146:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	0018      	movs	r0, r3
 800414c:	46bd      	mov	sp, r7
 800414e:	b002      	add	sp, #8
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b088      	sub	sp, #32
 8004156:	af00      	add	r7, sp, #0
 8004158:	60f8      	str	r0, [r7, #12]
 800415a:	60b9      	str	r1, [r7, #8]
 800415c:	603b      	str	r3, [r7, #0]
 800415e:	1dbb      	adds	r3, r7, #6
 8004160:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004162:	231f      	movs	r3, #31
 8004164:	18fb      	adds	r3, r7, r3
 8004166:	2200      	movs	r2, #0
 8004168:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2250      	movs	r2, #80	@ 0x50
 800416e:	5c9b      	ldrb	r3, [r3, r2]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d101      	bne.n	8004178 <HAL_SPI_Transmit+0x26>
 8004174:	2302      	movs	r3, #2
 8004176:	e145      	b.n	8004404 <HAL_SPI_Transmit+0x2b2>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2250      	movs	r2, #80	@ 0x50
 800417c:	2101      	movs	r1, #1
 800417e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004180:	f7fd feaa 	bl	8001ed8 <HAL_GetTick>
 8004184:	0003      	movs	r3, r0
 8004186:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004188:	2316      	movs	r3, #22
 800418a:	18fb      	adds	r3, r7, r3
 800418c:	1dba      	adds	r2, r7, #6
 800418e:	8812      	ldrh	r2, [r2, #0]
 8004190:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2251      	movs	r2, #81	@ 0x51
 8004196:	5c9b      	ldrb	r3, [r3, r2]
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b01      	cmp	r3, #1
 800419c:	d004      	beq.n	80041a8 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800419e:	231f      	movs	r3, #31
 80041a0:	18fb      	adds	r3, r7, r3
 80041a2:	2202      	movs	r2, #2
 80041a4:	701a      	strb	r2, [r3, #0]
    goto error;
 80041a6:	e126      	b.n	80043f6 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_SPI_Transmit+0x64>
 80041ae:	1dbb      	adds	r3, r7, #6
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d104      	bne.n	80041c0 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80041b6:	231f      	movs	r3, #31
 80041b8:	18fb      	adds	r3, r7, r3
 80041ba:	2201      	movs	r2, #1
 80041bc:	701a      	strb	r2, [r3, #0]
    goto error;
 80041be:	e11a      	b.n	80043f6 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2251      	movs	r2, #81	@ 0x51
 80041c4:	2103      	movs	r1, #3
 80041c6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	1dba      	adds	r2, r7, #6
 80041d8:	8812      	ldrh	r2, [r2, #0]
 80041da:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	1dba      	adds	r2, r7, #6
 80041e0:	8812      	ldrh	r2, [r2, #0]
 80041e2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	2380      	movs	r3, #128	@ 0x80
 8004208:	021b      	lsls	r3, r3, #8
 800420a:	429a      	cmp	r2, r3
 800420c:	d110      	bne.n	8004230 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2140      	movs	r1, #64	@ 0x40
 800421a:	438a      	bics	r2, r1
 800421c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2180      	movs	r1, #128	@ 0x80
 800422a:	01c9      	lsls	r1, r1, #7
 800422c:	430a      	orrs	r2, r1
 800422e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2240      	movs	r2, #64	@ 0x40
 8004238:	4013      	ands	r3, r2
 800423a:	2b40      	cmp	r3, #64	@ 0x40
 800423c:	d007      	beq.n	800424e <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2140      	movs	r1, #64	@ 0x40
 800424a:	430a      	orrs	r2, r1
 800424c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	2380      	movs	r3, #128	@ 0x80
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	429a      	cmp	r2, r3
 8004258:	d152      	bne.n	8004300 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d004      	beq.n	800426c <HAL_SPI_Transmit+0x11a>
 8004262:	2316      	movs	r3, #22
 8004264:	18fb      	adds	r3, r7, r3
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d143      	bne.n	80042f4 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004270:	881a      	ldrh	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427c:	1c9a      	adds	r2, r3, #2
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004290:	e030      	b.n	80042f4 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2202      	movs	r2, #2
 800429a:	4013      	ands	r3, r2
 800429c:	2b02      	cmp	r3, #2
 800429e:	d112      	bne.n	80042c6 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a4:	881a      	ldrh	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b0:	1c9a      	adds	r2, r3, #2
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80042c4:	e016      	b.n	80042f4 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042c6:	f7fd fe07 	bl	8001ed8 <HAL_GetTick>
 80042ca:	0002      	movs	r2, r0
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d802      	bhi.n	80042dc <HAL_SPI_Transmit+0x18a>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	3301      	adds	r3, #1
 80042da:	d102      	bne.n	80042e2 <HAL_SPI_Transmit+0x190>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d108      	bne.n	80042f4 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 80042e2:	231f      	movs	r3, #31
 80042e4:	18fb      	adds	r3, r7, r3
 80042e6:	2203      	movs	r2, #3
 80042e8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2251      	movs	r2, #81	@ 0x51
 80042ee:	2101      	movs	r1, #1
 80042f0:	5499      	strb	r1, [r3, r2]
          goto error;
 80042f2:	e080      	b.n	80043f6 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1c9      	bne.n	8004292 <HAL_SPI_Transmit+0x140>
 80042fe:	e053      	b.n	80043a8 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d004      	beq.n	8004312 <HAL_SPI_Transmit+0x1c0>
 8004308:	2316      	movs	r3, #22
 800430a:	18fb      	adds	r3, r7, r3
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d145      	bne.n	800439e <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	330c      	adds	r3, #12
 800431c:	7812      	ldrb	r2, [r2, #0]
 800431e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800432e:	b29b      	uxth	r3, r3
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004338:	e031      	b.n	800439e <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2202      	movs	r2, #2
 8004342:	4013      	ands	r3, r2
 8004344:	2b02      	cmp	r3, #2
 8004346:	d113      	bne.n	8004370 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	330c      	adds	r3, #12
 8004352:	7812      	ldrb	r2, [r2, #0]
 8004354:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004364:	b29b      	uxth	r3, r3
 8004366:	3b01      	subs	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800436e:	e016      	b.n	800439e <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004370:	f7fd fdb2 	bl	8001ed8 <HAL_GetTick>
 8004374:	0002      	movs	r2, r0
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	429a      	cmp	r2, r3
 800437e:	d802      	bhi.n	8004386 <HAL_SPI_Transmit+0x234>
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	3301      	adds	r3, #1
 8004384:	d102      	bne.n	800438c <HAL_SPI_Transmit+0x23a>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d108      	bne.n	800439e <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 800438c:	231f      	movs	r3, #31
 800438e:	18fb      	adds	r3, r7, r3
 8004390:	2203      	movs	r2, #3
 8004392:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2251      	movs	r2, #81	@ 0x51
 8004398:	2101      	movs	r1, #1
 800439a:	5499      	strb	r1, [r3, r2]
          goto error;
 800439c:	e02b      	b.n	80043f6 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1c8      	bne.n	800433a <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	6839      	ldr	r1, [r7, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	0018      	movs	r0, r3
 80043b0:	f000 f8c6 	bl	8004540 <SPI_EndRxTxTransaction>
 80043b4:	1e03      	subs	r3, r0, #0
 80043b6:	d002      	beq.n	80043be <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10a      	bne.n	80043dc <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043c6:	2300      	movs	r3, #0
 80043c8:	613b      	str	r3, [r7, #16]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	613b      	str	r3, [r7, #16]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	613b      	str	r3, [r7, #16]
 80043da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d004      	beq.n	80043ee <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 80043e4:	231f      	movs	r3, #31
 80043e6:	18fb      	adds	r3, r7, r3
 80043e8:	2201      	movs	r2, #1
 80043ea:	701a      	strb	r2, [r3, #0]
 80043ec:	e003      	b.n	80043f6 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2251      	movs	r2, #81	@ 0x51
 80043f2:	2101      	movs	r1, #1
 80043f4:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2250      	movs	r2, #80	@ 0x50
 80043fa:	2100      	movs	r1, #0
 80043fc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80043fe:	231f      	movs	r3, #31
 8004400:	18fb      	adds	r3, r7, r3
 8004402:	781b      	ldrb	r3, [r3, #0]
}
 8004404:	0018      	movs	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	b008      	add	sp, #32
 800440a:	bd80      	pop	{r7, pc}

0800440c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2251      	movs	r2, #81	@ 0x51
 8004418:	5c9b      	ldrb	r3, [r3, r2]
 800441a:	b2db      	uxtb	r3, r3
}
 800441c:	0018      	movs	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	b002      	add	sp, #8
 8004422:	bd80      	pop	{r7, pc}

08004424 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b088      	sub	sp, #32
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	603b      	str	r3, [r7, #0]
 8004430:	1dfb      	adds	r3, r7, #7
 8004432:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004434:	f7fd fd50 	bl	8001ed8 <HAL_GetTick>
 8004438:	0002      	movs	r2, r0
 800443a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800443c:	1a9b      	subs	r3, r3, r2
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	18d3      	adds	r3, r2, r3
 8004442:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004444:	f7fd fd48 	bl	8001ed8 <HAL_GetTick>
 8004448:	0003      	movs	r3, r0
 800444a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800444c:	4b3a      	ldr	r3, [pc, #232]	@ (8004538 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	015b      	lsls	r3, r3, #5
 8004452:	0d1b      	lsrs	r3, r3, #20
 8004454:	69fa      	ldr	r2, [r7, #28]
 8004456:	4353      	muls	r3, r2
 8004458:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800445a:	e058      	b.n	800450e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	3301      	adds	r3, #1
 8004460:	d055      	beq.n	800450e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004462:	f7fd fd39 	bl	8001ed8 <HAL_GetTick>
 8004466:	0002      	movs	r2, r0
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	69fa      	ldr	r2, [r7, #28]
 800446e:	429a      	cmp	r2, r3
 8004470:	d902      	bls.n	8004478 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d142      	bne.n	80044fe <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	21e0      	movs	r1, #224	@ 0xe0
 8004484:	438a      	bics	r2, r1
 8004486:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	2382      	movs	r3, #130	@ 0x82
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	429a      	cmp	r2, r3
 8004492:	d113      	bne.n	80044bc <SPI_WaitFlagStateUntilTimeout+0x98>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	2380      	movs	r3, #128	@ 0x80
 800449a:	021b      	lsls	r3, r3, #8
 800449c:	429a      	cmp	r2, r3
 800449e:	d005      	beq.n	80044ac <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	2380      	movs	r3, #128	@ 0x80
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d107      	bne.n	80044bc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2140      	movs	r1, #64	@ 0x40
 80044b8:	438a      	bics	r2, r1
 80044ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044c0:	2380      	movs	r3, #128	@ 0x80
 80044c2:	019b      	lsls	r3, r3, #6
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d110      	bne.n	80044ea <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	491a      	ldr	r1, [pc, #104]	@ (800453c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80044d4:	400a      	ands	r2, r1
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2180      	movs	r1, #128	@ 0x80
 80044e4:	0189      	lsls	r1, r1, #6
 80044e6:	430a      	orrs	r2, r1
 80044e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2251      	movs	r2, #81	@ 0x51
 80044ee:	2101      	movs	r1, #1
 80044f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2250      	movs	r2, #80	@ 0x50
 80044f6:	2100      	movs	r1, #0
 80044f8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e017      	b.n	800452e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	3b01      	subs	r3, #1
 800450c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	4013      	ands	r3, r2
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	425a      	negs	r2, r3
 800451e:	4153      	adcs	r3, r2
 8004520:	b2db      	uxtb	r3, r3
 8004522:	001a      	movs	r2, r3
 8004524:	1dfb      	adds	r3, r7, #7
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	429a      	cmp	r2, r3
 800452a:	d197      	bne.n	800445c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	0018      	movs	r0, r3
 8004530:	46bd      	mov	sp, r7
 8004532:	b008      	add	sp, #32
 8004534:	bd80      	pop	{r7, pc}
 8004536:	46c0      	nop			@ (mov r8, r8)
 8004538:	20000640 	.word	0x20000640
 800453c:	ffffdfff 	.word	0xffffdfff

08004540 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	af02      	add	r7, sp, #8
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800454c:	4b1d      	ldr	r3, [pc, #116]	@ (80045c4 <SPI_EndRxTxTransaction+0x84>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	491d      	ldr	r1, [pc, #116]	@ (80045c8 <SPI_EndRxTxTransaction+0x88>)
 8004552:	0018      	movs	r0, r3
 8004554:	f7fb fde2 	bl	800011c <__udivsi3>
 8004558:	0003      	movs	r3, r0
 800455a:	001a      	movs	r2, r3
 800455c:	0013      	movs	r3, r2
 800455e:	015b      	lsls	r3, r3, #5
 8004560:	1a9b      	subs	r3, r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	189b      	adds	r3, r3, r2
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	2382      	movs	r3, #130	@ 0x82
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	429a      	cmp	r2, r3
 8004574:	d112      	bne.n	800459c <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	0013      	movs	r3, r2
 8004580:	2200      	movs	r2, #0
 8004582:	2180      	movs	r1, #128	@ 0x80
 8004584:	f7ff ff4e 	bl	8004424 <SPI_WaitFlagStateUntilTimeout>
 8004588:	1e03      	subs	r3, r0, #0
 800458a:	d016      	beq.n	80045ba <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004590:	2220      	movs	r2, #32
 8004592:	431a      	orrs	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e00f      	b.n	80045bc <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00a      	beq.n	80045b8 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	3b01      	subs	r3, #1
 80045a6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2280      	movs	r2, #128	@ 0x80
 80045b0:	4013      	ands	r3, r2
 80045b2:	2b80      	cmp	r3, #128	@ 0x80
 80045b4:	d0f2      	beq.n	800459c <SPI_EndRxTxTransaction+0x5c>
 80045b6:	e000      	b.n	80045ba <SPI_EndRxTxTransaction+0x7a>
        break;
 80045b8:	46c0      	nop			@ (mov r8, r8)
  }

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	0018      	movs	r0, r3
 80045be:	46bd      	mov	sp, r7
 80045c0:	b006      	add	sp, #24
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	20000640 	.word	0x20000640
 80045c8:	016e3600 	.word	0x016e3600

080045cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e044      	b.n	8004668 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d107      	bne.n	80045f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2278      	movs	r2, #120	@ 0x78
 80045ea:	2100      	movs	r1, #0
 80045ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	0018      	movs	r0, r3
 80045f2:	f7fd fae9 	bl	8001bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2224      	movs	r2, #36	@ 0x24
 80045fa:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2101      	movs	r1, #1
 8004608:	438a      	bics	r2, r1
 800460a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	0018      	movs	r0, r3
 8004610:	f000 fc2c 	bl	8004e6c <UART_SetConfig>
 8004614:	0003      	movs	r3, r0
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e024      	b.n	8004668 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	0018      	movs	r0, r3
 800462a:	f000 fea3 	bl	8005374 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	490d      	ldr	r1, [pc, #52]	@ (8004670 <HAL_UART_Init+0xa4>)
 800463a:	400a      	ands	r2, r1
 800463c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	212a      	movs	r1, #42	@ 0x2a
 800464a:	438a      	bics	r2, r1
 800464c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2101      	movs	r1, #1
 800465a:	430a      	orrs	r2, r1
 800465c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	0018      	movs	r0, r3
 8004662:	f000 ff3b 	bl	80054dc <UART_CheckIdleState>
 8004666:	0003      	movs	r3, r0
}
 8004668:	0018      	movs	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	b002      	add	sp, #8
 800466e:	bd80      	pop	{r7, pc}
 8004670:	ffffb7ff 	.word	0xffffb7ff

08004674 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08a      	sub	sp, #40	@ 0x28
 8004678:	af02      	add	r7, sp, #8
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	603b      	str	r3, [r7, #0]
 8004680:	1dbb      	adds	r3, r7, #6
 8004682:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004688:	2b20      	cmp	r3, #32
 800468a:	d000      	beq.n	800468e <HAL_UART_Transmit+0x1a>
 800468c:	e08c      	b.n	80047a8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <HAL_UART_Transmit+0x28>
 8004694:	1dbb      	adds	r3, r7, #6
 8004696:	881b      	ldrh	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e084      	b.n	80047aa <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	2380      	movs	r3, #128	@ 0x80
 80046a6:	015b      	lsls	r3, r3, #5
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d109      	bne.n	80046c0 <HAL_UART_Transmit+0x4c>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d105      	bne.n	80046c0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2201      	movs	r2, #1
 80046b8:	4013      	ands	r3, r2
 80046ba:	d001      	beq.n	80046c0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e074      	b.n	80047aa <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2284      	movs	r2, #132	@ 0x84
 80046c4:	2100      	movs	r1, #0
 80046c6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2221      	movs	r2, #33	@ 0x21
 80046cc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046ce:	f7fd fc03 	bl	8001ed8 <HAL_GetTick>
 80046d2:	0003      	movs	r3, r0
 80046d4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	1dba      	adds	r2, r7, #6
 80046da:	2150      	movs	r1, #80	@ 0x50
 80046dc:	8812      	ldrh	r2, [r2, #0]
 80046de:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	1dba      	adds	r2, r7, #6
 80046e4:	2152      	movs	r1, #82	@ 0x52
 80046e6:	8812      	ldrh	r2, [r2, #0]
 80046e8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	689a      	ldr	r2, [r3, #8]
 80046ee:	2380      	movs	r3, #128	@ 0x80
 80046f0:	015b      	lsls	r3, r3, #5
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d108      	bne.n	8004708 <HAL_UART_Transmit+0x94>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d104      	bne.n	8004708 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80046fe:	2300      	movs	r3, #0
 8004700:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	61bb      	str	r3, [r7, #24]
 8004706:	e003      	b.n	8004710 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800470c:	2300      	movs	r3, #0
 800470e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004710:	e02f      	b.n	8004772 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	0013      	movs	r3, r2
 800471c:	2200      	movs	r2, #0
 800471e:	2180      	movs	r1, #128	@ 0x80
 8004720:	f000 ff84 	bl	800562c <UART_WaitOnFlagUntilTimeout>
 8004724:	1e03      	subs	r3, r0, #0
 8004726:	d004      	beq.n	8004732 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2220      	movs	r2, #32
 800472c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e03b      	b.n	80047aa <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10b      	bne.n	8004750 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	001a      	movs	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	05d2      	lsls	r2, r2, #23
 8004744:	0dd2      	lsrs	r2, r2, #23
 8004746:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	3302      	adds	r3, #2
 800474c:	61bb      	str	r3, [r7, #24]
 800474e:	e007      	b.n	8004760 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	781a      	ldrb	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	3301      	adds	r3, #1
 800475e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2252      	movs	r2, #82	@ 0x52
 8004764:	5a9b      	ldrh	r3, [r3, r2]
 8004766:	b29b      	uxth	r3, r3
 8004768:	3b01      	subs	r3, #1
 800476a:	b299      	uxth	r1, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2252      	movs	r2, #82	@ 0x52
 8004770:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2252      	movs	r2, #82	@ 0x52
 8004776:	5a9b      	ldrh	r3, [r3, r2]
 8004778:	b29b      	uxth	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1c9      	bne.n	8004712 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	0013      	movs	r3, r2
 8004788:	2200      	movs	r2, #0
 800478a:	2140      	movs	r1, #64	@ 0x40
 800478c:	f000 ff4e 	bl	800562c <UART_WaitOnFlagUntilTimeout>
 8004790:	1e03      	subs	r3, r0, #0
 8004792:	d004      	beq.n	800479e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2220      	movs	r2, #32
 8004798:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e005      	b.n	80047aa <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2220      	movs	r2, #32
 80047a2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	e000      	b.n	80047aa <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80047a8:	2302      	movs	r3, #2
  }
}
 80047aa:	0018      	movs	r0, r3
 80047ac:	46bd      	mov	sp, r7
 80047ae:	b008      	add	sp, #32
 80047b0:	bd80      	pop	{r7, pc}
	...

080047b4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b088      	sub	sp, #32
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	1dbb      	adds	r3, r7, #6
 80047c0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2280      	movs	r2, #128	@ 0x80
 80047c6:	589b      	ldr	r3, [r3, r2]
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d14a      	bne.n	8004862 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_UART_Receive_IT+0x26>
 80047d2:	1dbb      	adds	r3, r7, #6
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e042      	b.n	8004864 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	2380      	movs	r3, #128	@ 0x80
 80047e4:	015b      	lsls	r3, r3, #5
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d109      	bne.n	80047fe <HAL_UART_Receive_IT+0x4a>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d105      	bne.n	80047fe <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2201      	movs	r2, #1
 80047f6:	4013      	ands	r3, r2
 80047f8:	d001      	beq.n	80047fe <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e032      	b.n	8004864 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a18      	ldr	r2, [pc, #96]	@ (800486c <HAL_UART_Receive_IT+0xb8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d020      	beq.n	8004850 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	2380      	movs	r3, #128	@ 0x80
 8004816:	041b      	lsls	r3, r3, #16
 8004818:	4013      	ands	r3, r2
 800481a:	d019      	beq.n	8004850 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800481c:	f3ef 8310 	mrs	r3, PRIMASK
 8004820:	613b      	str	r3, [r7, #16]
  return(result);
 8004822:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004824:	61fb      	str	r3, [r7, #28]
 8004826:	2301      	movs	r3, #1
 8004828:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f383 8810 	msr	PRIMASK, r3
}
 8004830:	46c0      	nop			@ (mov r8, r8)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2180      	movs	r1, #128	@ 0x80
 800483e:	04c9      	lsls	r1, r1, #19
 8004840:	430a      	orrs	r2, r1
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	f383 8810 	msr	PRIMASK, r3
}
 800484e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004850:	1dbb      	adds	r3, r7, #6
 8004852:	881a      	ldrh	r2, [r3, #0]
 8004854:	68b9      	ldr	r1, [r7, #8]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	0018      	movs	r0, r3
 800485a:	f000 ff51 	bl	8005700 <UART_Start_Receive_IT>
 800485e:	0003      	movs	r3, r0
 8004860:	e000      	b.n	8004864 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8004862:	2302      	movs	r3, #2
  }
}
 8004864:	0018      	movs	r0, r3
 8004866:	46bd      	mov	sp, r7
 8004868:	b008      	add	sp, #32
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40004800 	.word	0x40004800

08004870 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004870:	b590      	push	{r4, r7, lr}
 8004872:	b0ab      	sub	sp, #172	@ 0xac
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	22a4      	movs	r2, #164	@ 0xa4
 8004880:	18b9      	adds	r1, r7, r2
 8004882:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	20a0      	movs	r0, #160	@ 0xa0
 800488c:	1839      	adds	r1, r7, r0
 800488e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	219c      	movs	r1, #156	@ 0x9c
 8004898:	1879      	adds	r1, r7, r1
 800489a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800489c:	0011      	movs	r1, r2
 800489e:	18bb      	adds	r3, r7, r2
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a99      	ldr	r2, [pc, #612]	@ (8004b08 <HAL_UART_IRQHandler+0x298>)
 80048a4:	4013      	ands	r3, r2
 80048a6:	2298      	movs	r2, #152	@ 0x98
 80048a8:	18bc      	adds	r4, r7, r2
 80048aa:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80048ac:	18bb      	adds	r3, r7, r2
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d114      	bne.n	80048de <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80048b4:	187b      	adds	r3, r7, r1
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2220      	movs	r2, #32
 80048ba:	4013      	ands	r3, r2
 80048bc:	d00f      	beq.n	80048de <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048be:	183b      	adds	r3, r7, r0
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2220      	movs	r2, #32
 80048c4:	4013      	ands	r3, r2
 80048c6:	d00a      	beq.n	80048de <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d100      	bne.n	80048d2 <HAL_UART_IRQHandler+0x62>
 80048d0:	e2a0      	b.n	8004e14 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	0010      	movs	r0, r2
 80048da:	4798      	blx	r3
      }
      return;
 80048dc:	e29a      	b.n	8004e14 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80048de:	2398      	movs	r3, #152	@ 0x98
 80048e0:	18fb      	adds	r3, r7, r3
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d100      	bne.n	80048ea <HAL_UART_IRQHandler+0x7a>
 80048e8:	e114      	b.n	8004b14 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80048ea:	239c      	movs	r3, #156	@ 0x9c
 80048ec:	18fb      	adds	r3, r7, r3
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2201      	movs	r2, #1
 80048f2:	4013      	ands	r3, r2
 80048f4:	d106      	bne.n	8004904 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80048f6:	23a0      	movs	r3, #160	@ 0xa0
 80048f8:	18fb      	adds	r3, r7, r3
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a83      	ldr	r2, [pc, #524]	@ (8004b0c <HAL_UART_IRQHandler+0x29c>)
 80048fe:	4013      	ands	r3, r2
 8004900:	d100      	bne.n	8004904 <HAL_UART_IRQHandler+0x94>
 8004902:	e107      	b.n	8004b14 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004904:	23a4      	movs	r3, #164	@ 0xa4
 8004906:	18fb      	adds	r3, r7, r3
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2201      	movs	r2, #1
 800490c:	4013      	ands	r3, r2
 800490e:	d012      	beq.n	8004936 <HAL_UART_IRQHandler+0xc6>
 8004910:	23a0      	movs	r3, #160	@ 0xa0
 8004912:	18fb      	adds	r3, r7, r3
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	2380      	movs	r3, #128	@ 0x80
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	4013      	ands	r3, r2
 800491c:	d00b      	beq.n	8004936 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2201      	movs	r2, #1
 8004924:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2284      	movs	r2, #132	@ 0x84
 800492a:	589b      	ldr	r3, [r3, r2]
 800492c:	2201      	movs	r2, #1
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2184      	movs	r1, #132	@ 0x84
 8004934:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004936:	23a4      	movs	r3, #164	@ 0xa4
 8004938:	18fb      	adds	r3, r7, r3
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2202      	movs	r2, #2
 800493e:	4013      	ands	r3, r2
 8004940:	d011      	beq.n	8004966 <HAL_UART_IRQHandler+0xf6>
 8004942:	239c      	movs	r3, #156	@ 0x9c
 8004944:	18fb      	adds	r3, r7, r3
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2201      	movs	r2, #1
 800494a:	4013      	ands	r3, r2
 800494c:	d00b      	beq.n	8004966 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2202      	movs	r2, #2
 8004954:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2284      	movs	r2, #132	@ 0x84
 800495a:	589b      	ldr	r3, [r3, r2]
 800495c:	2204      	movs	r2, #4
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2184      	movs	r1, #132	@ 0x84
 8004964:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004966:	23a4      	movs	r3, #164	@ 0xa4
 8004968:	18fb      	adds	r3, r7, r3
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2204      	movs	r2, #4
 800496e:	4013      	ands	r3, r2
 8004970:	d011      	beq.n	8004996 <HAL_UART_IRQHandler+0x126>
 8004972:	239c      	movs	r3, #156	@ 0x9c
 8004974:	18fb      	adds	r3, r7, r3
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2201      	movs	r2, #1
 800497a:	4013      	ands	r3, r2
 800497c:	d00b      	beq.n	8004996 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2204      	movs	r2, #4
 8004984:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2284      	movs	r2, #132	@ 0x84
 800498a:	589b      	ldr	r3, [r3, r2]
 800498c:	2202      	movs	r2, #2
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2184      	movs	r1, #132	@ 0x84
 8004994:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004996:	23a4      	movs	r3, #164	@ 0xa4
 8004998:	18fb      	adds	r3, r7, r3
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2208      	movs	r2, #8
 800499e:	4013      	ands	r3, r2
 80049a0:	d017      	beq.n	80049d2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80049a2:	23a0      	movs	r3, #160	@ 0xa0
 80049a4:	18fb      	adds	r3, r7, r3
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2220      	movs	r2, #32
 80049aa:	4013      	ands	r3, r2
 80049ac:	d105      	bne.n	80049ba <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80049ae:	239c      	movs	r3, #156	@ 0x9c
 80049b0:	18fb      	adds	r3, r7, r3
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2201      	movs	r2, #1
 80049b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80049b8:	d00b      	beq.n	80049d2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2208      	movs	r2, #8
 80049c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2284      	movs	r2, #132	@ 0x84
 80049c6:	589b      	ldr	r3, [r3, r2]
 80049c8:	2208      	movs	r2, #8
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2184      	movs	r1, #132	@ 0x84
 80049d0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80049d2:	23a4      	movs	r3, #164	@ 0xa4
 80049d4:	18fb      	adds	r3, r7, r3
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	2380      	movs	r3, #128	@ 0x80
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	4013      	ands	r3, r2
 80049de:	d013      	beq.n	8004a08 <HAL_UART_IRQHandler+0x198>
 80049e0:	23a0      	movs	r3, #160	@ 0xa0
 80049e2:	18fb      	adds	r3, r7, r3
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	2380      	movs	r3, #128	@ 0x80
 80049e8:	04db      	lsls	r3, r3, #19
 80049ea:	4013      	ands	r3, r2
 80049ec:	d00c      	beq.n	8004a08 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2280      	movs	r2, #128	@ 0x80
 80049f4:	0112      	lsls	r2, r2, #4
 80049f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2284      	movs	r2, #132	@ 0x84
 80049fc:	589b      	ldr	r3, [r3, r2]
 80049fe:	2220      	movs	r2, #32
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2184      	movs	r1, #132	@ 0x84
 8004a06:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2284      	movs	r2, #132	@ 0x84
 8004a0c:	589b      	ldr	r3, [r3, r2]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d100      	bne.n	8004a14 <HAL_UART_IRQHandler+0x1a4>
 8004a12:	e201      	b.n	8004e18 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a14:	23a4      	movs	r3, #164	@ 0xa4
 8004a16:	18fb      	adds	r3, r7, r3
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	d00e      	beq.n	8004a3e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a20:	23a0      	movs	r3, #160	@ 0xa0
 8004a22:	18fb      	adds	r3, r7, r3
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2220      	movs	r2, #32
 8004a28:	4013      	ands	r3, r2
 8004a2a:	d008      	beq.n	8004a3e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d004      	beq.n	8004a3e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	0010      	movs	r0, r2
 8004a3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2284      	movs	r2, #132	@ 0x84
 8004a42:	589b      	ldr	r3, [r3, r2]
 8004a44:	2194      	movs	r1, #148	@ 0x94
 8004a46:	187a      	adds	r2, r7, r1
 8004a48:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	2240      	movs	r2, #64	@ 0x40
 8004a52:	4013      	ands	r3, r2
 8004a54:	2b40      	cmp	r3, #64	@ 0x40
 8004a56:	d004      	beq.n	8004a62 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a58:	187b      	adds	r3, r7, r1
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2228      	movs	r2, #40	@ 0x28
 8004a5e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a60:	d047      	beq.n	8004af2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	0018      	movs	r0, r3
 8004a66:	f000 ff15 	bl	8005894 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	2240      	movs	r2, #64	@ 0x40
 8004a72:	4013      	ands	r3, r2
 8004a74:	2b40      	cmp	r3, #64	@ 0x40
 8004a76:	d137      	bne.n	8004ae8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a78:	f3ef 8310 	mrs	r3, PRIMASK
 8004a7c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8004a7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a80:	2090      	movs	r0, #144	@ 0x90
 8004a82:	183a      	adds	r2, r7, r0
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	2301      	movs	r3, #1
 8004a88:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a8c:	f383 8810 	msr	PRIMASK, r3
}
 8004a90:	46c0      	nop			@ (mov r8, r8)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2140      	movs	r1, #64	@ 0x40
 8004a9e:	438a      	bics	r2, r1
 8004aa0:	609a      	str	r2, [r3, #8]
 8004aa2:	183b      	adds	r3, r7, r0
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004aaa:	f383 8810 	msr	PRIMASK, r3
}
 8004aae:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d012      	beq.n	8004ade <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004abc:	4a14      	ldr	r2, [pc, #80]	@ (8004b10 <HAL_UART_IRQHandler+0x2a0>)
 8004abe:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	f7fd fb53 	bl	8002170 <HAL_DMA_Abort_IT>
 8004aca:	1e03      	subs	r3, r0, #0
 8004acc:	d01a      	beq.n	8004b04 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ad2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ad8:	0018      	movs	r0, r3
 8004ada:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004adc:	e012      	b.n	8004b04 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	f000 f9af 	bl	8004e44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae6:	e00d      	b.n	8004b04 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	0018      	movs	r0, r3
 8004aec:	f000 f9aa 	bl	8004e44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af0:	e008      	b.n	8004b04 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	0018      	movs	r0, r3
 8004af6:	f000 f9a5 	bl	8004e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2284      	movs	r2, #132	@ 0x84
 8004afe:	2100      	movs	r1, #0
 8004b00:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004b02:	e189      	b.n	8004e18 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b04:	46c0      	nop			@ (mov r8, r8)
    return;
 8004b06:	e187      	b.n	8004e18 <HAL_UART_IRQHandler+0x5a8>
 8004b08:	0000080f 	.word	0x0000080f
 8004b0c:	04000120 	.word	0x04000120
 8004b10:	0800595d 	.word	0x0800595d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d000      	beq.n	8004b1e <HAL_UART_IRQHandler+0x2ae>
 8004b1c:	e13b      	b.n	8004d96 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b1e:	23a4      	movs	r3, #164	@ 0xa4
 8004b20:	18fb      	adds	r3, r7, r3
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2210      	movs	r2, #16
 8004b26:	4013      	ands	r3, r2
 8004b28:	d100      	bne.n	8004b2c <HAL_UART_IRQHandler+0x2bc>
 8004b2a:	e134      	b.n	8004d96 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b2c:	23a0      	movs	r3, #160	@ 0xa0
 8004b2e:	18fb      	adds	r3, r7, r3
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2210      	movs	r2, #16
 8004b34:	4013      	ands	r3, r2
 8004b36:	d100      	bne.n	8004b3a <HAL_UART_IRQHandler+0x2ca>
 8004b38:	e12d      	b.n	8004d96 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2210      	movs	r2, #16
 8004b40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	2240      	movs	r2, #64	@ 0x40
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	2b40      	cmp	r3, #64	@ 0x40
 8004b4e:	d000      	beq.n	8004b52 <HAL_UART_IRQHandler+0x2e2>
 8004b50:	e0a1      	b.n	8004c96 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	217e      	movs	r1, #126	@ 0x7e
 8004b5c:	187b      	adds	r3, r7, r1
 8004b5e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004b60:	187b      	adds	r3, r7, r1
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d100      	bne.n	8004b6a <HAL_UART_IRQHandler+0x2fa>
 8004b68:	e158      	b.n	8004e1c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2258      	movs	r2, #88	@ 0x58
 8004b6e:	5a9b      	ldrh	r3, [r3, r2]
 8004b70:	187a      	adds	r2, r7, r1
 8004b72:	8812      	ldrh	r2, [r2, #0]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d300      	bcc.n	8004b7a <HAL_UART_IRQHandler+0x30a>
 8004b78:	e150      	b.n	8004e1c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	187a      	adds	r2, r7, r1
 8004b7e:	215a      	movs	r1, #90	@ 0x5a
 8004b80:	8812      	ldrh	r2, [r2, #0]
 8004b82:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	4013      	ands	r3, r2
 8004b90:	d16f      	bne.n	8004c72 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b92:	f3ef 8310 	mrs	r3, PRIMASK
 8004b96:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b9a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ba2:	f383 8810 	msr	PRIMASK, r3
}
 8004ba6:	46c0      	nop			@ (mov r8, r8)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	499e      	ldr	r1, [pc, #632]	@ (8004e2c <HAL_UART_IRQHandler+0x5bc>)
 8004bb4:	400a      	ands	r2, r1
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bba:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bbe:	f383 8810 	msr	PRIMASK, r3
}
 8004bc2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bc4:	f3ef 8310 	mrs	r3, PRIMASK
 8004bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bcc:	677b      	str	r3, [r7, #116]	@ 0x74
 8004bce:	2301      	movs	r3, #1
 8004bd0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bd4:	f383 8810 	msr	PRIMASK, r3
}
 8004bd8:	46c0      	nop			@ (mov r8, r8)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2101      	movs	r1, #1
 8004be6:	438a      	bics	r2, r1
 8004be8:	609a      	str	r2, [r3, #8]
 8004bea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bec:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bf0:	f383 8810 	msr	PRIMASK, r3
}
 8004bf4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bf6:	f3ef 8310 	mrs	r3, PRIMASK
 8004bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004bfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bfe:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c00:	2301      	movs	r3, #1
 8004c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c06:	f383 8810 	msr	PRIMASK, r3
}
 8004c0a:	46c0      	nop			@ (mov r8, r8)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689a      	ldr	r2, [r3, #8]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2140      	movs	r1, #64	@ 0x40
 8004c18:	438a      	bics	r2, r1
 8004c1a:	609a      	str	r2, [r3, #8]
 8004c1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c1e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c22:	f383 8810 	msr	PRIMASK, r3
}
 8004c26:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2280      	movs	r2, #128	@ 0x80
 8004c2c:	2120      	movs	r1, #32
 8004c2e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c36:	f3ef 8310 	mrs	r3, PRIMASK
 8004c3a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004c3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c40:	2301      	movs	r3, #1
 8004c42:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c46:	f383 8810 	msr	PRIMASK, r3
}
 8004c4a:	46c0      	nop			@ (mov r8, r8)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2110      	movs	r1, #16
 8004c58:	438a      	bics	r2, r1
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c62:	f383 8810 	msr	PRIMASK, r3
}
 8004c66:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	f7fd fa3f 	bl	80020f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2202      	movs	r2, #2
 8004c76:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2258      	movs	r2, #88	@ 0x58
 8004c7c:	5a9a      	ldrh	r2, [r3, r2]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	215a      	movs	r1, #90	@ 0x5a
 8004c82:	5a5b      	ldrh	r3, [r3, r1]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	0011      	movs	r1, r2
 8004c8e:	0018      	movs	r0, r3
 8004c90:	f000 f8e0 	bl	8004e54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c94:	e0c2      	b.n	8004e1c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2258      	movs	r2, #88	@ 0x58
 8004c9a:	5a99      	ldrh	r1, [r3, r2]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	225a      	movs	r2, #90	@ 0x5a
 8004ca0:	5a9b      	ldrh	r3, [r3, r2]
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	208e      	movs	r0, #142	@ 0x8e
 8004ca6:	183b      	adds	r3, r7, r0
 8004ca8:	1a8a      	subs	r2, r1, r2
 8004caa:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	225a      	movs	r2, #90	@ 0x5a
 8004cb0:	5a9b      	ldrh	r3, [r3, r2]
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d100      	bne.n	8004cba <HAL_UART_IRQHandler+0x44a>
 8004cb8:	e0b2      	b.n	8004e20 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8004cba:	183b      	adds	r3, r7, r0
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d100      	bne.n	8004cc4 <HAL_UART_IRQHandler+0x454>
 8004cc2:	e0ad      	b.n	8004e20 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8004cc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cca:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ccc:	2488      	movs	r4, #136	@ 0x88
 8004cce:	193a      	adds	r2, r7, r4
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f383 8810 	msr	PRIMASK, r3
}
 8004cdc:	46c0      	nop			@ (mov r8, r8)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4951      	ldr	r1, [pc, #324]	@ (8004e30 <HAL_UART_IRQHandler+0x5c0>)
 8004cea:	400a      	ands	r2, r1
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	193b      	adds	r3, r7, r4
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f383 8810 	msr	PRIMASK, r3
}
 8004cfa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8004d00:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d02:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d04:	2484      	movs	r4, #132	@ 0x84
 8004d06:	193a      	adds	r2, r7, r4
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	f383 8810 	msr	PRIMASK, r3
}
 8004d14:	46c0      	nop			@ (mov r8, r8)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2101      	movs	r1, #1
 8004d22:	438a      	bics	r2, r1
 8004d24:	609a      	str	r2, [r3, #8]
 8004d26:	193b      	adds	r3, r7, r4
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	f383 8810 	msr	PRIMASK, r3
}
 8004d32:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2280      	movs	r2, #128	@ 0x80
 8004d38:	2120      	movs	r1, #32
 8004d3a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d48:	f3ef 8310 	mrs	r3, PRIMASK
 8004d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d50:	2480      	movs	r4, #128	@ 0x80
 8004d52:	193a      	adds	r2, r7, r4
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	2301      	movs	r3, #1
 8004d58:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5c:	f383 8810 	msr	PRIMASK, r3
}
 8004d60:	46c0      	nop			@ (mov r8, r8)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2110      	movs	r1, #16
 8004d6e:	438a      	bics	r2, r1
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	193b      	adds	r3, r7, r4
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d7a:	f383 8810 	msr	PRIMASK, r3
}
 8004d7e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d86:	183b      	adds	r3, r7, r0
 8004d88:	881a      	ldrh	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	0011      	movs	r1, r2
 8004d8e:	0018      	movs	r0, r3
 8004d90:	f000 f860 	bl	8004e54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d94:	e044      	b.n	8004e20 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d96:	23a4      	movs	r3, #164	@ 0xa4
 8004d98:	18fb      	adds	r3, r7, r3
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	2380      	movs	r3, #128	@ 0x80
 8004d9e:	035b      	lsls	r3, r3, #13
 8004da0:	4013      	ands	r3, r2
 8004da2:	d010      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x556>
 8004da4:	239c      	movs	r3, #156	@ 0x9c
 8004da6:	18fb      	adds	r3, r7, r3
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	2380      	movs	r3, #128	@ 0x80
 8004dac:	03db      	lsls	r3, r3, #15
 8004dae:	4013      	ands	r3, r2
 8004db0:	d009      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2280      	movs	r2, #128	@ 0x80
 8004db8:	0352      	lsls	r2, r2, #13
 8004dba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	0018      	movs	r0, r3
 8004dc0:	f000 ffd2 	bl	8005d68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004dc4:	e02f      	b.n	8004e26 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004dc6:	23a4      	movs	r3, #164	@ 0xa4
 8004dc8:	18fb      	adds	r3, r7, r3
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2280      	movs	r2, #128	@ 0x80
 8004dce:	4013      	ands	r3, r2
 8004dd0:	d00f      	beq.n	8004df2 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004dd2:	23a0      	movs	r3, #160	@ 0xa0
 8004dd4:	18fb      	adds	r3, r7, r3
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2280      	movs	r2, #128	@ 0x80
 8004dda:	4013      	ands	r3, r2
 8004ddc:	d009      	beq.n	8004df2 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d01e      	beq.n	8004e24 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	0010      	movs	r0, r2
 8004dee:	4798      	blx	r3
    }
    return;
 8004df0:	e018      	b.n	8004e24 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004df2:	23a4      	movs	r3, #164	@ 0xa4
 8004df4:	18fb      	adds	r3, r7, r3
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2240      	movs	r2, #64	@ 0x40
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	d013      	beq.n	8004e26 <HAL_UART_IRQHandler+0x5b6>
 8004dfe:	23a0      	movs	r3, #160	@ 0xa0
 8004e00:	18fb      	adds	r3, r7, r3
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2240      	movs	r2, #64	@ 0x40
 8004e06:	4013      	ands	r3, r2
 8004e08:	d00d      	beq.n	8004e26 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f000 fdbc 	bl	800598a <UART_EndTransmit_IT>
    return;
 8004e12:	e008      	b.n	8004e26 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004e14:	46c0      	nop			@ (mov r8, r8)
 8004e16:	e006      	b.n	8004e26 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004e18:	46c0      	nop			@ (mov r8, r8)
 8004e1a:	e004      	b.n	8004e26 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004e1c:	46c0      	nop			@ (mov r8, r8)
 8004e1e:	e002      	b.n	8004e26 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004e20:	46c0      	nop			@ (mov r8, r8)
 8004e22:	e000      	b.n	8004e26 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004e24:	46c0      	nop			@ (mov r8, r8)
  }

}
 8004e26:	46bd      	mov	sp, r7
 8004e28:	b02b      	add	sp, #172	@ 0xac
 8004e2a:	bd90      	pop	{r4, r7, pc}
 8004e2c:	fffffeff 	.word	0xfffffeff
 8004e30:	fffffedf 	.word	0xfffffedf

08004e34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e3c:	46c0      	nop			@ (mov r8, r8)
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	b002      	add	sp, #8
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e4c:	46c0      	nop			@ (mov r8, r8)
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	b002      	add	sp, #8
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	000a      	movs	r2, r1
 8004e5e:	1cbb      	adds	r3, r7, #2
 8004e60:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e62:	46c0      	nop			@ (mov r8, r8)
 8004e64:	46bd      	mov	sp, r7
 8004e66:	b002      	add	sp, #8
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e6c:	b5b0      	push	{r4, r5, r7, lr}
 8004e6e:	b08e      	sub	sp, #56	@ 0x38
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e74:	231a      	movs	r3, #26
 8004e76:	2218      	movs	r2, #24
 8004e78:	189b      	adds	r3, r3, r2
 8004e7a:	19db      	adds	r3, r3, r7
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4ac6      	ldr	r2, [pc, #792]	@ (80051b8 <UART_SetConfig+0x34c>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	0019      	movs	r1, r3
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	4ac1      	ldr	r2, [pc, #772]	@ (80051bc <UART_SetConfig+0x350>)
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	0019      	movs	r1, r3
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4abb      	ldr	r2, [pc, #748]	@ (80051c0 <UART_SetConfig+0x354>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d004      	beq.n	8004ee0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004edc:	4313      	orrs	r3, r2
 8004ede:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	4ab7      	ldr	r2, [pc, #732]	@ (80051c4 <UART_SetConfig+0x358>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	0019      	movs	r1, r3
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4ab3      	ldr	r2, [pc, #716]	@ (80051c8 <UART_SetConfig+0x35c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d131      	bne.n	8004f64 <UART_SetConfig+0xf8>
 8004f00:	4bb2      	ldr	r3, [pc, #712]	@ (80051cc <UART_SetConfig+0x360>)
 8004f02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f04:	2203      	movs	r2, #3
 8004f06:	4013      	ands	r3, r2
 8004f08:	2b03      	cmp	r3, #3
 8004f0a:	d01d      	beq.n	8004f48 <UART_SetConfig+0xdc>
 8004f0c:	d823      	bhi.n	8004f56 <UART_SetConfig+0xea>
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d00c      	beq.n	8004f2c <UART_SetConfig+0xc0>
 8004f12:	d820      	bhi.n	8004f56 <UART_SetConfig+0xea>
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d002      	beq.n	8004f1e <UART_SetConfig+0xb2>
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d00e      	beq.n	8004f3a <UART_SetConfig+0xce>
 8004f1c:	e01b      	b.n	8004f56 <UART_SetConfig+0xea>
 8004f1e:	231b      	movs	r3, #27
 8004f20:	2218      	movs	r2, #24
 8004f22:	189b      	adds	r3, r3, r2
 8004f24:	19db      	adds	r3, r3, r7
 8004f26:	2201      	movs	r2, #1
 8004f28:	701a      	strb	r2, [r3, #0]
 8004f2a:	e09c      	b.n	8005066 <UART_SetConfig+0x1fa>
 8004f2c:	231b      	movs	r3, #27
 8004f2e:	2218      	movs	r2, #24
 8004f30:	189b      	adds	r3, r3, r2
 8004f32:	19db      	adds	r3, r3, r7
 8004f34:	2202      	movs	r2, #2
 8004f36:	701a      	strb	r2, [r3, #0]
 8004f38:	e095      	b.n	8005066 <UART_SetConfig+0x1fa>
 8004f3a:	231b      	movs	r3, #27
 8004f3c:	2218      	movs	r2, #24
 8004f3e:	189b      	adds	r3, r3, r2
 8004f40:	19db      	adds	r3, r3, r7
 8004f42:	2204      	movs	r2, #4
 8004f44:	701a      	strb	r2, [r3, #0]
 8004f46:	e08e      	b.n	8005066 <UART_SetConfig+0x1fa>
 8004f48:	231b      	movs	r3, #27
 8004f4a:	2218      	movs	r2, #24
 8004f4c:	189b      	adds	r3, r3, r2
 8004f4e:	19db      	adds	r3, r3, r7
 8004f50:	2208      	movs	r2, #8
 8004f52:	701a      	strb	r2, [r3, #0]
 8004f54:	e087      	b.n	8005066 <UART_SetConfig+0x1fa>
 8004f56:	231b      	movs	r3, #27
 8004f58:	2218      	movs	r2, #24
 8004f5a:	189b      	adds	r3, r3, r2
 8004f5c:	19db      	adds	r3, r3, r7
 8004f5e:	2210      	movs	r2, #16
 8004f60:	701a      	strb	r2, [r3, #0]
 8004f62:	e080      	b.n	8005066 <UART_SetConfig+0x1fa>
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a99      	ldr	r2, [pc, #612]	@ (80051d0 <UART_SetConfig+0x364>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d131      	bne.n	8004fd2 <UART_SetConfig+0x166>
 8004f6e:	4b97      	ldr	r3, [pc, #604]	@ (80051cc <UART_SetConfig+0x360>)
 8004f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f72:	220c      	movs	r2, #12
 8004f74:	4013      	ands	r3, r2
 8004f76:	2b0c      	cmp	r3, #12
 8004f78:	d01d      	beq.n	8004fb6 <UART_SetConfig+0x14a>
 8004f7a:	d823      	bhi.n	8004fc4 <UART_SetConfig+0x158>
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d00c      	beq.n	8004f9a <UART_SetConfig+0x12e>
 8004f80:	d820      	bhi.n	8004fc4 <UART_SetConfig+0x158>
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d002      	beq.n	8004f8c <UART_SetConfig+0x120>
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d00e      	beq.n	8004fa8 <UART_SetConfig+0x13c>
 8004f8a:	e01b      	b.n	8004fc4 <UART_SetConfig+0x158>
 8004f8c:	231b      	movs	r3, #27
 8004f8e:	2218      	movs	r2, #24
 8004f90:	189b      	adds	r3, r3, r2
 8004f92:	19db      	adds	r3, r3, r7
 8004f94:	2200      	movs	r2, #0
 8004f96:	701a      	strb	r2, [r3, #0]
 8004f98:	e065      	b.n	8005066 <UART_SetConfig+0x1fa>
 8004f9a:	231b      	movs	r3, #27
 8004f9c:	2218      	movs	r2, #24
 8004f9e:	189b      	adds	r3, r3, r2
 8004fa0:	19db      	adds	r3, r3, r7
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	701a      	strb	r2, [r3, #0]
 8004fa6:	e05e      	b.n	8005066 <UART_SetConfig+0x1fa>
 8004fa8:	231b      	movs	r3, #27
 8004faa:	2218      	movs	r2, #24
 8004fac:	189b      	adds	r3, r3, r2
 8004fae:	19db      	adds	r3, r3, r7
 8004fb0:	2204      	movs	r2, #4
 8004fb2:	701a      	strb	r2, [r3, #0]
 8004fb4:	e057      	b.n	8005066 <UART_SetConfig+0x1fa>
 8004fb6:	231b      	movs	r3, #27
 8004fb8:	2218      	movs	r2, #24
 8004fba:	189b      	adds	r3, r3, r2
 8004fbc:	19db      	adds	r3, r3, r7
 8004fbe:	2208      	movs	r2, #8
 8004fc0:	701a      	strb	r2, [r3, #0]
 8004fc2:	e050      	b.n	8005066 <UART_SetConfig+0x1fa>
 8004fc4:	231b      	movs	r3, #27
 8004fc6:	2218      	movs	r2, #24
 8004fc8:	189b      	adds	r3, r3, r2
 8004fca:	19db      	adds	r3, r3, r7
 8004fcc:	2210      	movs	r2, #16
 8004fce:	701a      	strb	r2, [r3, #0]
 8004fd0:	e049      	b.n	8005066 <UART_SetConfig+0x1fa>
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a7a      	ldr	r2, [pc, #488]	@ (80051c0 <UART_SetConfig+0x354>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d13e      	bne.n	800505a <UART_SetConfig+0x1ee>
 8004fdc:	4b7b      	ldr	r3, [pc, #492]	@ (80051cc <UART_SetConfig+0x360>)
 8004fde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004fe0:	23c0      	movs	r3, #192	@ 0xc0
 8004fe2:	011b      	lsls	r3, r3, #4
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	22c0      	movs	r2, #192	@ 0xc0
 8004fe8:	0112      	lsls	r2, r2, #4
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d027      	beq.n	800503e <UART_SetConfig+0x1d2>
 8004fee:	22c0      	movs	r2, #192	@ 0xc0
 8004ff0:	0112      	lsls	r2, r2, #4
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d82a      	bhi.n	800504c <UART_SetConfig+0x1e0>
 8004ff6:	2280      	movs	r2, #128	@ 0x80
 8004ff8:	0112      	lsls	r2, r2, #4
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d011      	beq.n	8005022 <UART_SetConfig+0x1b6>
 8004ffe:	2280      	movs	r2, #128	@ 0x80
 8005000:	0112      	lsls	r2, r2, #4
 8005002:	4293      	cmp	r3, r2
 8005004:	d822      	bhi.n	800504c <UART_SetConfig+0x1e0>
 8005006:	2b00      	cmp	r3, #0
 8005008:	d004      	beq.n	8005014 <UART_SetConfig+0x1a8>
 800500a:	2280      	movs	r2, #128	@ 0x80
 800500c:	00d2      	lsls	r2, r2, #3
 800500e:	4293      	cmp	r3, r2
 8005010:	d00e      	beq.n	8005030 <UART_SetConfig+0x1c4>
 8005012:	e01b      	b.n	800504c <UART_SetConfig+0x1e0>
 8005014:	231b      	movs	r3, #27
 8005016:	2218      	movs	r2, #24
 8005018:	189b      	adds	r3, r3, r2
 800501a:	19db      	adds	r3, r3, r7
 800501c:	2200      	movs	r2, #0
 800501e:	701a      	strb	r2, [r3, #0]
 8005020:	e021      	b.n	8005066 <UART_SetConfig+0x1fa>
 8005022:	231b      	movs	r3, #27
 8005024:	2218      	movs	r2, #24
 8005026:	189b      	adds	r3, r3, r2
 8005028:	19db      	adds	r3, r3, r7
 800502a:	2202      	movs	r2, #2
 800502c:	701a      	strb	r2, [r3, #0]
 800502e:	e01a      	b.n	8005066 <UART_SetConfig+0x1fa>
 8005030:	231b      	movs	r3, #27
 8005032:	2218      	movs	r2, #24
 8005034:	189b      	adds	r3, r3, r2
 8005036:	19db      	adds	r3, r3, r7
 8005038:	2204      	movs	r2, #4
 800503a:	701a      	strb	r2, [r3, #0]
 800503c:	e013      	b.n	8005066 <UART_SetConfig+0x1fa>
 800503e:	231b      	movs	r3, #27
 8005040:	2218      	movs	r2, #24
 8005042:	189b      	adds	r3, r3, r2
 8005044:	19db      	adds	r3, r3, r7
 8005046:	2208      	movs	r2, #8
 8005048:	701a      	strb	r2, [r3, #0]
 800504a:	e00c      	b.n	8005066 <UART_SetConfig+0x1fa>
 800504c:	231b      	movs	r3, #27
 800504e:	2218      	movs	r2, #24
 8005050:	189b      	adds	r3, r3, r2
 8005052:	19db      	adds	r3, r3, r7
 8005054:	2210      	movs	r2, #16
 8005056:	701a      	strb	r2, [r3, #0]
 8005058:	e005      	b.n	8005066 <UART_SetConfig+0x1fa>
 800505a:	231b      	movs	r3, #27
 800505c:	2218      	movs	r2, #24
 800505e:	189b      	adds	r3, r3, r2
 8005060:	19db      	adds	r3, r3, r7
 8005062:	2210      	movs	r2, #16
 8005064:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a55      	ldr	r2, [pc, #340]	@ (80051c0 <UART_SetConfig+0x354>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d000      	beq.n	8005072 <UART_SetConfig+0x206>
 8005070:	e084      	b.n	800517c <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005072:	231b      	movs	r3, #27
 8005074:	2218      	movs	r2, #24
 8005076:	189b      	adds	r3, r3, r2
 8005078:	19db      	adds	r3, r3, r7
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	2b08      	cmp	r3, #8
 800507e:	d01d      	beq.n	80050bc <UART_SetConfig+0x250>
 8005080:	dc20      	bgt.n	80050c4 <UART_SetConfig+0x258>
 8005082:	2b04      	cmp	r3, #4
 8005084:	d015      	beq.n	80050b2 <UART_SetConfig+0x246>
 8005086:	dc1d      	bgt.n	80050c4 <UART_SetConfig+0x258>
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <UART_SetConfig+0x226>
 800508c:	2b02      	cmp	r3, #2
 800508e:	d005      	beq.n	800509c <UART_SetConfig+0x230>
 8005090:	e018      	b.n	80050c4 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005092:	f7fe fde7 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 8005096:	0003      	movs	r3, r0
 8005098:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800509a:	e01c      	b.n	80050d6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800509c:	4b4b      	ldr	r3, [pc, #300]	@ (80051cc <UART_SetConfig+0x360>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2210      	movs	r2, #16
 80050a2:	4013      	ands	r3, r2
 80050a4:	d002      	beq.n	80050ac <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80050a6:	4b4b      	ldr	r3, [pc, #300]	@ (80051d4 <UART_SetConfig+0x368>)
 80050a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050aa:	e014      	b.n	80050d6 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80050ac:	4b4a      	ldr	r3, [pc, #296]	@ (80051d8 <UART_SetConfig+0x36c>)
 80050ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80050b0:	e011      	b.n	80050d6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050b2:	f7fe fd27 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 80050b6:	0003      	movs	r3, r0
 80050b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80050ba:	e00c      	b.n	80050d6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050bc:	2380      	movs	r3, #128	@ 0x80
 80050be:	021b      	lsls	r3, r3, #8
 80050c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80050c2:	e008      	b.n	80050d6 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80050c8:	231a      	movs	r3, #26
 80050ca:	2218      	movs	r2, #24
 80050cc:	189b      	adds	r3, r3, r2
 80050ce:	19db      	adds	r3, r3, r7
 80050d0:	2201      	movs	r2, #1
 80050d2:	701a      	strb	r2, [r3, #0]
        break;
 80050d4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d100      	bne.n	80050de <UART_SetConfig+0x272>
 80050dc:	e132      	b.n	8005344 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	0013      	movs	r3, r2
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	189b      	adds	r3, r3, r2
 80050e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d305      	bcc.n	80050fa <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d906      	bls.n	8005108 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80050fa:	231a      	movs	r3, #26
 80050fc:	2218      	movs	r2, #24
 80050fe:	189b      	adds	r3, r3, r2
 8005100:	19db      	adds	r3, r3, r7
 8005102:	2201      	movs	r2, #1
 8005104:	701a      	strb	r2, [r3, #0]
 8005106:	e11d      	b.n	8005344 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800510a:	613b      	str	r3, [r7, #16]
 800510c:	2300      	movs	r3, #0
 800510e:	617b      	str	r3, [r7, #20]
 8005110:	6939      	ldr	r1, [r7, #16]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	000b      	movs	r3, r1
 8005116:	0e1b      	lsrs	r3, r3, #24
 8005118:	0010      	movs	r0, r2
 800511a:	0205      	lsls	r5, r0, #8
 800511c:	431d      	orrs	r5, r3
 800511e:	000b      	movs	r3, r1
 8005120:	021c      	lsls	r4, r3, #8
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	085b      	lsrs	r3, r3, #1
 8005128:	60bb      	str	r3, [r7, #8]
 800512a:	2300      	movs	r3, #0
 800512c:	60fb      	str	r3, [r7, #12]
 800512e:	68b8      	ldr	r0, [r7, #8]
 8005130:	68f9      	ldr	r1, [r7, #12]
 8005132:	1900      	adds	r0, r0, r4
 8005134:	4169      	adcs	r1, r5
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	603b      	str	r3, [r7, #0]
 800513c:	2300      	movs	r3, #0
 800513e:	607b      	str	r3, [r7, #4]
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f7fb f876 	bl	8000234 <__aeabi_uldivmod>
 8005148:	0002      	movs	r2, r0
 800514a:	000b      	movs	r3, r1
 800514c:	0013      	movs	r3, r2
 800514e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005150:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005152:	23c0      	movs	r3, #192	@ 0xc0
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	429a      	cmp	r2, r3
 8005158:	d309      	bcc.n	800516e <UART_SetConfig+0x302>
 800515a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800515c:	2380      	movs	r3, #128	@ 0x80
 800515e:	035b      	lsls	r3, r3, #13
 8005160:	429a      	cmp	r2, r3
 8005162:	d204      	bcs.n	800516e <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800516a:	60da      	str	r2, [r3, #12]
 800516c:	e0ea      	b.n	8005344 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 800516e:	231a      	movs	r3, #26
 8005170:	2218      	movs	r2, #24
 8005172:	189b      	adds	r3, r3, r2
 8005174:	19db      	adds	r3, r3, r7
 8005176:	2201      	movs	r2, #1
 8005178:	701a      	strb	r2, [r3, #0]
 800517a:	e0e3      	b.n	8005344 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	69da      	ldr	r2, [r3, #28]
 8005180:	2380      	movs	r3, #128	@ 0x80
 8005182:	021b      	lsls	r3, r3, #8
 8005184:	429a      	cmp	r2, r3
 8005186:	d000      	beq.n	800518a <UART_SetConfig+0x31e>
 8005188:	e085      	b.n	8005296 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 800518a:	231b      	movs	r3, #27
 800518c:	2218      	movs	r2, #24
 800518e:	189b      	adds	r3, r3, r2
 8005190:	19db      	adds	r3, r3, r7
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	2b08      	cmp	r3, #8
 8005196:	d837      	bhi.n	8005208 <UART_SetConfig+0x39c>
 8005198:	009a      	lsls	r2, r3, #2
 800519a:	4b10      	ldr	r3, [pc, #64]	@ (80051dc <UART_SetConfig+0x370>)
 800519c:	18d3      	adds	r3, r2, r3
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051a2:	f7fe fd5f 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 80051a6:	0003      	movs	r3, r0
 80051a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80051aa:	e036      	b.n	800521a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051ac:	f7fe fd70 	bl	8003c90 <HAL_RCC_GetPCLK2Freq>
 80051b0:	0003      	movs	r3, r0
 80051b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80051b4:	e031      	b.n	800521a <UART_SetConfig+0x3ae>
 80051b6:	46c0      	nop			@ (mov r8, r8)
 80051b8:	efff69f3 	.word	0xefff69f3
 80051bc:	ffffcfff 	.word	0xffffcfff
 80051c0:	40004800 	.word	0x40004800
 80051c4:	fffff4ff 	.word	0xfffff4ff
 80051c8:	40013800 	.word	0x40013800
 80051cc:	40021000 	.word	0x40021000
 80051d0:	40004400 	.word	0x40004400
 80051d4:	003d0900 	.word	0x003d0900
 80051d8:	00f42400 	.word	0x00f42400
 80051dc:	080087fc 	.word	0x080087fc
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051e0:	4b60      	ldr	r3, [pc, #384]	@ (8005364 <UART_SetConfig+0x4f8>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2210      	movs	r2, #16
 80051e6:	4013      	ands	r3, r2
 80051e8:	d002      	beq.n	80051f0 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80051ea:	4b5f      	ldr	r3, [pc, #380]	@ (8005368 <UART_SetConfig+0x4fc>)
 80051ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80051ee:	e014      	b.n	800521a <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80051f0:	4b5e      	ldr	r3, [pc, #376]	@ (800536c <UART_SetConfig+0x500>)
 80051f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80051f4:	e011      	b.n	800521a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051f6:	f7fe fc85 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 80051fa:	0003      	movs	r3, r0
 80051fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80051fe:	e00c      	b.n	800521a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005200:	2380      	movs	r3, #128	@ 0x80
 8005202:	021b      	lsls	r3, r3, #8
 8005204:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005206:	e008      	b.n	800521a <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800520c:	231a      	movs	r3, #26
 800520e:	2218      	movs	r2, #24
 8005210:	189b      	adds	r3, r3, r2
 8005212:	19db      	adds	r3, r3, r7
 8005214:	2201      	movs	r2, #1
 8005216:	701a      	strb	r2, [r3, #0]
        break;
 8005218:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800521a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800521c:	2b00      	cmp	r3, #0
 800521e:	d100      	bne.n	8005222 <UART_SetConfig+0x3b6>
 8005220:	e090      	b.n	8005344 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005224:	005a      	lsls	r2, r3, #1
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	085b      	lsrs	r3, r3, #1
 800522c:	18d2      	adds	r2, r2, r3
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	0019      	movs	r1, r3
 8005234:	0010      	movs	r0, r2
 8005236:	f7fa ff71 	bl	800011c <__udivsi3>
 800523a:	0003      	movs	r3, r0
 800523c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800523e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005240:	2b0f      	cmp	r3, #15
 8005242:	d921      	bls.n	8005288 <UART_SetConfig+0x41c>
 8005244:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005246:	2380      	movs	r3, #128	@ 0x80
 8005248:	025b      	lsls	r3, r3, #9
 800524a:	429a      	cmp	r2, r3
 800524c:	d21c      	bcs.n	8005288 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800524e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005250:	b29a      	uxth	r2, r3
 8005252:	200e      	movs	r0, #14
 8005254:	2418      	movs	r4, #24
 8005256:	1903      	adds	r3, r0, r4
 8005258:	19db      	adds	r3, r3, r7
 800525a:	210f      	movs	r1, #15
 800525c:	438a      	bics	r2, r1
 800525e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005262:	085b      	lsrs	r3, r3, #1
 8005264:	b29b      	uxth	r3, r3
 8005266:	2207      	movs	r2, #7
 8005268:	4013      	ands	r3, r2
 800526a:	b299      	uxth	r1, r3
 800526c:	1903      	adds	r3, r0, r4
 800526e:	19db      	adds	r3, r3, r7
 8005270:	1902      	adds	r2, r0, r4
 8005272:	19d2      	adds	r2, r2, r7
 8005274:	8812      	ldrh	r2, [r2, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	1902      	adds	r2, r0, r4
 8005280:	19d2      	adds	r2, r2, r7
 8005282:	8812      	ldrh	r2, [r2, #0]
 8005284:	60da      	str	r2, [r3, #12]
 8005286:	e05d      	b.n	8005344 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8005288:	231a      	movs	r3, #26
 800528a:	2218      	movs	r2, #24
 800528c:	189b      	adds	r3, r3, r2
 800528e:	19db      	adds	r3, r3, r7
 8005290:	2201      	movs	r2, #1
 8005292:	701a      	strb	r2, [r3, #0]
 8005294:	e056      	b.n	8005344 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005296:	231b      	movs	r3, #27
 8005298:	2218      	movs	r2, #24
 800529a:	189b      	adds	r3, r3, r2
 800529c:	19db      	adds	r3, r3, r7
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d822      	bhi.n	80052ea <UART_SetConfig+0x47e>
 80052a4:	009a      	lsls	r2, r3, #2
 80052a6:	4b32      	ldr	r3, [pc, #200]	@ (8005370 <UART_SetConfig+0x504>)
 80052a8:	18d3      	adds	r3, r2, r3
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052ae:	f7fe fcd9 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 80052b2:	0003      	movs	r3, r0
 80052b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80052b6:	e021      	b.n	80052fc <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052b8:	f7fe fcea 	bl	8003c90 <HAL_RCC_GetPCLK2Freq>
 80052bc:	0003      	movs	r3, r0
 80052be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80052c0:	e01c      	b.n	80052fc <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052c2:	4b28      	ldr	r3, [pc, #160]	@ (8005364 <UART_SetConfig+0x4f8>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2210      	movs	r2, #16
 80052c8:	4013      	ands	r3, r2
 80052ca:	d002      	beq.n	80052d2 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80052cc:	4b26      	ldr	r3, [pc, #152]	@ (8005368 <UART_SetConfig+0x4fc>)
 80052ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80052d0:	e014      	b.n	80052fc <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 80052d2:	4b26      	ldr	r3, [pc, #152]	@ (800536c <UART_SetConfig+0x500>)
 80052d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80052d6:	e011      	b.n	80052fc <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052d8:	f7fe fc14 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 80052dc:	0003      	movs	r3, r0
 80052de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80052e0:	e00c      	b.n	80052fc <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052e2:	2380      	movs	r3, #128	@ 0x80
 80052e4:	021b      	lsls	r3, r3, #8
 80052e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80052e8:	e008      	b.n	80052fc <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80052ee:	231a      	movs	r3, #26
 80052f0:	2218      	movs	r2, #24
 80052f2:	189b      	adds	r3, r3, r2
 80052f4:	19db      	adds	r3, r3, r7
 80052f6:	2201      	movs	r2, #1
 80052f8:	701a      	strb	r2, [r3, #0]
        break;
 80052fa:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80052fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d020      	beq.n	8005344 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	085a      	lsrs	r2, r3, #1
 8005308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800530a:	18d2      	adds	r2, r2, r3
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	0019      	movs	r1, r3
 8005312:	0010      	movs	r0, r2
 8005314:	f7fa ff02 	bl	800011c <__udivsi3>
 8005318:	0003      	movs	r3, r0
 800531a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800531c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800531e:	2b0f      	cmp	r3, #15
 8005320:	d90a      	bls.n	8005338 <UART_SetConfig+0x4cc>
 8005322:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005324:	2380      	movs	r3, #128	@ 0x80
 8005326:	025b      	lsls	r3, r3, #9
 8005328:	429a      	cmp	r2, r3
 800532a:	d205      	bcs.n	8005338 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800532c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532e:	b29a      	uxth	r2, r3
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	60da      	str	r2, [r3, #12]
 8005336:	e005      	b.n	8005344 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8005338:	231a      	movs	r3, #26
 800533a:	2218      	movs	r2, #24
 800533c:	189b      	adds	r3, r3, r2
 800533e:	19db      	adds	r3, r3, r7
 8005340:	2201      	movs	r2, #1
 8005342:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	2200      	movs	r2, #0
 8005348:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	2200      	movs	r2, #0
 800534e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005350:	231a      	movs	r3, #26
 8005352:	2218      	movs	r2, #24
 8005354:	189b      	adds	r3, r3, r2
 8005356:	19db      	adds	r3, r3, r7
 8005358:	781b      	ldrb	r3, [r3, #0]
}
 800535a:	0018      	movs	r0, r3
 800535c:	46bd      	mov	sp, r7
 800535e:	b00e      	add	sp, #56	@ 0x38
 8005360:	bdb0      	pop	{r4, r5, r7, pc}
 8005362:	46c0      	nop			@ (mov r8, r8)
 8005364:	40021000 	.word	0x40021000
 8005368:	003d0900 	.word	0x003d0900
 800536c:	00f42400 	.word	0x00f42400
 8005370:	08008820 	.word	0x08008820

08005374 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005380:	2201      	movs	r2, #1
 8005382:	4013      	ands	r3, r2
 8005384:	d00b      	beq.n	800539e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	4a4a      	ldr	r2, [pc, #296]	@ (80054b8 <UART_AdvFeatureConfig+0x144>)
 800538e:	4013      	ands	r3, r2
 8005390:	0019      	movs	r1, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a2:	2202      	movs	r2, #2
 80053a4:	4013      	ands	r3, r2
 80053a6:	d00b      	beq.n	80053c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	4a43      	ldr	r2, [pc, #268]	@ (80054bc <UART_AdvFeatureConfig+0x148>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	0019      	movs	r1, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c4:	2204      	movs	r2, #4
 80053c6:	4013      	ands	r3, r2
 80053c8:	d00b      	beq.n	80053e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	4a3b      	ldr	r2, [pc, #236]	@ (80054c0 <UART_AdvFeatureConfig+0x14c>)
 80053d2:	4013      	ands	r3, r2
 80053d4:	0019      	movs	r1, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e6:	2208      	movs	r2, #8
 80053e8:	4013      	ands	r3, r2
 80053ea:	d00b      	beq.n	8005404 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	4a34      	ldr	r2, [pc, #208]	@ (80054c4 <UART_AdvFeatureConfig+0x150>)
 80053f4:	4013      	ands	r3, r2
 80053f6:	0019      	movs	r1, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005408:	2210      	movs	r2, #16
 800540a:	4013      	ands	r3, r2
 800540c:	d00b      	beq.n	8005426 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	4a2c      	ldr	r2, [pc, #176]	@ (80054c8 <UART_AdvFeatureConfig+0x154>)
 8005416:	4013      	ands	r3, r2
 8005418:	0019      	movs	r1, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542a:	2220      	movs	r2, #32
 800542c:	4013      	ands	r3, r2
 800542e:	d00b      	beq.n	8005448 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	4a25      	ldr	r2, [pc, #148]	@ (80054cc <UART_AdvFeatureConfig+0x158>)
 8005438:	4013      	ands	r3, r2
 800543a:	0019      	movs	r1, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544c:	2240      	movs	r2, #64	@ 0x40
 800544e:	4013      	ands	r3, r2
 8005450:	d01d      	beq.n	800548e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	4a1d      	ldr	r2, [pc, #116]	@ (80054d0 <UART_AdvFeatureConfig+0x15c>)
 800545a:	4013      	ands	r3, r2
 800545c:	0019      	movs	r1, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800546e:	2380      	movs	r3, #128	@ 0x80
 8005470:	035b      	lsls	r3, r3, #13
 8005472:	429a      	cmp	r2, r3
 8005474:	d10b      	bne.n	800548e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	4a15      	ldr	r2, [pc, #84]	@ (80054d4 <UART_AdvFeatureConfig+0x160>)
 800547e:	4013      	ands	r3, r2
 8005480:	0019      	movs	r1, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005492:	2280      	movs	r2, #128	@ 0x80
 8005494:	4013      	ands	r3, r2
 8005496:	d00b      	beq.n	80054b0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	4a0e      	ldr	r2, [pc, #56]	@ (80054d8 <UART_AdvFeatureConfig+0x164>)
 80054a0:	4013      	ands	r3, r2
 80054a2:	0019      	movs	r1, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	605a      	str	r2, [r3, #4]
  }
}
 80054b0:	46c0      	nop			@ (mov r8, r8)
 80054b2:	46bd      	mov	sp, r7
 80054b4:	b002      	add	sp, #8
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	fffdffff 	.word	0xfffdffff
 80054bc:	fffeffff 	.word	0xfffeffff
 80054c0:	fffbffff 	.word	0xfffbffff
 80054c4:	ffff7fff 	.word	0xffff7fff
 80054c8:	ffffefff 	.word	0xffffefff
 80054cc:	ffffdfff 	.word	0xffffdfff
 80054d0:	ffefffff 	.word	0xffefffff
 80054d4:	ff9fffff 	.word	0xff9fffff
 80054d8:	fff7ffff 	.word	0xfff7ffff

080054dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b092      	sub	sp, #72	@ 0x48
 80054e0:	af02      	add	r7, sp, #8
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2284      	movs	r2, #132	@ 0x84
 80054e8:	2100      	movs	r1, #0
 80054ea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054ec:	f7fc fcf4 	bl	8001ed8 <HAL_GetTick>
 80054f0:	0003      	movs	r3, r0
 80054f2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2208      	movs	r2, #8
 80054fc:	4013      	ands	r3, r2
 80054fe:	2b08      	cmp	r3, #8
 8005500:	d12c      	bne.n	800555c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005504:	2280      	movs	r2, #128	@ 0x80
 8005506:	0391      	lsls	r1, r2, #14
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	4a46      	ldr	r2, [pc, #280]	@ (8005624 <UART_CheckIdleState+0x148>)
 800550c:	9200      	str	r2, [sp, #0]
 800550e:	2200      	movs	r2, #0
 8005510:	f000 f88c 	bl	800562c <UART_WaitOnFlagUntilTimeout>
 8005514:	1e03      	subs	r3, r0, #0
 8005516:	d021      	beq.n	800555c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005518:	f3ef 8310 	mrs	r3, PRIMASK
 800551c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800551e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005520:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005522:	2301      	movs	r3, #1
 8005524:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005528:	f383 8810 	msr	PRIMASK, r3
}
 800552c:	46c0      	nop			@ (mov r8, r8)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2180      	movs	r1, #128	@ 0x80
 800553a:	438a      	bics	r2, r1
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005540:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005544:	f383 8810 	msr	PRIMASK, r3
}
 8005548:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2220      	movs	r2, #32
 800554e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2278      	movs	r2, #120	@ 0x78
 8005554:	2100      	movs	r1, #0
 8005556:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e05f      	b.n	800561c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2204      	movs	r2, #4
 8005564:	4013      	ands	r3, r2
 8005566:	2b04      	cmp	r3, #4
 8005568:	d146      	bne.n	80055f8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800556a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800556c:	2280      	movs	r2, #128	@ 0x80
 800556e:	03d1      	lsls	r1, r2, #15
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	4a2c      	ldr	r2, [pc, #176]	@ (8005624 <UART_CheckIdleState+0x148>)
 8005574:	9200      	str	r2, [sp, #0]
 8005576:	2200      	movs	r2, #0
 8005578:	f000 f858 	bl	800562c <UART_WaitOnFlagUntilTimeout>
 800557c:	1e03      	subs	r3, r0, #0
 800557e:	d03b      	beq.n	80055f8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005580:	f3ef 8310 	mrs	r3, PRIMASK
 8005584:	60fb      	str	r3, [r7, #12]
  return(result);
 8005586:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005588:	637b      	str	r3, [r7, #52]	@ 0x34
 800558a:	2301      	movs	r3, #1
 800558c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	f383 8810 	msr	PRIMASK, r3
}
 8005594:	46c0      	nop			@ (mov r8, r8)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4921      	ldr	r1, [pc, #132]	@ (8005628 <UART_CheckIdleState+0x14c>)
 80055a2:	400a      	ands	r2, r1
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f383 8810 	msr	PRIMASK, r3
}
 80055b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055b2:	f3ef 8310 	mrs	r3, PRIMASK
 80055b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80055b8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80055bc:	2301      	movs	r3, #1
 80055be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f383 8810 	msr	PRIMASK, r3
}
 80055c6:	46c0      	nop			@ (mov r8, r8)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689a      	ldr	r2, [r3, #8]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2101      	movs	r1, #1
 80055d4:	438a      	bics	r2, r1
 80055d6:	609a      	str	r2, [r3, #8]
 80055d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	f383 8810 	msr	PRIMASK, r3
}
 80055e2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2280      	movs	r2, #128	@ 0x80
 80055e8:	2120      	movs	r1, #32
 80055ea:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2278      	movs	r2, #120	@ 0x78
 80055f0:	2100      	movs	r1, #0
 80055f2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e011      	b.n	800561c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2220      	movs	r2, #32
 80055fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2280      	movs	r2, #128	@ 0x80
 8005602:	2120      	movs	r1, #32
 8005604:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2278      	movs	r2, #120	@ 0x78
 8005616:	2100      	movs	r1, #0
 8005618:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	0018      	movs	r0, r3
 800561e:	46bd      	mov	sp, r7
 8005620:	b010      	add	sp, #64	@ 0x40
 8005622:	bd80      	pop	{r7, pc}
 8005624:	01ffffff 	.word	0x01ffffff
 8005628:	fffffedf 	.word	0xfffffedf

0800562c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	603b      	str	r3, [r7, #0]
 8005638:	1dfb      	adds	r3, r7, #7
 800563a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800563c:	e04b      	b.n	80056d6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	3301      	adds	r3, #1
 8005642:	d048      	beq.n	80056d6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005644:	f7fc fc48 	bl	8001ed8 <HAL_GetTick>
 8005648:	0002      	movs	r2, r0
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	69ba      	ldr	r2, [r7, #24]
 8005650:	429a      	cmp	r2, r3
 8005652:	d302      	bcc.n	800565a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e04b      	b.n	80056f6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2204      	movs	r2, #4
 8005666:	4013      	ands	r3, r2
 8005668:	d035      	beq.n	80056d6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	2208      	movs	r2, #8
 8005672:	4013      	ands	r3, r2
 8005674:	2b08      	cmp	r3, #8
 8005676:	d111      	bne.n	800569c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2208      	movs	r2, #8
 800567e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	0018      	movs	r0, r3
 8005684:	f000 f906 	bl	8005894 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2284      	movs	r2, #132	@ 0x84
 800568c:	2108      	movs	r1, #8
 800568e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2278      	movs	r2, #120	@ 0x78
 8005694:	2100      	movs	r1, #0
 8005696:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e02c      	b.n	80056f6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	69da      	ldr	r2, [r3, #28]
 80056a2:	2380      	movs	r3, #128	@ 0x80
 80056a4:	011b      	lsls	r3, r3, #4
 80056a6:	401a      	ands	r2, r3
 80056a8:	2380      	movs	r3, #128	@ 0x80
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d112      	bne.n	80056d6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2280      	movs	r2, #128	@ 0x80
 80056b6:	0112      	lsls	r2, r2, #4
 80056b8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	0018      	movs	r0, r3
 80056be:	f000 f8e9 	bl	8005894 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2284      	movs	r2, #132	@ 0x84
 80056c6:	2120      	movs	r1, #32
 80056c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2278      	movs	r2, #120	@ 0x78
 80056ce:	2100      	movs	r1, #0
 80056d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e00f      	b.n	80056f6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	4013      	ands	r3, r2
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	425a      	negs	r2, r3
 80056e6:	4153      	adcs	r3, r2
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	001a      	movs	r2, r3
 80056ec:	1dfb      	adds	r3, r7, #7
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d0a4      	beq.n	800563e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	0018      	movs	r0, r3
 80056f8:	46bd      	mov	sp, r7
 80056fa:	b004      	add	sp, #16
 80056fc:	bd80      	pop	{r7, pc}
	...

08005700 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b090      	sub	sp, #64	@ 0x40
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	1dbb      	adds	r3, r7, #6
 800570c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	1dba      	adds	r2, r7, #6
 8005718:	2158      	movs	r1, #88	@ 0x58
 800571a:	8812      	ldrh	r2, [r2, #0]
 800571c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	1dba      	adds	r2, r7, #6
 8005722:	215a      	movs	r1, #90	@ 0x5a
 8005724:	8812      	ldrh	r2, [r2, #0]
 8005726:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	689a      	ldr	r2, [r3, #8]
 8005732:	2380      	movs	r3, #128	@ 0x80
 8005734:	015b      	lsls	r3, r3, #5
 8005736:	429a      	cmp	r2, r3
 8005738:	d10d      	bne.n	8005756 <UART_Start_Receive_IT+0x56>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d104      	bne.n	800574c <UART_Start_Receive_IT+0x4c>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	225c      	movs	r2, #92	@ 0x5c
 8005746:	4950      	ldr	r1, [pc, #320]	@ (8005888 <UART_Start_Receive_IT+0x188>)
 8005748:	5299      	strh	r1, [r3, r2]
 800574a:	e02e      	b.n	80057aa <UART_Start_Receive_IT+0xaa>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	225c      	movs	r2, #92	@ 0x5c
 8005750:	21ff      	movs	r1, #255	@ 0xff
 8005752:	5299      	strh	r1, [r3, r2]
 8005754:	e029      	b.n	80057aa <UART_Start_Receive_IT+0xaa>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10d      	bne.n	800577a <UART_Start_Receive_IT+0x7a>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d104      	bne.n	8005770 <UART_Start_Receive_IT+0x70>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	225c      	movs	r2, #92	@ 0x5c
 800576a:	21ff      	movs	r1, #255	@ 0xff
 800576c:	5299      	strh	r1, [r3, r2]
 800576e:	e01c      	b.n	80057aa <UART_Start_Receive_IT+0xaa>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	225c      	movs	r2, #92	@ 0x5c
 8005774:	217f      	movs	r1, #127	@ 0x7f
 8005776:	5299      	strh	r1, [r3, r2]
 8005778:	e017      	b.n	80057aa <UART_Start_Receive_IT+0xaa>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	689a      	ldr	r2, [r3, #8]
 800577e:	2380      	movs	r3, #128	@ 0x80
 8005780:	055b      	lsls	r3, r3, #21
 8005782:	429a      	cmp	r2, r3
 8005784:	d10d      	bne.n	80057a2 <UART_Start_Receive_IT+0xa2>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d104      	bne.n	8005798 <UART_Start_Receive_IT+0x98>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	225c      	movs	r2, #92	@ 0x5c
 8005792:	217f      	movs	r1, #127	@ 0x7f
 8005794:	5299      	strh	r1, [r3, r2]
 8005796:	e008      	b.n	80057aa <UART_Start_Receive_IT+0xaa>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	225c      	movs	r2, #92	@ 0x5c
 800579c:	213f      	movs	r1, #63	@ 0x3f
 800579e:	5299      	strh	r1, [r3, r2]
 80057a0:	e003      	b.n	80057aa <UART_Start_Receive_IT+0xaa>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	225c      	movs	r2, #92	@ 0x5c
 80057a6:	2100      	movs	r1, #0
 80057a8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2284      	movs	r2, #132	@ 0x84
 80057ae:	2100      	movs	r1, #0
 80057b0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2280      	movs	r2, #128	@ 0x80
 80057b6:	2122      	movs	r1, #34	@ 0x22
 80057b8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057ba:	f3ef 8310 	mrs	r3, PRIMASK
 80057be:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80057c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057c4:	2301      	movs	r3, #1
 80057c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ca:	f383 8810 	msr	PRIMASK, r3
}
 80057ce:	46c0      	nop			@ (mov r8, r8)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689a      	ldr	r2, [r3, #8]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2101      	movs	r1, #1
 80057dc:	430a      	orrs	r2, r1
 80057de:	609a      	str	r2, [r3, #8]
 80057e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057e2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e6:	f383 8810 	msr	PRIMASK, r3
}
 80057ea:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	2380      	movs	r3, #128	@ 0x80
 80057f2:	015b      	lsls	r3, r3, #5
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d107      	bne.n	8005808 <UART_Start_Receive_IT+0x108>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d103      	bne.n	8005808 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4a22      	ldr	r2, [pc, #136]	@ (800588c <UART_Start_Receive_IT+0x18c>)
 8005804:	669a      	str	r2, [r3, #104]	@ 0x68
 8005806:	e002      	b.n	800580e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4a21      	ldr	r2, [pc, #132]	@ (8005890 <UART_Start_Receive_IT+0x190>)
 800580c:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d019      	beq.n	800584a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005816:	f3ef 8310 	mrs	r3, PRIMASK
 800581a:	61fb      	str	r3, [r7, #28]
  return(result);
 800581c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800581e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005820:	2301      	movs	r3, #1
 8005822:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	f383 8810 	msr	PRIMASK, r3
}
 800582a:	46c0      	nop			@ (mov r8, r8)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2190      	movs	r1, #144	@ 0x90
 8005838:	0049      	lsls	r1, r1, #1
 800583a:	430a      	orrs	r2, r1
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005840:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005844:	f383 8810 	msr	PRIMASK, r3
}
 8005848:	e018      	b.n	800587c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800584a:	f3ef 8310 	mrs	r3, PRIMASK
 800584e:	613b      	str	r3, [r7, #16]
  return(result);
 8005850:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005852:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005854:	2301      	movs	r3, #1
 8005856:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	f383 8810 	msr	PRIMASK, r3
}
 800585e:	46c0      	nop			@ (mov r8, r8)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2120      	movs	r1, #32
 800586c:	430a      	orrs	r2, r1
 800586e:	601a      	str	r2, [r3, #0]
 8005870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005872:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	f383 8810 	msr	PRIMASK, r3
}
 800587a:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	0018      	movs	r0, r3
 8005880:	46bd      	mov	sp, r7
 8005882:	b010      	add	sp, #64	@ 0x40
 8005884:	bd80      	pop	{r7, pc}
 8005886:	46c0      	nop			@ (mov r8, r8)
 8005888:	000001ff 	.word	0x000001ff
 800588c:	08005ba5 	.word	0x08005ba5
 8005890:	080059e1 	.word	0x080059e1

08005894 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b08e      	sub	sp, #56	@ 0x38
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800589c:	f3ef 8310 	mrs	r3, PRIMASK
 80058a0:	617b      	str	r3, [r7, #20]
  return(result);
 80058a2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80058a6:	2301      	movs	r3, #1
 80058a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	f383 8810 	msr	PRIMASK, r3
}
 80058b0:	46c0      	nop			@ (mov r8, r8)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4926      	ldr	r1, [pc, #152]	@ (8005958 <UART_EndRxTransfer+0xc4>)
 80058be:	400a      	ands	r2, r1
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	f383 8810 	msr	PRIMASK, r3
}
 80058cc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ce:	f3ef 8310 	mrs	r3, PRIMASK
 80058d2:	623b      	str	r3, [r7, #32]
  return(result);
 80058d4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80058d8:	2301      	movs	r3, #1
 80058da:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058de:	f383 8810 	msr	PRIMASK, r3
}
 80058e2:	46c0      	nop			@ (mov r8, r8)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689a      	ldr	r2, [r3, #8]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2101      	movs	r1, #1
 80058f0:	438a      	bics	r2, r1
 80058f2:	609a      	str	r2, [r3, #8]
 80058f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058fa:	f383 8810 	msr	PRIMASK, r3
}
 80058fe:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005904:	2b01      	cmp	r3, #1
 8005906:	d118      	bne.n	800593a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005908:	f3ef 8310 	mrs	r3, PRIMASK
 800590c:	60bb      	str	r3, [r7, #8]
  return(result);
 800590e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005910:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005912:	2301      	movs	r3, #1
 8005914:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f383 8810 	msr	PRIMASK, r3
}
 800591c:	46c0      	nop			@ (mov r8, r8)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2110      	movs	r1, #16
 800592a:	438a      	bics	r2, r1
 800592c:	601a      	str	r2, [r3, #0]
 800592e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005930:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	f383 8810 	msr	PRIMASK, r3
}
 8005938:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2280      	movs	r2, #128	@ 0x80
 800593e:	2120      	movs	r1, #32
 8005940:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800594e:	46c0      	nop			@ (mov r8, r8)
 8005950:	46bd      	mov	sp, r7
 8005952:	b00e      	add	sp, #56	@ 0x38
 8005954:	bd80      	pop	{r7, pc}
 8005956:	46c0      	nop			@ (mov r8, r8)
 8005958:	fffffedf 	.word	0xfffffedf

0800595c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005968:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	225a      	movs	r2, #90	@ 0x5a
 800596e:	2100      	movs	r1, #0
 8005970:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2252      	movs	r2, #82	@ 0x52
 8005976:	2100      	movs	r1, #0
 8005978:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	0018      	movs	r0, r3
 800597e:	f7ff fa61 	bl	8004e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005982:	46c0      	nop			@ (mov r8, r8)
 8005984:	46bd      	mov	sp, r7
 8005986:	b004      	add	sp, #16
 8005988:	bd80      	pop	{r7, pc}

0800598a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b086      	sub	sp, #24
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005992:	f3ef 8310 	mrs	r3, PRIMASK
 8005996:	60bb      	str	r3, [r7, #8]
  return(result);
 8005998:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	2301      	movs	r3, #1
 800599e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f383 8810 	msr	PRIMASK, r3
}
 80059a6:	46c0      	nop			@ (mov r8, r8)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2140      	movs	r1, #64	@ 0x40
 80059b4:	438a      	bics	r2, r1
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f383 8810 	msr	PRIMASK, r3
}
 80059c2:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2220      	movs	r2, #32
 80059c8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	0018      	movs	r0, r3
 80059d4:	f7ff fa2e 	bl	8004e34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059d8:	46c0      	nop			@ (mov r8, r8)
 80059da:	46bd      	mov	sp, r7
 80059dc:	b006      	add	sp, #24
 80059de:	bd80      	pop	{r7, pc}

080059e0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b094      	sub	sp, #80	@ 0x50
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80059e8:	204e      	movs	r0, #78	@ 0x4e
 80059ea:	183b      	adds	r3, r7, r0
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	215c      	movs	r1, #92	@ 0x5c
 80059f0:	5a52      	ldrh	r2, [r2, r1]
 80059f2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2280      	movs	r2, #128	@ 0x80
 80059f8:	589b      	ldr	r3, [r3, r2]
 80059fa:	2b22      	cmp	r3, #34	@ 0x22
 80059fc:	d000      	beq.n	8005a00 <UART_RxISR_8BIT+0x20>
 80059fe:	e0bf      	b.n	8005b80 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a06:	214c      	movs	r1, #76	@ 0x4c
 8005a08:	187b      	adds	r3, r7, r1
 8005a0a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a0c:	187b      	adds	r3, r7, r1
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	183b      	adds	r3, r7, r0
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	b2d9      	uxtb	r1, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a1c:	400a      	ands	r2, r1
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a26:	1c5a      	adds	r2, r3, #1
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	225a      	movs	r2, #90	@ 0x5a
 8005a30:	5a9b      	ldrh	r3, [r3, r2]
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	3b01      	subs	r3, #1
 8005a36:	b299      	uxth	r1, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	225a      	movs	r2, #90	@ 0x5a
 8005a3c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	225a      	movs	r2, #90	@ 0x5a
 8005a42:	5a9b      	ldrh	r3, [r3, r2]
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d000      	beq.n	8005a4c <UART_RxISR_8BIT+0x6c>
 8005a4a:	e0a1      	b.n	8005b90 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a50:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a56:	2301      	movs	r3, #1
 8005a58:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a5c:	f383 8810 	msr	PRIMASK, r3
}
 8005a60:	46c0      	nop			@ (mov r8, r8)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	494a      	ldr	r1, [pc, #296]	@ (8005b98 <UART_RxISR_8BIT+0x1b8>)
 8005a6e:	400a      	ands	r2, r1
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a78:	f383 8810 	msr	PRIMASK, r3
}
 8005a7c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a82:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a86:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a88:	2301      	movs	r3, #1
 8005a8a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a8e:	f383 8810 	msr	PRIMASK, r3
}
 8005a92:	46c0      	nop			@ (mov r8, r8)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	438a      	bics	r2, r1
 8005aa2:	609a      	str	r2, [r3, #8]
 8005aa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aaa:	f383 8810 	msr	PRIMASK, r3
}
 8005aae:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2280      	movs	r2, #128	@ 0x80
 8005ab4:	2120      	movs	r1, #32
 8005ab6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a34      	ldr	r2, [pc, #208]	@ (8005b9c <UART_RxISR_8BIT+0x1bc>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d01f      	beq.n	8005b0e <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	2380      	movs	r3, #128	@ 0x80
 8005ad6:	041b      	lsls	r3, r3, #16
 8005ad8:	4013      	ands	r3, r2
 8005ada:	d018      	beq.n	8005b0e <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005adc:	f3ef 8310 	mrs	r3, PRIMASK
 8005ae0:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ae2:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ae4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	f383 8810 	msr	PRIMASK, r3
}
 8005af0:	46c0      	nop			@ (mov r8, r8)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4928      	ldr	r1, [pc, #160]	@ (8005ba0 <UART_RxISR_8BIT+0x1c0>)
 8005afe:	400a      	ands	r2, r1
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b04:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	f383 8810 	msr	PRIMASK, r3
}
 8005b0c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d12f      	bne.n	8005b76 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b1c:	f3ef 8310 	mrs	r3, PRIMASK
 8005b20:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b22:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b26:	2301      	movs	r3, #1
 8005b28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f383 8810 	msr	PRIMASK, r3
}
 8005b30:	46c0      	nop			@ (mov r8, r8)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2110      	movs	r1, #16
 8005b3e:	438a      	bics	r2, r1
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f383 8810 	msr	PRIMASK, r3
}
 8005b4c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	2210      	movs	r2, #16
 8005b56:	4013      	ands	r3, r2
 8005b58:	2b10      	cmp	r3, #16
 8005b5a:	d103      	bne.n	8005b64 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2210      	movs	r2, #16
 8005b62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2258      	movs	r2, #88	@ 0x58
 8005b68:	5a9a      	ldrh	r2, [r3, r2]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	0011      	movs	r1, r2
 8005b6e:	0018      	movs	r0, r3
 8005b70:	f7ff f970 	bl	8004e54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b74:	e00c      	b.n	8005b90 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	0018      	movs	r0, r3
 8005b7a:	f7fb ff3b 	bl	80019f4 <HAL_UART_RxCpltCallback>
}
 8005b7e:	e007      	b.n	8005b90 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	699a      	ldr	r2, [r3, #24]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2108      	movs	r1, #8
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	619a      	str	r2, [r3, #24]
}
 8005b90:	46c0      	nop			@ (mov r8, r8)
 8005b92:	46bd      	mov	sp, r7
 8005b94:	b014      	add	sp, #80	@ 0x50
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	fffffedf 	.word	0xfffffedf
 8005b9c:	40004800 	.word	0x40004800
 8005ba0:	fbffffff 	.word	0xfbffffff

08005ba4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b094      	sub	sp, #80	@ 0x50
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005bac:	204e      	movs	r0, #78	@ 0x4e
 8005bae:	183b      	adds	r3, r7, r0
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	215c      	movs	r1, #92	@ 0x5c
 8005bb4:	5a52      	ldrh	r2, [r2, r1]
 8005bb6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2280      	movs	r2, #128	@ 0x80
 8005bbc:	589b      	ldr	r3, [r3, r2]
 8005bbe:	2b22      	cmp	r3, #34	@ 0x22
 8005bc0:	d000      	beq.n	8005bc4 <UART_RxISR_16BIT+0x20>
 8005bc2:	e0bf      	b.n	8005d44 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005bca:	214c      	movs	r1, #76	@ 0x4c
 8005bcc:	187b      	adds	r3, r7, r1
 8005bce:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8005bd6:	187b      	adds	r3, r7, r1
 8005bd8:	183a      	adds	r2, r7, r0
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	8812      	ldrh	r2, [r2, #0]
 8005bde:	4013      	ands	r3, r2
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005be4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bea:	1c9a      	adds	r2, r3, #2
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	225a      	movs	r2, #90	@ 0x5a
 8005bf4:	5a9b      	ldrh	r3, [r3, r2]
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b299      	uxth	r1, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	225a      	movs	r2, #90	@ 0x5a
 8005c00:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	225a      	movs	r2, #90	@ 0x5a
 8005c06:	5a9b      	ldrh	r3, [r3, r2]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d000      	beq.n	8005c10 <UART_RxISR_16BIT+0x6c>
 8005c0e:	e0a1      	b.n	8005d54 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c10:	f3ef 8310 	mrs	r3, PRIMASK
 8005c14:	623b      	str	r3, [r7, #32]
  return(result);
 8005c16:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c18:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c20:	f383 8810 	msr	PRIMASK, r3
}
 8005c24:	46c0      	nop			@ (mov r8, r8)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	494a      	ldr	r1, [pc, #296]	@ (8005d5c <UART_RxISR_16BIT+0x1b8>)
 8005c32:	400a      	ands	r2, r1
 8005c34:	601a      	str	r2, [r3, #0]
 8005c36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c3c:	f383 8810 	msr	PRIMASK, r3
}
 8005c40:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c42:	f3ef 8310 	mrs	r3, PRIMASK
 8005c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c52:	f383 8810 	msr	PRIMASK, r3
}
 8005c56:	46c0      	nop			@ (mov r8, r8)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689a      	ldr	r2, [r3, #8]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2101      	movs	r1, #1
 8005c64:	438a      	bics	r2, r1
 8005c66:	609a      	str	r2, [r3, #8]
 8005c68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c6a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c6e:	f383 8810 	msr	PRIMASK, r3
}
 8005c72:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2280      	movs	r2, #128	@ 0x80
 8005c78:	2120      	movs	r1, #32
 8005c7a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a34      	ldr	r2, [pc, #208]	@ (8005d60 <UART_RxISR_16BIT+0x1bc>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d01f      	beq.n	8005cd2 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	2380      	movs	r3, #128	@ 0x80
 8005c9a:	041b      	lsls	r3, r3, #16
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	d018      	beq.n	8005cd2 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ca0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ca4:	617b      	str	r3, [r7, #20]
  return(result);
 8005ca6:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005caa:	2301      	movs	r3, #1
 8005cac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	f383 8810 	msr	PRIMASK, r3
}
 8005cb4:	46c0      	nop			@ (mov r8, r8)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4928      	ldr	r1, [pc, #160]	@ (8005d64 <UART_RxISR_16BIT+0x1c0>)
 8005cc2:	400a      	ands	r2, r1
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	f383 8810 	msr	PRIMASK, r3
}
 8005cd0:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d12f      	bne.n	8005d3a <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ce4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ce6:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cea:	2301      	movs	r3, #1
 8005cec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f383 8810 	msr	PRIMASK, r3
}
 8005cf4:	46c0      	nop			@ (mov r8, r8)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2110      	movs	r1, #16
 8005d02:	438a      	bics	r2, r1
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f383 8810 	msr	PRIMASK, r3
}
 8005d10:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	2210      	movs	r2, #16
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	2b10      	cmp	r3, #16
 8005d1e:	d103      	bne.n	8005d28 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2210      	movs	r2, #16
 8005d26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2258      	movs	r2, #88	@ 0x58
 8005d2c:	5a9a      	ldrh	r2, [r3, r2]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	0011      	movs	r1, r2
 8005d32:	0018      	movs	r0, r3
 8005d34:	f7ff f88e 	bl	8004e54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d38:	e00c      	b.n	8005d54 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	0018      	movs	r0, r3
 8005d3e:	f7fb fe59 	bl	80019f4 <HAL_UART_RxCpltCallback>
}
 8005d42:	e007      	b.n	8005d54 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	699a      	ldr	r2, [r3, #24]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2108      	movs	r1, #8
 8005d50:	430a      	orrs	r2, r1
 8005d52:	619a      	str	r2, [r3, #24]
}
 8005d54:	46c0      	nop			@ (mov r8, r8)
 8005d56:	46bd      	mov	sp, r7
 8005d58:	b014      	add	sp, #80	@ 0x50
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	fffffedf 	.word	0xfffffedf
 8005d60:	40004800 	.word	0x40004800
 8005d64:	fbffffff 	.word	0xfbffffff

08005d68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d70:	46c0      	nop			@ (mov r8, r8)
 8005d72:	46bd      	mov	sp, r7
 8005d74:	b002      	add	sp, #8
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <std>:
 8005d78:	2300      	movs	r3, #0
 8005d7a:	b510      	push	{r4, lr}
 8005d7c:	0004      	movs	r4, r0
 8005d7e:	6003      	str	r3, [r0, #0]
 8005d80:	6043      	str	r3, [r0, #4]
 8005d82:	6083      	str	r3, [r0, #8]
 8005d84:	8181      	strh	r1, [r0, #12]
 8005d86:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d88:	81c2      	strh	r2, [r0, #14]
 8005d8a:	6103      	str	r3, [r0, #16]
 8005d8c:	6143      	str	r3, [r0, #20]
 8005d8e:	6183      	str	r3, [r0, #24]
 8005d90:	0019      	movs	r1, r3
 8005d92:	2208      	movs	r2, #8
 8005d94:	305c      	adds	r0, #92	@ 0x5c
 8005d96:	f000 fa46 	bl	8006226 <memset>
 8005d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc8 <std+0x50>)
 8005d9c:	6224      	str	r4, [r4, #32]
 8005d9e:	6263      	str	r3, [r4, #36]	@ 0x24
 8005da0:	4b0a      	ldr	r3, [pc, #40]	@ (8005dcc <std+0x54>)
 8005da2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005da4:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd0 <std+0x58>)
 8005da6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005da8:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd4 <std+0x5c>)
 8005daa:	6323      	str	r3, [r4, #48]	@ 0x30
 8005dac:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd8 <std+0x60>)
 8005dae:	429c      	cmp	r4, r3
 8005db0:	d005      	beq.n	8005dbe <std+0x46>
 8005db2:	4b0a      	ldr	r3, [pc, #40]	@ (8005ddc <std+0x64>)
 8005db4:	429c      	cmp	r4, r3
 8005db6:	d002      	beq.n	8005dbe <std+0x46>
 8005db8:	4b09      	ldr	r3, [pc, #36]	@ (8005de0 <std+0x68>)
 8005dba:	429c      	cmp	r4, r3
 8005dbc:	d103      	bne.n	8005dc6 <std+0x4e>
 8005dbe:	0020      	movs	r0, r4
 8005dc0:	3058      	adds	r0, #88	@ 0x58
 8005dc2:	f000 fab1 	bl	8006328 <__retarget_lock_init_recursive>
 8005dc6:	bd10      	pop	{r4, pc}
 8005dc8:	08006029 	.word	0x08006029
 8005dcc:	08006051 	.word	0x08006051
 8005dd0:	08006089 	.word	0x08006089
 8005dd4:	080060b5 	.word	0x080060b5
 8005dd8:	20001278 	.word	0x20001278
 8005ddc:	200012e0 	.word	0x200012e0
 8005de0:	20001348 	.word	0x20001348

08005de4 <stdio_exit_handler>:
 8005de4:	b510      	push	{r4, lr}
 8005de6:	4a03      	ldr	r2, [pc, #12]	@ (8005df4 <stdio_exit_handler+0x10>)
 8005de8:	4903      	ldr	r1, [pc, #12]	@ (8005df8 <stdio_exit_handler+0x14>)
 8005dea:	4804      	ldr	r0, [pc, #16]	@ (8005dfc <stdio_exit_handler+0x18>)
 8005dec:	f000 f86c 	bl	8005ec8 <_fwalk_sglue>
 8005df0:	bd10      	pop	{r4, pc}
 8005df2:	46c0      	nop			@ (mov r8, r8)
 8005df4:	2000064c 	.word	0x2000064c
 8005df8:	08006bfd 	.word	0x08006bfd
 8005dfc:	2000065c 	.word	0x2000065c

08005e00 <cleanup_stdio>:
 8005e00:	6841      	ldr	r1, [r0, #4]
 8005e02:	4b0b      	ldr	r3, [pc, #44]	@ (8005e30 <cleanup_stdio+0x30>)
 8005e04:	b510      	push	{r4, lr}
 8005e06:	0004      	movs	r4, r0
 8005e08:	4299      	cmp	r1, r3
 8005e0a:	d001      	beq.n	8005e10 <cleanup_stdio+0x10>
 8005e0c:	f000 fef6 	bl	8006bfc <_fflush_r>
 8005e10:	68a1      	ldr	r1, [r4, #8]
 8005e12:	4b08      	ldr	r3, [pc, #32]	@ (8005e34 <cleanup_stdio+0x34>)
 8005e14:	4299      	cmp	r1, r3
 8005e16:	d002      	beq.n	8005e1e <cleanup_stdio+0x1e>
 8005e18:	0020      	movs	r0, r4
 8005e1a:	f000 feef 	bl	8006bfc <_fflush_r>
 8005e1e:	68e1      	ldr	r1, [r4, #12]
 8005e20:	4b05      	ldr	r3, [pc, #20]	@ (8005e38 <cleanup_stdio+0x38>)
 8005e22:	4299      	cmp	r1, r3
 8005e24:	d002      	beq.n	8005e2c <cleanup_stdio+0x2c>
 8005e26:	0020      	movs	r0, r4
 8005e28:	f000 fee8 	bl	8006bfc <_fflush_r>
 8005e2c:	bd10      	pop	{r4, pc}
 8005e2e:	46c0      	nop			@ (mov r8, r8)
 8005e30:	20001278 	.word	0x20001278
 8005e34:	200012e0 	.word	0x200012e0
 8005e38:	20001348 	.word	0x20001348

08005e3c <global_stdio_init.part.0>:
 8005e3c:	b510      	push	{r4, lr}
 8005e3e:	4b09      	ldr	r3, [pc, #36]	@ (8005e64 <global_stdio_init.part.0+0x28>)
 8005e40:	4a09      	ldr	r2, [pc, #36]	@ (8005e68 <global_stdio_init.part.0+0x2c>)
 8005e42:	2104      	movs	r1, #4
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	4809      	ldr	r0, [pc, #36]	@ (8005e6c <global_stdio_init.part.0+0x30>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f7ff ff95 	bl	8005d78 <std>
 8005e4e:	2201      	movs	r2, #1
 8005e50:	2109      	movs	r1, #9
 8005e52:	4807      	ldr	r0, [pc, #28]	@ (8005e70 <global_stdio_init.part.0+0x34>)
 8005e54:	f7ff ff90 	bl	8005d78 <std>
 8005e58:	2202      	movs	r2, #2
 8005e5a:	2112      	movs	r1, #18
 8005e5c:	4805      	ldr	r0, [pc, #20]	@ (8005e74 <global_stdio_init.part.0+0x38>)
 8005e5e:	f7ff ff8b 	bl	8005d78 <std>
 8005e62:	bd10      	pop	{r4, pc}
 8005e64:	200013b0 	.word	0x200013b0
 8005e68:	08005de5 	.word	0x08005de5
 8005e6c:	20001278 	.word	0x20001278
 8005e70:	200012e0 	.word	0x200012e0
 8005e74:	20001348 	.word	0x20001348

08005e78 <__sfp_lock_acquire>:
 8005e78:	b510      	push	{r4, lr}
 8005e7a:	4802      	ldr	r0, [pc, #8]	@ (8005e84 <__sfp_lock_acquire+0xc>)
 8005e7c:	f000 fa55 	bl	800632a <__retarget_lock_acquire_recursive>
 8005e80:	bd10      	pop	{r4, pc}
 8005e82:	46c0      	nop			@ (mov r8, r8)
 8005e84:	200013b9 	.word	0x200013b9

08005e88 <__sfp_lock_release>:
 8005e88:	b510      	push	{r4, lr}
 8005e8a:	4802      	ldr	r0, [pc, #8]	@ (8005e94 <__sfp_lock_release+0xc>)
 8005e8c:	f000 fa4e 	bl	800632c <__retarget_lock_release_recursive>
 8005e90:	bd10      	pop	{r4, pc}
 8005e92:	46c0      	nop			@ (mov r8, r8)
 8005e94:	200013b9 	.word	0x200013b9

08005e98 <__sinit>:
 8005e98:	b510      	push	{r4, lr}
 8005e9a:	0004      	movs	r4, r0
 8005e9c:	f7ff ffec 	bl	8005e78 <__sfp_lock_acquire>
 8005ea0:	6a23      	ldr	r3, [r4, #32]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <__sinit+0x14>
 8005ea6:	f7ff ffef 	bl	8005e88 <__sfp_lock_release>
 8005eaa:	bd10      	pop	{r4, pc}
 8005eac:	4b04      	ldr	r3, [pc, #16]	@ (8005ec0 <__sinit+0x28>)
 8005eae:	6223      	str	r3, [r4, #32]
 8005eb0:	4b04      	ldr	r3, [pc, #16]	@ (8005ec4 <__sinit+0x2c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1f6      	bne.n	8005ea6 <__sinit+0xe>
 8005eb8:	f7ff ffc0 	bl	8005e3c <global_stdio_init.part.0>
 8005ebc:	e7f3      	b.n	8005ea6 <__sinit+0xe>
 8005ebe:	46c0      	nop			@ (mov r8, r8)
 8005ec0:	08005e01 	.word	0x08005e01
 8005ec4:	200013b0 	.word	0x200013b0

08005ec8 <_fwalk_sglue>:
 8005ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005eca:	0014      	movs	r4, r2
 8005ecc:	2600      	movs	r6, #0
 8005ece:	9000      	str	r0, [sp, #0]
 8005ed0:	9101      	str	r1, [sp, #4]
 8005ed2:	68a5      	ldr	r5, [r4, #8]
 8005ed4:	6867      	ldr	r7, [r4, #4]
 8005ed6:	3f01      	subs	r7, #1
 8005ed8:	d504      	bpl.n	8005ee4 <_fwalk_sglue+0x1c>
 8005eda:	6824      	ldr	r4, [r4, #0]
 8005edc:	2c00      	cmp	r4, #0
 8005ede:	d1f8      	bne.n	8005ed2 <_fwalk_sglue+0xa>
 8005ee0:	0030      	movs	r0, r6
 8005ee2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ee4:	89ab      	ldrh	r3, [r5, #12]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d908      	bls.n	8005efc <_fwalk_sglue+0x34>
 8005eea:	220e      	movs	r2, #14
 8005eec:	5eab      	ldrsh	r3, [r5, r2]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	d004      	beq.n	8005efc <_fwalk_sglue+0x34>
 8005ef2:	0029      	movs	r1, r5
 8005ef4:	9800      	ldr	r0, [sp, #0]
 8005ef6:	9b01      	ldr	r3, [sp, #4]
 8005ef8:	4798      	blx	r3
 8005efa:	4306      	orrs	r6, r0
 8005efc:	3568      	adds	r5, #104	@ 0x68
 8005efe:	e7ea      	b.n	8005ed6 <_fwalk_sglue+0xe>

08005f00 <_puts_r>:
 8005f00:	6a03      	ldr	r3, [r0, #32]
 8005f02:	b570      	push	{r4, r5, r6, lr}
 8005f04:	0005      	movs	r5, r0
 8005f06:	000e      	movs	r6, r1
 8005f08:	6884      	ldr	r4, [r0, #8]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <_puts_r+0x12>
 8005f0e:	f7ff ffc3 	bl	8005e98 <__sinit>
 8005f12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f14:	07db      	lsls	r3, r3, #31
 8005f16:	d405      	bmi.n	8005f24 <_puts_r+0x24>
 8005f18:	89a3      	ldrh	r3, [r4, #12]
 8005f1a:	059b      	lsls	r3, r3, #22
 8005f1c:	d402      	bmi.n	8005f24 <_puts_r+0x24>
 8005f1e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f20:	f000 fa03 	bl	800632a <__retarget_lock_acquire_recursive>
 8005f24:	89a3      	ldrh	r3, [r4, #12]
 8005f26:	071b      	lsls	r3, r3, #28
 8005f28:	d502      	bpl.n	8005f30 <_puts_r+0x30>
 8005f2a:	6923      	ldr	r3, [r4, #16]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d11f      	bne.n	8005f70 <_puts_r+0x70>
 8005f30:	0021      	movs	r1, r4
 8005f32:	0028      	movs	r0, r5
 8005f34:	f000 f906 	bl	8006144 <__swsetup_r>
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	d019      	beq.n	8005f70 <_puts_r+0x70>
 8005f3c:	2501      	movs	r5, #1
 8005f3e:	426d      	negs	r5, r5
 8005f40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f42:	07db      	lsls	r3, r3, #31
 8005f44:	d405      	bmi.n	8005f52 <_puts_r+0x52>
 8005f46:	89a3      	ldrh	r3, [r4, #12]
 8005f48:	059b      	lsls	r3, r3, #22
 8005f4a:	d402      	bmi.n	8005f52 <_puts_r+0x52>
 8005f4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f4e:	f000 f9ed 	bl	800632c <__retarget_lock_release_recursive>
 8005f52:	0028      	movs	r0, r5
 8005f54:	bd70      	pop	{r4, r5, r6, pc}
 8005f56:	3601      	adds	r6, #1
 8005f58:	60a3      	str	r3, [r4, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	da04      	bge.n	8005f68 <_puts_r+0x68>
 8005f5e:	69a2      	ldr	r2, [r4, #24]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	dc16      	bgt.n	8005f92 <_puts_r+0x92>
 8005f64:	290a      	cmp	r1, #10
 8005f66:	d014      	beq.n	8005f92 <_puts_r+0x92>
 8005f68:	6823      	ldr	r3, [r4, #0]
 8005f6a:	1c5a      	adds	r2, r3, #1
 8005f6c:	6022      	str	r2, [r4, #0]
 8005f6e:	7019      	strb	r1, [r3, #0]
 8005f70:	68a3      	ldr	r3, [r4, #8]
 8005f72:	7831      	ldrb	r1, [r6, #0]
 8005f74:	3b01      	subs	r3, #1
 8005f76:	2900      	cmp	r1, #0
 8005f78:	d1ed      	bne.n	8005f56 <_puts_r+0x56>
 8005f7a:	60a3      	str	r3, [r4, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	da0f      	bge.n	8005fa0 <_puts_r+0xa0>
 8005f80:	0022      	movs	r2, r4
 8005f82:	0028      	movs	r0, r5
 8005f84:	310a      	adds	r1, #10
 8005f86:	f000 f89b 	bl	80060c0 <__swbuf_r>
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	d0d6      	beq.n	8005f3c <_puts_r+0x3c>
 8005f8e:	250a      	movs	r5, #10
 8005f90:	e7d6      	b.n	8005f40 <_puts_r+0x40>
 8005f92:	0022      	movs	r2, r4
 8005f94:	0028      	movs	r0, r5
 8005f96:	f000 f893 	bl	80060c0 <__swbuf_r>
 8005f9a:	3001      	adds	r0, #1
 8005f9c:	d1e8      	bne.n	8005f70 <_puts_r+0x70>
 8005f9e:	e7cd      	b.n	8005f3c <_puts_r+0x3c>
 8005fa0:	6823      	ldr	r3, [r4, #0]
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	6022      	str	r2, [r4, #0]
 8005fa6:	220a      	movs	r2, #10
 8005fa8:	701a      	strb	r2, [r3, #0]
 8005faa:	e7f0      	b.n	8005f8e <_puts_r+0x8e>

08005fac <puts>:
 8005fac:	b510      	push	{r4, lr}
 8005fae:	4b03      	ldr	r3, [pc, #12]	@ (8005fbc <puts+0x10>)
 8005fb0:	0001      	movs	r1, r0
 8005fb2:	6818      	ldr	r0, [r3, #0]
 8005fb4:	f7ff ffa4 	bl	8005f00 <_puts_r>
 8005fb8:	bd10      	pop	{r4, pc}
 8005fba:	46c0      	nop			@ (mov r8, r8)
 8005fbc:	20000658 	.word	0x20000658

08005fc0 <sniprintf>:
 8005fc0:	b40c      	push	{r2, r3}
 8005fc2:	b530      	push	{r4, r5, lr}
 8005fc4:	4b17      	ldr	r3, [pc, #92]	@ (8006024 <sniprintf+0x64>)
 8005fc6:	000c      	movs	r4, r1
 8005fc8:	681d      	ldr	r5, [r3, #0]
 8005fca:	b09d      	sub	sp, #116	@ 0x74
 8005fcc:	2900      	cmp	r1, #0
 8005fce:	da08      	bge.n	8005fe2 <sniprintf+0x22>
 8005fd0:	238b      	movs	r3, #139	@ 0x8b
 8005fd2:	2001      	movs	r0, #1
 8005fd4:	602b      	str	r3, [r5, #0]
 8005fd6:	4240      	negs	r0, r0
 8005fd8:	b01d      	add	sp, #116	@ 0x74
 8005fda:	bc30      	pop	{r4, r5}
 8005fdc:	bc08      	pop	{r3}
 8005fde:	b002      	add	sp, #8
 8005fe0:	4718      	bx	r3
 8005fe2:	2382      	movs	r3, #130	@ 0x82
 8005fe4:	466a      	mov	r2, sp
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	8293      	strh	r3, [r2, #20]
 8005fea:	2300      	movs	r3, #0
 8005fec:	9002      	str	r0, [sp, #8]
 8005fee:	9006      	str	r0, [sp, #24]
 8005ff0:	4299      	cmp	r1, r3
 8005ff2:	d000      	beq.n	8005ff6 <sniprintf+0x36>
 8005ff4:	1e4b      	subs	r3, r1, #1
 8005ff6:	9304      	str	r3, [sp, #16]
 8005ff8:	9307      	str	r3, [sp, #28]
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	466a      	mov	r2, sp
 8005ffe:	425b      	negs	r3, r3
 8006000:	82d3      	strh	r3, [r2, #22]
 8006002:	0028      	movs	r0, r5
 8006004:	ab21      	add	r3, sp, #132	@ 0x84
 8006006:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006008:	a902      	add	r1, sp, #8
 800600a:	9301      	str	r3, [sp, #4]
 800600c:	f000 faf4 	bl	80065f8 <_svfiprintf_r>
 8006010:	1c43      	adds	r3, r0, #1
 8006012:	da01      	bge.n	8006018 <sniprintf+0x58>
 8006014:	238b      	movs	r3, #139	@ 0x8b
 8006016:	602b      	str	r3, [r5, #0]
 8006018:	2c00      	cmp	r4, #0
 800601a:	d0dd      	beq.n	8005fd8 <sniprintf+0x18>
 800601c:	2200      	movs	r2, #0
 800601e:	9b02      	ldr	r3, [sp, #8]
 8006020:	701a      	strb	r2, [r3, #0]
 8006022:	e7d9      	b.n	8005fd8 <sniprintf+0x18>
 8006024:	20000658 	.word	0x20000658

08006028 <__sread>:
 8006028:	b570      	push	{r4, r5, r6, lr}
 800602a:	000c      	movs	r4, r1
 800602c:	250e      	movs	r5, #14
 800602e:	5f49      	ldrsh	r1, [r1, r5]
 8006030:	f000 f928 	bl	8006284 <_read_r>
 8006034:	2800      	cmp	r0, #0
 8006036:	db03      	blt.n	8006040 <__sread+0x18>
 8006038:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800603a:	181b      	adds	r3, r3, r0
 800603c:	6563      	str	r3, [r4, #84]	@ 0x54
 800603e:	bd70      	pop	{r4, r5, r6, pc}
 8006040:	89a3      	ldrh	r3, [r4, #12]
 8006042:	4a02      	ldr	r2, [pc, #8]	@ (800604c <__sread+0x24>)
 8006044:	4013      	ands	r3, r2
 8006046:	81a3      	strh	r3, [r4, #12]
 8006048:	e7f9      	b.n	800603e <__sread+0x16>
 800604a:	46c0      	nop			@ (mov r8, r8)
 800604c:	ffffefff 	.word	0xffffefff

08006050 <__swrite>:
 8006050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006052:	001f      	movs	r7, r3
 8006054:	898b      	ldrh	r3, [r1, #12]
 8006056:	0005      	movs	r5, r0
 8006058:	000c      	movs	r4, r1
 800605a:	0016      	movs	r6, r2
 800605c:	05db      	lsls	r3, r3, #23
 800605e:	d505      	bpl.n	800606c <__swrite+0x1c>
 8006060:	230e      	movs	r3, #14
 8006062:	5ec9      	ldrsh	r1, [r1, r3]
 8006064:	2200      	movs	r2, #0
 8006066:	2302      	movs	r3, #2
 8006068:	f000 f8f8 	bl	800625c <_lseek_r>
 800606c:	89a3      	ldrh	r3, [r4, #12]
 800606e:	4a05      	ldr	r2, [pc, #20]	@ (8006084 <__swrite+0x34>)
 8006070:	0028      	movs	r0, r5
 8006072:	4013      	ands	r3, r2
 8006074:	81a3      	strh	r3, [r4, #12]
 8006076:	0032      	movs	r2, r6
 8006078:	230e      	movs	r3, #14
 800607a:	5ee1      	ldrsh	r1, [r4, r3]
 800607c:	003b      	movs	r3, r7
 800607e:	f000 f915 	bl	80062ac <_write_r>
 8006082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006084:	ffffefff 	.word	0xffffefff

08006088 <__sseek>:
 8006088:	b570      	push	{r4, r5, r6, lr}
 800608a:	000c      	movs	r4, r1
 800608c:	250e      	movs	r5, #14
 800608e:	5f49      	ldrsh	r1, [r1, r5]
 8006090:	f000 f8e4 	bl	800625c <_lseek_r>
 8006094:	89a3      	ldrh	r3, [r4, #12]
 8006096:	1c42      	adds	r2, r0, #1
 8006098:	d103      	bne.n	80060a2 <__sseek+0x1a>
 800609a:	4a05      	ldr	r2, [pc, #20]	@ (80060b0 <__sseek+0x28>)
 800609c:	4013      	ands	r3, r2
 800609e:	81a3      	strh	r3, [r4, #12]
 80060a0:	bd70      	pop	{r4, r5, r6, pc}
 80060a2:	2280      	movs	r2, #128	@ 0x80
 80060a4:	0152      	lsls	r2, r2, #5
 80060a6:	4313      	orrs	r3, r2
 80060a8:	81a3      	strh	r3, [r4, #12]
 80060aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80060ac:	e7f8      	b.n	80060a0 <__sseek+0x18>
 80060ae:	46c0      	nop			@ (mov r8, r8)
 80060b0:	ffffefff 	.word	0xffffefff

080060b4 <__sclose>:
 80060b4:	b510      	push	{r4, lr}
 80060b6:	230e      	movs	r3, #14
 80060b8:	5ec9      	ldrsh	r1, [r1, r3]
 80060ba:	f000 f8bd 	bl	8006238 <_close_r>
 80060be:	bd10      	pop	{r4, pc}

080060c0 <__swbuf_r>:
 80060c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c2:	0006      	movs	r6, r0
 80060c4:	000d      	movs	r5, r1
 80060c6:	0014      	movs	r4, r2
 80060c8:	2800      	cmp	r0, #0
 80060ca:	d004      	beq.n	80060d6 <__swbuf_r+0x16>
 80060cc:	6a03      	ldr	r3, [r0, #32]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <__swbuf_r+0x16>
 80060d2:	f7ff fee1 	bl	8005e98 <__sinit>
 80060d6:	69a3      	ldr	r3, [r4, #24]
 80060d8:	60a3      	str	r3, [r4, #8]
 80060da:	89a3      	ldrh	r3, [r4, #12]
 80060dc:	071b      	lsls	r3, r3, #28
 80060de:	d502      	bpl.n	80060e6 <__swbuf_r+0x26>
 80060e0:	6923      	ldr	r3, [r4, #16]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d109      	bne.n	80060fa <__swbuf_r+0x3a>
 80060e6:	0021      	movs	r1, r4
 80060e8:	0030      	movs	r0, r6
 80060ea:	f000 f82b 	bl	8006144 <__swsetup_r>
 80060ee:	2800      	cmp	r0, #0
 80060f0:	d003      	beq.n	80060fa <__swbuf_r+0x3a>
 80060f2:	2501      	movs	r5, #1
 80060f4:	426d      	negs	r5, r5
 80060f6:	0028      	movs	r0, r5
 80060f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060fa:	6923      	ldr	r3, [r4, #16]
 80060fc:	6820      	ldr	r0, [r4, #0]
 80060fe:	b2ef      	uxtb	r7, r5
 8006100:	1ac0      	subs	r0, r0, r3
 8006102:	6963      	ldr	r3, [r4, #20]
 8006104:	b2ed      	uxtb	r5, r5
 8006106:	4283      	cmp	r3, r0
 8006108:	dc05      	bgt.n	8006116 <__swbuf_r+0x56>
 800610a:	0021      	movs	r1, r4
 800610c:	0030      	movs	r0, r6
 800610e:	f000 fd75 	bl	8006bfc <_fflush_r>
 8006112:	2800      	cmp	r0, #0
 8006114:	d1ed      	bne.n	80060f2 <__swbuf_r+0x32>
 8006116:	68a3      	ldr	r3, [r4, #8]
 8006118:	3001      	adds	r0, #1
 800611a:	3b01      	subs	r3, #1
 800611c:	60a3      	str	r3, [r4, #8]
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	1c5a      	adds	r2, r3, #1
 8006122:	6022      	str	r2, [r4, #0]
 8006124:	701f      	strb	r7, [r3, #0]
 8006126:	6963      	ldr	r3, [r4, #20]
 8006128:	4283      	cmp	r3, r0
 800612a:	d004      	beq.n	8006136 <__swbuf_r+0x76>
 800612c:	89a3      	ldrh	r3, [r4, #12]
 800612e:	07db      	lsls	r3, r3, #31
 8006130:	d5e1      	bpl.n	80060f6 <__swbuf_r+0x36>
 8006132:	2d0a      	cmp	r5, #10
 8006134:	d1df      	bne.n	80060f6 <__swbuf_r+0x36>
 8006136:	0021      	movs	r1, r4
 8006138:	0030      	movs	r0, r6
 800613a:	f000 fd5f 	bl	8006bfc <_fflush_r>
 800613e:	2800      	cmp	r0, #0
 8006140:	d0d9      	beq.n	80060f6 <__swbuf_r+0x36>
 8006142:	e7d6      	b.n	80060f2 <__swbuf_r+0x32>

08006144 <__swsetup_r>:
 8006144:	4b2d      	ldr	r3, [pc, #180]	@ (80061fc <__swsetup_r+0xb8>)
 8006146:	b570      	push	{r4, r5, r6, lr}
 8006148:	0005      	movs	r5, r0
 800614a:	6818      	ldr	r0, [r3, #0]
 800614c:	000c      	movs	r4, r1
 800614e:	2800      	cmp	r0, #0
 8006150:	d004      	beq.n	800615c <__swsetup_r+0x18>
 8006152:	6a03      	ldr	r3, [r0, #32]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d101      	bne.n	800615c <__swsetup_r+0x18>
 8006158:	f7ff fe9e 	bl	8005e98 <__sinit>
 800615c:	230c      	movs	r3, #12
 800615e:	5ee2      	ldrsh	r2, [r4, r3]
 8006160:	0713      	lsls	r3, r2, #28
 8006162:	d423      	bmi.n	80061ac <__swsetup_r+0x68>
 8006164:	06d3      	lsls	r3, r2, #27
 8006166:	d407      	bmi.n	8006178 <__swsetup_r+0x34>
 8006168:	2309      	movs	r3, #9
 800616a:	602b      	str	r3, [r5, #0]
 800616c:	2340      	movs	r3, #64	@ 0x40
 800616e:	2001      	movs	r0, #1
 8006170:	4313      	orrs	r3, r2
 8006172:	81a3      	strh	r3, [r4, #12]
 8006174:	4240      	negs	r0, r0
 8006176:	e03a      	b.n	80061ee <__swsetup_r+0xaa>
 8006178:	0752      	lsls	r2, r2, #29
 800617a:	d513      	bpl.n	80061a4 <__swsetup_r+0x60>
 800617c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800617e:	2900      	cmp	r1, #0
 8006180:	d008      	beq.n	8006194 <__swsetup_r+0x50>
 8006182:	0023      	movs	r3, r4
 8006184:	3344      	adds	r3, #68	@ 0x44
 8006186:	4299      	cmp	r1, r3
 8006188:	d002      	beq.n	8006190 <__swsetup_r+0x4c>
 800618a:	0028      	movs	r0, r5
 800618c:	f000 f8d8 	bl	8006340 <_free_r>
 8006190:	2300      	movs	r3, #0
 8006192:	6363      	str	r3, [r4, #52]	@ 0x34
 8006194:	2224      	movs	r2, #36	@ 0x24
 8006196:	89a3      	ldrh	r3, [r4, #12]
 8006198:	4393      	bics	r3, r2
 800619a:	81a3      	strh	r3, [r4, #12]
 800619c:	2300      	movs	r3, #0
 800619e:	6063      	str	r3, [r4, #4]
 80061a0:	6923      	ldr	r3, [r4, #16]
 80061a2:	6023      	str	r3, [r4, #0]
 80061a4:	2308      	movs	r3, #8
 80061a6:	89a2      	ldrh	r2, [r4, #12]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	81a3      	strh	r3, [r4, #12]
 80061ac:	6923      	ldr	r3, [r4, #16]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10b      	bne.n	80061ca <__swsetup_r+0x86>
 80061b2:	21a0      	movs	r1, #160	@ 0xa0
 80061b4:	2280      	movs	r2, #128	@ 0x80
 80061b6:	89a3      	ldrh	r3, [r4, #12]
 80061b8:	0089      	lsls	r1, r1, #2
 80061ba:	0092      	lsls	r2, r2, #2
 80061bc:	400b      	ands	r3, r1
 80061be:	4293      	cmp	r3, r2
 80061c0:	d003      	beq.n	80061ca <__swsetup_r+0x86>
 80061c2:	0021      	movs	r1, r4
 80061c4:	0028      	movs	r0, r5
 80061c6:	f000 fd6f 	bl	8006ca8 <__smakebuf_r>
 80061ca:	230c      	movs	r3, #12
 80061cc:	5ee2      	ldrsh	r2, [r4, r3]
 80061ce:	2101      	movs	r1, #1
 80061d0:	0013      	movs	r3, r2
 80061d2:	400b      	ands	r3, r1
 80061d4:	420a      	tst	r2, r1
 80061d6:	d00b      	beq.n	80061f0 <__swsetup_r+0xac>
 80061d8:	2300      	movs	r3, #0
 80061da:	60a3      	str	r3, [r4, #8]
 80061dc:	6963      	ldr	r3, [r4, #20]
 80061de:	425b      	negs	r3, r3
 80061e0:	61a3      	str	r3, [r4, #24]
 80061e2:	2000      	movs	r0, #0
 80061e4:	6923      	ldr	r3, [r4, #16]
 80061e6:	4283      	cmp	r3, r0
 80061e8:	d101      	bne.n	80061ee <__swsetup_r+0xaa>
 80061ea:	0613      	lsls	r3, r2, #24
 80061ec:	d4be      	bmi.n	800616c <__swsetup_r+0x28>
 80061ee:	bd70      	pop	{r4, r5, r6, pc}
 80061f0:	0791      	lsls	r1, r2, #30
 80061f2:	d400      	bmi.n	80061f6 <__swsetup_r+0xb2>
 80061f4:	6963      	ldr	r3, [r4, #20]
 80061f6:	60a3      	str	r3, [r4, #8]
 80061f8:	e7f3      	b.n	80061e2 <__swsetup_r+0x9e>
 80061fa:	46c0      	nop			@ (mov r8, r8)
 80061fc:	20000658 	.word	0x20000658

08006200 <memmove>:
 8006200:	b510      	push	{r4, lr}
 8006202:	4288      	cmp	r0, r1
 8006204:	d806      	bhi.n	8006214 <memmove+0x14>
 8006206:	2300      	movs	r3, #0
 8006208:	429a      	cmp	r2, r3
 800620a:	d008      	beq.n	800621e <memmove+0x1e>
 800620c:	5ccc      	ldrb	r4, [r1, r3]
 800620e:	54c4      	strb	r4, [r0, r3]
 8006210:	3301      	adds	r3, #1
 8006212:	e7f9      	b.n	8006208 <memmove+0x8>
 8006214:	188b      	adds	r3, r1, r2
 8006216:	4298      	cmp	r0, r3
 8006218:	d2f5      	bcs.n	8006206 <memmove+0x6>
 800621a:	3a01      	subs	r2, #1
 800621c:	d200      	bcs.n	8006220 <memmove+0x20>
 800621e:	bd10      	pop	{r4, pc}
 8006220:	5c8b      	ldrb	r3, [r1, r2]
 8006222:	5483      	strb	r3, [r0, r2]
 8006224:	e7f9      	b.n	800621a <memmove+0x1a>

08006226 <memset>:
 8006226:	0003      	movs	r3, r0
 8006228:	1882      	adds	r2, r0, r2
 800622a:	4293      	cmp	r3, r2
 800622c:	d100      	bne.n	8006230 <memset+0xa>
 800622e:	4770      	bx	lr
 8006230:	7019      	strb	r1, [r3, #0]
 8006232:	3301      	adds	r3, #1
 8006234:	e7f9      	b.n	800622a <memset+0x4>
	...

08006238 <_close_r>:
 8006238:	2300      	movs	r3, #0
 800623a:	b570      	push	{r4, r5, r6, lr}
 800623c:	4d06      	ldr	r5, [pc, #24]	@ (8006258 <_close_r+0x20>)
 800623e:	0004      	movs	r4, r0
 8006240:	0008      	movs	r0, r1
 8006242:	602b      	str	r3, [r5, #0]
 8006244:	f7fb fd4f 	bl	8001ce6 <_close>
 8006248:	1c43      	adds	r3, r0, #1
 800624a:	d103      	bne.n	8006254 <_close_r+0x1c>
 800624c:	682b      	ldr	r3, [r5, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d000      	beq.n	8006254 <_close_r+0x1c>
 8006252:	6023      	str	r3, [r4, #0]
 8006254:	bd70      	pop	{r4, r5, r6, pc}
 8006256:	46c0      	nop			@ (mov r8, r8)
 8006258:	200013b4 	.word	0x200013b4

0800625c <_lseek_r>:
 800625c:	b570      	push	{r4, r5, r6, lr}
 800625e:	0004      	movs	r4, r0
 8006260:	0008      	movs	r0, r1
 8006262:	0011      	movs	r1, r2
 8006264:	001a      	movs	r2, r3
 8006266:	2300      	movs	r3, #0
 8006268:	4d05      	ldr	r5, [pc, #20]	@ (8006280 <_lseek_r+0x24>)
 800626a:	602b      	str	r3, [r5, #0]
 800626c:	f7fb fd5c 	bl	8001d28 <_lseek>
 8006270:	1c43      	adds	r3, r0, #1
 8006272:	d103      	bne.n	800627c <_lseek_r+0x20>
 8006274:	682b      	ldr	r3, [r5, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d000      	beq.n	800627c <_lseek_r+0x20>
 800627a:	6023      	str	r3, [r4, #0]
 800627c:	bd70      	pop	{r4, r5, r6, pc}
 800627e:	46c0      	nop			@ (mov r8, r8)
 8006280:	200013b4 	.word	0x200013b4

08006284 <_read_r>:
 8006284:	b570      	push	{r4, r5, r6, lr}
 8006286:	0004      	movs	r4, r0
 8006288:	0008      	movs	r0, r1
 800628a:	0011      	movs	r1, r2
 800628c:	001a      	movs	r2, r3
 800628e:	2300      	movs	r3, #0
 8006290:	4d05      	ldr	r5, [pc, #20]	@ (80062a8 <_read_r+0x24>)
 8006292:	602b      	str	r3, [r5, #0]
 8006294:	f7fb fd0a 	bl	8001cac <_read>
 8006298:	1c43      	adds	r3, r0, #1
 800629a:	d103      	bne.n	80062a4 <_read_r+0x20>
 800629c:	682b      	ldr	r3, [r5, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d000      	beq.n	80062a4 <_read_r+0x20>
 80062a2:	6023      	str	r3, [r4, #0]
 80062a4:	bd70      	pop	{r4, r5, r6, pc}
 80062a6:	46c0      	nop			@ (mov r8, r8)
 80062a8:	200013b4 	.word	0x200013b4

080062ac <_write_r>:
 80062ac:	b570      	push	{r4, r5, r6, lr}
 80062ae:	0004      	movs	r4, r0
 80062b0:	0008      	movs	r0, r1
 80062b2:	0011      	movs	r1, r2
 80062b4:	001a      	movs	r2, r3
 80062b6:	2300      	movs	r3, #0
 80062b8:	4d05      	ldr	r5, [pc, #20]	@ (80062d0 <_write_r+0x24>)
 80062ba:	602b      	str	r3, [r5, #0]
 80062bc:	f7fb f8ca 	bl	8001454 <_write>
 80062c0:	1c43      	adds	r3, r0, #1
 80062c2:	d103      	bne.n	80062cc <_write_r+0x20>
 80062c4:	682b      	ldr	r3, [r5, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d000      	beq.n	80062cc <_write_r+0x20>
 80062ca:	6023      	str	r3, [r4, #0]
 80062cc:	bd70      	pop	{r4, r5, r6, pc}
 80062ce:	46c0      	nop			@ (mov r8, r8)
 80062d0:	200013b4 	.word	0x200013b4

080062d4 <__errno>:
 80062d4:	4b01      	ldr	r3, [pc, #4]	@ (80062dc <__errno+0x8>)
 80062d6:	6818      	ldr	r0, [r3, #0]
 80062d8:	4770      	bx	lr
 80062da:	46c0      	nop			@ (mov r8, r8)
 80062dc:	20000658 	.word	0x20000658

080062e0 <__libc_init_array>:
 80062e0:	b570      	push	{r4, r5, r6, lr}
 80062e2:	2600      	movs	r6, #0
 80062e4:	4c0c      	ldr	r4, [pc, #48]	@ (8006318 <__libc_init_array+0x38>)
 80062e6:	4d0d      	ldr	r5, [pc, #52]	@ (800631c <__libc_init_array+0x3c>)
 80062e8:	1b64      	subs	r4, r4, r5
 80062ea:	10a4      	asrs	r4, r4, #2
 80062ec:	42a6      	cmp	r6, r4
 80062ee:	d109      	bne.n	8006304 <__libc_init_array+0x24>
 80062f0:	2600      	movs	r6, #0
 80062f2:	f000 fd93 	bl	8006e1c <_init>
 80062f6:	4c0a      	ldr	r4, [pc, #40]	@ (8006320 <__libc_init_array+0x40>)
 80062f8:	4d0a      	ldr	r5, [pc, #40]	@ (8006324 <__libc_init_array+0x44>)
 80062fa:	1b64      	subs	r4, r4, r5
 80062fc:	10a4      	asrs	r4, r4, #2
 80062fe:	42a6      	cmp	r6, r4
 8006300:	d105      	bne.n	800630e <__libc_init_array+0x2e>
 8006302:	bd70      	pop	{r4, r5, r6, pc}
 8006304:	00b3      	lsls	r3, r6, #2
 8006306:	58eb      	ldr	r3, [r5, r3]
 8006308:	4798      	blx	r3
 800630a:	3601      	adds	r6, #1
 800630c:	e7ee      	b.n	80062ec <__libc_init_array+0xc>
 800630e:	00b3      	lsls	r3, r6, #2
 8006310:	58eb      	ldr	r3, [r5, r3]
 8006312:	4798      	blx	r3
 8006314:	3601      	adds	r6, #1
 8006316:	e7f2      	b.n	80062fe <__libc_init_array+0x1e>
 8006318:	08008880 	.word	0x08008880
 800631c:	08008880 	.word	0x08008880
 8006320:	08008884 	.word	0x08008884
 8006324:	08008880 	.word	0x08008880

08006328 <__retarget_lock_init_recursive>:
 8006328:	4770      	bx	lr

0800632a <__retarget_lock_acquire_recursive>:
 800632a:	4770      	bx	lr

0800632c <__retarget_lock_release_recursive>:
 800632c:	4770      	bx	lr

0800632e <memcpy>:
 800632e:	2300      	movs	r3, #0
 8006330:	b510      	push	{r4, lr}
 8006332:	429a      	cmp	r2, r3
 8006334:	d100      	bne.n	8006338 <memcpy+0xa>
 8006336:	bd10      	pop	{r4, pc}
 8006338:	5ccc      	ldrb	r4, [r1, r3]
 800633a:	54c4      	strb	r4, [r0, r3]
 800633c:	3301      	adds	r3, #1
 800633e:	e7f8      	b.n	8006332 <memcpy+0x4>

08006340 <_free_r>:
 8006340:	b570      	push	{r4, r5, r6, lr}
 8006342:	0005      	movs	r5, r0
 8006344:	1e0c      	subs	r4, r1, #0
 8006346:	d010      	beq.n	800636a <_free_r+0x2a>
 8006348:	3c04      	subs	r4, #4
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	da00      	bge.n	8006352 <_free_r+0x12>
 8006350:	18e4      	adds	r4, r4, r3
 8006352:	0028      	movs	r0, r5
 8006354:	f000 f8e0 	bl	8006518 <__malloc_lock>
 8006358:	4a1d      	ldr	r2, [pc, #116]	@ (80063d0 <_free_r+0x90>)
 800635a:	6813      	ldr	r3, [r2, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d105      	bne.n	800636c <_free_r+0x2c>
 8006360:	6063      	str	r3, [r4, #4]
 8006362:	6014      	str	r4, [r2, #0]
 8006364:	0028      	movs	r0, r5
 8006366:	f000 f8df 	bl	8006528 <__malloc_unlock>
 800636a:	bd70      	pop	{r4, r5, r6, pc}
 800636c:	42a3      	cmp	r3, r4
 800636e:	d908      	bls.n	8006382 <_free_r+0x42>
 8006370:	6820      	ldr	r0, [r4, #0]
 8006372:	1821      	adds	r1, r4, r0
 8006374:	428b      	cmp	r3, r1
 8006376:	d1f3      	bne.n	8006360 <_free_r+0x20>
 8006378:	6819      	ldr	r1, [r3, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	1809      	adds	r1, r1, r0
 800637e:	6021      	str	r1, [r4, #0]
 8006380:	e7ee      	b.n	8006360 <_free_r+0x20>
 8006382:	001a      	movs	r2, r3
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <_free_r+0x4e>
 800638a:	42a3      	cmp	r3, r4
 800638c:	d9f9      	bls.n	8006382 <_free_r+0x42>
 800638e:	6811      	ldr	r1, [r2, #0]
 8006390:	1850      	adds	r0, r2, r1
 8006392:	42a0      	cmp	r0, r4
 8006394:	d10b      	bne.n	80063ae <_free_r+0x6e>
 8006396:	6820      	ldr	r0, [r4, #0]
 8006398:	1809      	adds	r1, r1, r0
 800639a:	1850      	adds	r0, r2, r1
 800639c:	6011      	str	r1, [r2, #0]
 800639e:	4283      	cmp	r3, r0
 80063a0:	d1e0      	bne.n	8006364 <_free_r+0x24>
 80063a2:	6818      	ldr	r0, [r3, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	1841      	adds	r1, r0, r1
 80063a8:	6011      	str	r1, [r2, #0]
 80063aa:	6053      	str	r3, [r2, #4]
 80063ac:	e7da      	b.n	8006364 <_free_r+0x24>
 80063ae:	42a0      	cmp	r0, r4
 80063b0:	d902      	bls.n	80063b8 <_free_r+0x78>
 80063b2:	230c      	movs	r3, #12
 80063b4:	602b      	str	r3, [r5, #0]
 80063b6:	e7d5      	b.n	8006364 <_free_r+0x24>
 80063b8:	6820      	ldr	r0, [r4, #0]
 80063ba:	1821      	adds	r1, r4, r0
 80063bc:	428b      	cmp	r3, r1
 80063be:	d103      	bne.n	80063c8 <_free_r+0x88>
 80063c0:	6819      	ldr	r1, [r3, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	1809      	adds	r1, r1, r0
 80063c6:	6021      	str	r1, [r4, #0]
 80063c8:	6063      	str	r3, [r4, #4]
 80063ca:	6054      	str	r4, [r2, #4]
 80063cc:	e7ca      	b.n	8006364 <_free_r+0x24>
 80063ce:	46c0      	nop			@ (mov r8, r8)
 80063d0:	200013c0 	.word	0x200013c0

080063d4 <sbrk_aligned>:
 80063d4:	b570      	push	{r4, r5, r6, lr}
 80063d6:	4e0f      	ldr	r6, [pc, #60]	@ (8006414 <sbrk_aligned+0x40>)
 80063d8:	000d      	movs	r5, r1
 80063da:	6831      	ldr	r1, [r6, #0]
 80063dc:	0004      	movs	r4, r0
 80063de:	2900      	cmp	r1, #0
 80063e0:	d102      	bne.n	80063e8 <sbrk_aligned+0x14>
 80063e2:	f000 fcc7 	bl	8006d74 <_sbrk_r>
 80063e6:	6030      	str	r0, [r6, #0]
 80063e8:	0029      	movs	r1, r5
 80063ea:	0020      	movs	r0, r4
 80063ec:	f000 fcc2 	bl	8006d74 <_sbrk_r>
 80063f0:	1c43      	adds	r3, r0, #1
 80063f2:	d103      	bne.n	80063fc <sbrk_aligned+0x28>
 80063f4:	2501      	movs	r5, #1
 80063f6:	426d      	negs	r5, r5
 80063f8:	0028      	movs	r0, r5
 80063fa:	bd70      	pop	{r4, r5, r6, pc}
 80063fc:	2303      	movs	r3, #3
 80063fe:	1cc5      	adds	r5, r0, #3
 8006400:	439d      	bics	r5, r3
 8006402:	42a8      	cmp	r0, r5
 8006404:	d0f8      	beq.n	80063f8 <sbrk_aligned+0x24>
 8006406:	1a29      	subs	r1, r5, r0
 8006408:	0020      	movs	r0, r4
 800640a:	f000 fcb3 	bl	8006d74 <_sbrk_r>
 800640e:	3001      	adds	r0, #1
 8006410:	d1f2      	bne.n	80063f8 <sbrk_aligned+0x24>
 8006412:	e7ef      	b.n	80063f4 <sbrk_aligned+0x20>
 8006414:	200013bc 	.word	0x200013bc

08006418 <_malloc_r>:
 8006418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800641a:	2203      	movs	r2, #3
 800641c:	1ccb      	adds	r3, r1, #3
 800641e:	4393      	bics	r3, r2
 8006420:	3308      	adds	r3, #8
 8006422:	0005      	movs	r5, r0
 8006424:	001f      	movs	r7, r3
 8006426:	2b0c      	cmp	r3, #12
 8006428:	d234      	bcs.n	8006494 <_malloc_r+0x7c>
 800642a:	270c      	movs	r7, #12
 800642c:	42b9      	cmp	r1, r7
 800642e:	d833      	bhi.n	8006498 <_malloc_r+0x80>
 8006430:	0028      	movs	r0, r5
 8006432:	f000 f871 	bl	8006518 <__malloc_lock>
 8006436:	4e37      	ldr	r6, [pc, #220]	@ (8006514 <_malloc_r+0xfc>)
 8006438:	6833      	ldr	r3, [r6, #0]
 800643a:	001c      	movs	r4, r3
 800643c:	2c00      	cmp	r4, #0
 800643e:	d12f      	bne.n	80064a0 <_malloc_r+0x88>
 8006440:	0039      	movs	r1, r7
 8006442:	0028      	movs	r0, r5
 8006444:	f7ff ffc6 	bl	80063d4 <sbrk_aligned>
 8006448:	0004      	movs	r4, r0
 800644a:	1c43      	adds	r3, r0, #1
 800644c:	d15f      	bne.n	800650e <_malloc_r+0xf6>
 800644e:	6834      	ldr	r4, [r6, #0]
 8006450:	9400      	str	r4, [sp, #0]
 8006452:	9b00      	ldr	r3, [sp, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d14a      	bne.n	80064ee <_malloc_r+0xd6>
 8006458:	2c00      	cmp	r4, #0
 800645a:	d052      	beq.n	8006502 <_malloc_r+0xea>
 800645c:	6823      	ldr	r3, [r4, #0]
 800645e:	0028      	movs	r0, r5
 8006460:	18e3      	adds	r3, r4, r3
 8006462:	9900      	ldr	r1, [sp, #0]
 8006464:	9301      	str	r3, [sp, #4]
 8006466:	f000 fc85 	bl	8006d74 <_sbrk_r>
 800646a:	9b01      	ldr	r3, [sp, #4]
 800646c:	4283      	cmp	r3, r0
 800646e:	d148      	bne.n	8006502 <_malloc_r+0xea>
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	0028      	movs	r0, r5
 8006474:	1aff      	subs	r7, r7, r3
 8006476:	0039      	movs	r1, r7
 8006478:	f7ff ffac 	bl	80063d4 <sbrk_aligned>
 800647c:	3001      	adds	r0, #1
 800647e:	d040      	beq.n	8006502 <_malloc_r+0xea>
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	19db      	adds	r3, r3, r7
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	6833      	ldr	r3, [r6, #0]
 8006488:	685a      	ldr	r2, [r3, #4]
 800648a:	2a00      	cmp	r2, #0
 800648c:	d133      	bne.n	80064f6 <_malloc_r+0xde>
 800648e:	9b00      	ldr	r3, [sp, #0]
 8006490:	6033      	str	r3, [r6, #0]
 8006492:	e019      	b.n	80064c8 <_malloc_r+0xb0>
 8006494:	2b00      	cmp	r3, #0
 8006496:	dac9      	bge.n	800642c <_malloc_r+0x14>
 8006498:	230c      	movs	r3, #12
 800649a:	602b      	str	r3, [r5, #0]
 800649c:	2000      	movs	r0, #0
 800649e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80064a0:	6821      	ldr	r1, [r4, #0]
 80064a2:	1bc9      	subs	r1, r1, r7
 80064a4:	d420      	bmi.n	80064e8 <_malloc_r+0xd0>
 80064a6:	290b      	cmp	r1, #11
 80064a8:	d90a      	bls.n	80064c0 <_malloc_r+0xa8>
 80064aa:	19e2      	adds	r2, r4, r7
 80064ac:	6027      	str	r7, [r4, #0]
 80064ae:	42a3      	cmp	r3, r4
 80064b0:	d104      	bne.n	80064bc <_malloc_r+0xa4>
 80064b2:	6032      	str	r2, [r6, #0]
 80064b4:	6863      	ldr	r3, [r4, #4]
 80064b6:	6011      	str	r1, [r2, #0]
 80064b8:	6053      	str	r3, [r2, #4]
 80064ba:	e005      	b.n	80064c8 <_malloc_r+0xb0>
 80064bc:	605a      	str	r2, [r3, #4]
 80064be:	e7f9      	b.n	80064b4 <_malloc_r+0x9c>
 80064c0:	6862      	ldr	r2, [r4, #4]
 80064c2:	42a3      	cmp	r3, r4
 80064c4:	d10e      	bne.n	80064e4 <_malloc_r+0xcc>
 80064c6:	6032      	str	r2, [r6, #0]
 80064c8:	0028      	movs	r0, r5
 80064ca:	f000 f82d 	bl	8006528 <__malloc_unlock>
 80064ce:	0020      	movs	r0, r4
 80064d0:	2207      	movs	r2, #7
 80064d2:	300b      	adds	r0, #11
 80064d4:	1d23      	adds	r3, r4, #4
 80064d6:	4390      	bics	r0, r2
 80064d8:	1ac2      	subs	r2, r0, r3
 80064da:	4298      	cmp	r0, r3
 80064dc:	d0df      	beq.n	800649e <_malloc_r+0x86>
 80064de:	1a1b      	subs	r3, r3, r0
 80064e0:	50a3      	str	r3, [r4, r2]
 80064e2:	e7dc      	b.n	800649e <_malloc_r+0x86>
 80064e4:	605a      	str	r2, [r3, #4]
 80064e6:	e7ef      	b.n	80064c8 <_malloc_r+0xb0>
 80064e8:	0023      	movs	r3, r4
 80064ea:	6864      	ldr	r4, [r4, #4]
 80064ec:	e7a6      	b.n	800643c <_malloc_r+0x24>
 80064ee:	9c00      	ldr	r4, [sp, #0]
 80064f0:	6863      	ldr	r3, [r4, #4]
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	e7ad      	b.n	8006452 <_malloc_r+0x3a>
 80064f6:	001a      	movs	r2, r3
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	42a3      	cmp	r3, r4
 80064fc:	d1fb      	bne.n	80064f6 <_malloc_r+0xde>
 80064fe:	2300      	movs	r3, #0
 8006500:	e7da      	b.n	80064b8 <_malloc_r+0xa0>
 8006502:	230c      	movs	r3, #12
 8006504:	0028      	movs	r0, r5
 8006506:	602b      	str	r3, [r5, #0]
 8006508:	f000 f80e 	bl	8006528 <__malloc_unlock>
 800650c:	e7c6      	b.n	800649c <_malloc_r+0x84>
 800650e:	6007      	str	r7, [r0, #0]
 8006510:	e7da      	b.n	80064c8 <_malloc_r+0xb0>
 8006512:	46c0      	nop			@ (mov r8, r8)
 8006514:	200013c0 	.word	0x200013c0

08006518 <__malloc_lock>:
 8006518:	b510      	push	{r4, lr}
 800651a:	4802      	ldr	r0, [pc, #8]	@ (8006524 <__malloc_lock+0xc>)
 800651c:	f7ff ff05 	bl	800632a <__retarget_lock_acquire_recursive>
 8006520:	bd10      	pop	{r4, pc}
 8006522:	46c0      	nop			@ (mov r8, r8)
 8006524:	200013b8 	.word	0x200013b8

08006528 <__malloc_unlock>:
 8006528:	b510      	push	{r4, lr}
 800652a:	4802      	ldr	r0, [pc, #8]	@ (8006534 <__malloc_unlock+0xc>)
 800652c:	f7ff fefe 	bl	800632c <__retarget_lock_release_recursive>
 8006530:	bd10      	pop	{r4, pc}
 8006532:	46c0      	nop			@ (mov r8, r8)
 8006534:	200013b8 	.word	0x200013b8

08006538 <__ssputs_r>:
 8006538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800653a:	688e      	ldr	r6, [r1, #8]
 800653c:	b085      	sub	sp, #20
 800653e:	001f      	movs	r7, r3
 8006540:	000c      	movs	r4, r1
 8006542:	680b      	ldr	r3, [r1, #0]
 8006544:	9002      	str	r0, [sp, #8]
 8006546:	9203      	str	r2, [sp, #12]
 8006548:	42be      	cmp	r6, r7
 800654a:	d830      	bhi.n	80065ae <__ssputs_r+0x76>
 800654c:	210c      	movs	r1, #12
 800654e:	5e62      	ldrsh	r2, [r4, r1]
 8006550:	2190      	movs	r1, #144	@ 0x90
 8006552:	00c9      	lsls	r1, r1, #3
 8006554:	420a      	tst	r2, r1
 8006556:	d028      	beq.n	80065aa <__ssputs_r+0x72>
 8006558:	2003      	movs	r0, #3
 800655a:	6921      	ldr	r1, [r4, #16]
 800655c:	1a5b      	subs	r3, r3, r1
 800655e:	9301      	str	r3, [sp, #4]
 8006560:	6963      	ldr	r3, [r4, #20]
 8006562:	4343      	muls	r3, r0
 8006564:	9801      	ldr	r0, [sp, #4]
 8006566:	0fdd      	lsrs	r5, r3, #31
 8006568:	18ed      	adds	r5, r5, r3
 800656a:	1c7b      	adds	r3, r7, #1
 800656c:	181b      	adds	r3, r3, r0
 800656e:	106d      	asrs	r5, r5, #1
 8006570:	42ab      	cmp	r3, r5
 8006572:	d900      	bls.n	8006576 <__ssputs_r+0x3e>
 8006574:	001d      	movs	r5, r3
 8006576:	0552      	lsls	r2, r2, #21
 8006578:	d528      	bpl.n	80065cc <__ssputs_r+0x94>
 800657a:	0029      	movs	r1, r5
 800657c:	9802      	ldr	r0, [sp, #8]
 800657e:	f7ff ff4b 	bl	8006418 <_malloc_r>
 8006582:	1e06      	subs	r6, r0, #0
 8006584:	d02c      	beq.n	80065e0 <__ssputs_r+0xa8>
 8006586:	9a01      	ldr	r2, [sp, #4]
 8006588:	6921      	ldr	r1, [r4, #16]
 800658a:	f7ff fed0 	bl	800632e <memcpy>
 800658e:	89a2      	ldrh	r2, [r4, #12]
 8006590:	4b18      	ldr	r3, [pc, #96]	@ (80065f4 <__ssputs_r+0xbc>)
 8006592:	401a      	ands	r2, r3
 8006594:	2380      	movs	r3, #128	@ 0x80
 8006596:	4313      	orrs	r3, r2
 8006598:	81a3      	strh	r3, [r4, #12]
 800659a:	9b01      	ldr	r3, [sp, #4]
 800659c:	6126      	str	r6, [r4, #16]
 800659e:	18f6      	adds	r6, r6, r3
 80065a0:	6026      	str	r6, [r4, #0]
 80065a2:	003e      	movs	r6, r7
 80065a4:	6165      	str	r5, [r4, #20]
 80065a6:	1aed      	subs	r5, r5, r3
 80065a8:	60a5      	str	r5, [r4, #8]
 80065aa:	42be      	cmp	r6, r7
 80065ac:	d900      	bls.n	80065b0 <__ssputs_r+0x78>
 80065ae:	003e      	movs	r6, r7
 80065b0:	0032      	movs	r2, r6
 80065b2:	9903      	ldr	r1, [sp, #12]
 80065b4:	6820      	ldr	r0, [r4, #0]
 80065b6:	f7ff fe23 	bl	8006200 <memmove>
 80065ba:	2000      	movs	r0, #0
 80065bc:	68a3      	ldr	r3, [r4, #8]
 80065be:	1b9b      	subs	r3, r3, r6
 80065c0:	60a3      	str	r3, [r4, #8]
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	199b      	adds	r3, r3, r6
 80065c6:	6023      	str	r3, [r4, #0]
 80065c8:	b005      	add	sp, #20
 80065ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065cc:	002a      	movs	r2, r5
 80065ce:	9802      	ldr	r0, [sp, #8]
 80065d0:	f000 fbed 	bl	8006dae <_realloc_r>
 80065d4:	1e06      	subs	r6, r0, #0
 80065d6:	d1e0      	bne.n	800659a <__ssputs_r+0x62>
 80065d8:	6921      	ldr	r1, [r4, #16]
 80065da:	9802      	ldr	r0, [sp, #8]
 80065dc:	f7ff feb0 	bl	8006340 <_free_r>
 80065e0:	230c      	movs	r3, #12
 80065e2:	2001      	movs	r0, #1
 80065e4:	9a02      	ldr	r2, [sp, #8]
 80065e6:	4240      	negs	r0, r0
 80065e8:	6013      	str	r3, [r2, #0]
 80065ea:	89a2      	ldrh	r2, [r4, #12]
 80065ec:	3334      	adds	r3, #52	@ 0x34
 80065ee:	4313      	orrs	r3, r2
 80065f0:	81a3      	strh	r3, [r4, #12]
 80065f2:	e7e9      	b.n	80065c8 <__ssputs_r+0x90>
 80065f4:	fffffb7f 	.word	0xfffffb7f

080065f8 <_svfiprintf_r>:
 80065f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065fa:	b0a1      	sub	sp, #132	@ 0x84
 80065fc:	9003      	str	r0, [sp, #12]
 80065fe:	001d      	movs	r5, r3
 8006600:	898b      	ldrh	r3, [r1, #12]
 8006602:	000f      	movs	r7, r1
 8006604:	0016      	movs	r6, r2
 8006606:	061b      	lsls	r3, r3, #24
 8006608:	d511      	bpl.n	800662e <_svfiprintf_r+0x36>
 800660a:	690b      	ldr	r3, [r1, #16]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10e      	bne.n	800662e <_svfiprintf_r+0x36>
 8006610:	2140      	movs	r1, #64	@ 0x40
 8006612:	f7ff ff01 	bl	8006418 <_malloc_r>
 8006616:	6038      	str	r0, [r7, #0]
 8006618:	6138      	str	r0, [r7, #16]
 800661a:	2800      	cmp	r0, #0
 800661c:	d105      	bne.n	800662a <_svfiprintf_r+0x32>
 800661e:	230c      	movs	r3, #12
 8006620:	9a03      	ldr	r2, [sp, #12]
 8006622:	6013      	str	r3, [r2, #0]
 8006624:	2001      	movs	r0, #1
 8006626:	4240      	negs	r0, r0
 8006628:	e0cf      	b.n	80067ca <_svfiprintf_r+0x1d2>
 800662a:	2340      	movs	r3, #64	@ 0x40
 800662c:	617b      	str	r3, [r7, #20]
 800662e:	2300      	movs	r3, #0
 8006630:	ac08      	add	r4, sp, #32
 8006632:	6163      	str	r3, [r4, #20]
 8006634:	3320      	adds	r3, #32
 8006636:	7663      	strb	r3, [r4, #25]
 8006638:	3310      	adds	r3, #16
 800663a:	76a3      	strb	r3, [r4, #26]
 800663c:	9507      	str	r5, [sp, #28]
 800663e:	0035      	movs	r5, r6
 8006640:	782b      	ldrb	r3, [r5, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <_svfiprintf_r+0x52>
 8006646:	2b25      	cmp	r3, #37	@ 0x25
 8006648:	d148      	bne.n	80066dc <_svfiprintf_r+0xe4>
 800664a:	1bab      	subs	r3, r5, r6
 800664c:	9305      	str	r3, [sp, #20]
 800664e:	42b5      	cmp	r5, r6
 8006650:	d00b      	beq.n	800666a <_svfiprintf_r+0x72>
 8006652:	0032      	movs	r2, r6
 8006654:	0039      	movs	r1, r7
 8006656:	9803      	ldr	r0, [sp, #12]
 8006658:	f7ff ff6e 	bl	8006538 <__ssputs_r>
 800665c:	3001      	adds	r0, #1
 800665e:	d100      	bne.n	8006662 <_svfiprintf_r+0x6a>
 8006660:	e0ae      	b.n	80067c0 <_svfiprintf_r+0x1c8>
 8006662:	6963      	ldr	r3, [r4, #20]
 8006664:	9a05      	ldr	r2, [sp, #20]
 8006666:	189b      	adds	r3, r3, r2
 8006668:	6163      	str	r3, [r4, #20]
 800666a:	782b      	ldrb	r3, [r5, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d100      	bne.n	8006672 <_svfiprintf_r+0x7a>
 8006670:	e0a6      	b.n	80067c0 <_svfiprintf_r+0x1c8>
 8006672:	2201      	movs	r2, #1
 8006674:	2300      	movs	r3, #0
 8006676:	4252      	negs	r2, r2
 8006678:	6062      	str	r2, [r4, #4]
 800667a:	a904      	add	r1, sp, #16
 800667c:	3254      	adds	r2, #84	@ 0x54
 800667e:	1852      	adds	r2, r2, r1
 8006680:	1c6e      	adds	r6, r5, #1
 8006682:	6023      	str	r3, [r4, #0]
 8006684:	60e3      	str	r3, [r4, #12]
 8006686:	60a3      	str	r3, [r4, #8]
 8006688:	7013      	strb	r3, [r2, #0]
 800668a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800668c:	4b54      	ldr	r3, [pc, #336]	@ (80067e0 <_svfiprintf_r+0x1e8>)
 800668e:	2205      	movs	r2, #5
 8006690:	0018      	movs	r0, r3
 8006692:	7831      	ldrb	r1, [r6, #0]
 8006694:	9305      	str	r3, [sp, #20]
 8006696:	f000 fb7f 	bl	8006d98 <memchr>
 800669a:	1c75      	adds	r5, r6, #1
 800669c:	2800      	cmp	r0, #0
 800669e:	d11f      	bne.n	80066e0 <_svfiprintf_r+0xe8>
 80066a0:	6822      	ldr	r2, [r4, #0]
 80066a2:	06d3      	lsls	r3, r2, #27
 80066a4:	d504      	bpl.n	80066b0 <_svfiprintf_r+0xb8>
 80066a6:	2353      	movs	r3, #83	@ 0x53
 80066a8:	a904      	add	r1, sp, #16
 80066aa:	185b      	adds	r3, r3, r1
 80066ac:	2120      	movs	r1, #32
 80066ae:	7019      	strb	r1, [r3, #0]
 80066b0:	0713      	lsls	r3, r2, #28
 80066b2:	d504      	bpl.n	80066be <_svfiprintf_r+0xc6>
 80066b4:	2353      	movs	r3, #83	@ 0x53
 80066b6:	a904      	add	r1, sp, #16
 80066b8:	185b      	adds	r3, r3, r1
 80066ba:	212b      	movs	r1, #43	@ 0x2b
 80066bc:	7019      	strb	r1, [r3, #0]
 80066be:	7833      	ldrb	r3, [r6, #0]
 80066c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80066c2:	d016      	beq.n	80066f2 <_svfiprintf_r+0xfa>
 80066c4:	0035      	movs	r5, r6
 80066c6:	2100      	movs	r1, #0
 80066c8:	200a      	movs	r0, #10
 80066ca:	68e3      	ldr	r3, [r4, #12]
 80066cc:	782a      	ldrb	r2, [r5, #0]
 80066ce:	1c6e      	adds	r6, r5, #1
 80066d0:	3a30      	subs	r2, #48	@ 0x30
 80066d2:	2a09      	cmp	r2, #9
 80066d4:	d950      	bls.n	8006778 <_svfiprintf_r+0x180>
 80066d6:	2900      	cmp	r1, #0
 80066d8:	d111      	bne.n	80066fe <_svfiprintf_r+0x106>
 80066da:	e017      	b.n	800670c <_svfiprintf_r+0x114>
 80066dc:	3501      	adds	r5, #1
 80066de:	e7af      	b.n	8006640 <_svfiprintf_r+0x48>
 80066e0:	9b05      	ldr	r3, [sp, #20]
 80066e2:	6822      	ldr	r2, [r4, #0]
 80066e4:	1ac0      	subs	r0, r0, r3
 80066e6:	2301      	movs	r3, #1
 80066e8:	4083      	lsls	r3, r0
 80066ea:	4313      	orrs	r3, r2
 80066ec:	002e      	movs	r6, r5
 80066ee:	6023      	str	r3, [r4, #0]
 80066f0:	e7cc      	b.n	800668c <_svfiprintf_r+0x94>
 80066f2:	9b07      	ldr	r3, [sp, #28]
 80066f4:	1d19      	adds	r1, r3, #4
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	9107      	str	r1, [sp, #28]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	db01      	blt.n	8006702 <_svfiprintf_r+0x10a>
 80066fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006700:	e004      	b.n	800670c <_svfiprintf_r+0x114>
 8006702:	425b      	negs	r3, r3
 8006704:	60e3      	str	r3, [r4, #12]
 8006706:	2302      	movs	r3, #2
 8006708:	4313      	orrs	r3, r2
 800670a:	6023      	str	r3, [r4, #0]
 800670c:	782b      	ldrb	r3, [r5, #0]
 800670e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006710:	d10c      	bne.n	800672c <_svfiprintf_r+0x134>
 8006712:	786b      	ldrb	r3, [r5, #1]
 8006714:	2b2a      	cmp	r3, #42	@ 0x2a
 8006716:	d134      	bne.n	8006782 <_svfiprintf_r+0x18a>
 8006718:	9b07      	ldr	r3, [sp, #28]
 800671a:	3502      	adds	r5, #2
 800671c:	1d1a      	adds	r2, r3, #4
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	9207      	str	r2, [sp, #28]
 8006722:	2b00      	cmp	r3, #0
 8006724:	da01      	bge.n	800672a <_svfiprintf_r+0x132>
 8006726:	2301      	movs	r3, #1
 8006728:	425b      	negs	r3, r3
 800672a:	9309      	str	r3, [sp, #36]	@ 0x24
 800672c:	4e2d      	ldr	r6, [pc, #180]	@ (80067e4 <_svfiprintf_r+0x1ec>)
 800672e:	2203      	movs	r2, #3
 8006730:	0030      	movs	r0, r6
 8006732:	7829      	ldrb	r1, [r5, #0]
 8006734:	f000 fb30 	bl	8006d98 <memchr>
 8006738:	2800      	cmp	r0, #0
 800673a:	d006      	beq.n	800674a <_svfiprintf_r+0x152>
 800673c:	2340      	movs	r3, #64	@ 0x40
 800673e:	1b80      	subs	r0, r0, r6
 8006740:	4083      	lsls	r3, r0
 8006742:	6822      	ldr	r2, [r4, #0]
 8006744:	3501      	adds	r5, #1
 8006746:	4313      	orrs	r3, r2
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	7829      	ldrb	r1, [r5, #0]
 800674c:	2206      	movs	r2, #6
 800674e:	4826      	ldr	r0, [pc, #152]	@ (80067e8 <_svfiprintf_r+0x1f0>)
 8006750:	1c6e      	adds	r6, r5, #1
 8006752:	7621      	strb	r1, [r4, #24]
 8006754:	f000 fb20 	bl	8006d98 <memchr>
 8006758:	2800      	cmp	r0, #0
 800675a:	d038      	beq.n	80067ce <_svfiprintf_r+0x1d6>
 800675c:	4b23      	ldr	r3, [pc, #140]	@ (80067ec <_svfiprintf_r+0x1f4>)
 800675e:	2b00      	cmp	r3, #0
 8006760:	d122      	bne.n	80067a8 <_svfiprintf_r+0x1b0>
 8006762:	2207      	movs	r2, #7
 8006764:	9b07      	ldr	r3, [sp, #28]
 8006766:	3307      	adds	r3, #7
 8006768:	4393      	bics	r3, r2
 800676a:	3308      	adds	r3, #8
 800676c:	9307      	str	r3, [sp, #28]
 800676e:	6963      	ldr	r3, [r4, #20]
 8006770:	9a04      	ldr	r2, [sp, #16]
 8006772:	189b      	adds	r3, r3, r2
 8006774:	6163      	str	r3, [r4, #20]
 8006776:	e762      	b.n	800663e <_svfiprintf_r+0x46>
 8006778:	4343      	muls	r3, r0
 800677a:	0035      	movs	r5, r6
 800677c:	2101      	movs	r1, #1
 800677e:	189b      	adds	r3, r3, r2
 8006780:	e7a4      	b.n	80066cc <_svfiprintf_r+0xd4>
 8006782:	2300      	movs	r3, #0
 8006784:	200a      	movs	r0, #10
 8006786:	0019      	movs	r1, r3
 8006788:	3501      	adds	r5, #1
 800678a:	6063      	str	r3, [r4, #4]
 800678c:	782a      	ldrb	r2, [r5, #0]
 800678e:	1c6e      	adds	r6, r5, #1
 8006790:	3a30      	subs	r2, #48	@ 0x30
 8006792:	2a09      	cmp	r2, #9
 8006794:	d903      	bls.n	800679e <_svfiprintf_r+0x1a6>
 8006796:	2b00      	cmp	r3, #0
 8006798:	d0c8      	beq.n	800672c <_svfiprintf_r+0x134>
 800679a:	9109      	str	r1, [sp, #36]	@ 0x24
 800679c:	e7c6      	b.n	800672c <_svfiprintf_r+0x134>
 800679e:	4341      	muls	r1, r0
 80067a0:	0035      	movs	r5, r6
 80067a2:	2301      	movs	r3, #1
 80067a4:	1889      	adds	r1, r1, r2
 80067a6:	e7f1      	b.n	800678c <_svfiprintf_r+0x194>
 80067a8:	aa07      	add	r2, sp, #28
 80067aa:	9200      	str	r2, [sp, #0]
 80067ac:	0021      	movs	r1, r4
 80067ae:	003a      	movs	r2, r7
 80067b0:	4b0f      	ldr	r3, [pc, #60]	@ (80067f0 <_svfiprintf_r+0x1f8>)
 80067b2:	9803      	ldr	r0, [sp, #12]
 80067b4:	e000      	b.n	80067b8 <_svfiprintf_r+0x1c0>
 80067b6:	bf00      	nop
 80067b8:	9004      	str	r0, [sp, #16]
 80067ba:	9b04      	ldr	r3, [sp, #16]
 80067bc:	3301      	adds	r3, #1
 80067be:	d1d6      	bne.n	800676e <_svfiprintf_r+0x176>
 80067c0:	89bb      	ldrh	r3, [r7, #12]
 80067c2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80067c4:	065b      	lsls	r3, r3, #25
 80067c6:	d500      	bpl.n	80067ca <_svfiprintf_r+0x1d2>
 80067c8:	e72c      	b.n	8006624 <_svfiprintf_r+0x2c>
 80067ca:	b021      	add	sp, #132	@ 0x84
 80067cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067ce:	aa07      	add	r2, sp, #28
 80067d0:	9200      	str	r2, [sp, #0]
 80067d2:	0021      	movs	r1, r4
 80067d4:	003a      	movs	r2, r7
 80067d6:	4b06      	ldr	r3, [pc, #24]	@ (80067f0 <_svfiprintf_r+0x1f8>)
 80067d8:	9803      	ldr	r0, [sp, #12]
 80067da:	f000 f87b 	bl	80068d4 <_printf_i>
 80067de:	e7eb      	b.n	80067b8 <_svfiprintf_r+0x1c0>
 80067e0:	08008844 	.word	0x08008844
 80067e4:	0800884a 	.word	0x0800884a
 80067e8:	0800884e 	.word	0x0800884e
 80067ec:	00000000 	.word	0x00000000
 80067f0:	08006539 	.word	0x08006539

080067f4 <_printf_common>:
 80067f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067f6:	0016      	movs	r6, r2
 80067f8:	9301      	str	r3, [sp, #4]
 80067fa:	688a      	ldr	r2, [r1, #8]
 80067fc:	690b      	ldr	r3, [r1, #16]
 80067fe:	000c      	movs	r4, r1
 8006800:	9000      	str	r0, [sp, #0]
 8006802:	4293      	cmp	r3, r2
 8006804:	da00      	bge.n	8006808 <_printf_common+0x14>
 8006806:	0013      	movs	r3, r2
 8006808:	0022      	movs	r2, r4
 800680a:	6033      	str	r3, [r6, #0]
 800680c:	3243      	adds	r2, #67	@ 0x43
 800680e:	7812      	ldrb	r2, [r2, #0]
 8006810:	2a00      	cmp	r2, #0
 8006812:	d001      	beq.n	8006818 <_printf_common+0x24>
 8006814:	3301      	adds	r3, #1
 8006816:	6033      	str	r3, [r6, #0]
 8006818:	6823      	ldr	r3, [r4, #0]
 800681a:	069b      	lsls	r3, r3, #26
 800681c:	d502      	bpl.n	8006824 <_printf_common+0x30>
 800681e:	6833      	ldr	r3, [r6, #0]
 8006820:	3302      	adds	r3, #2
 8006822:	6033      	str	r3, [r6, #0]
 8006824:	6822      	ldr	r2, [r4, #0]
 8006826:	2306      	movs	r3, #6
 8006828:	0015      	movs	r5, r2
 800682a:	401d      	ands	r5, r3
 800682c:	421a      	tst	r2, r3
 800682e:	d027      	beq.n	8006880 <_printf_common+0x8c>
 8006830:	0023      	movs	r3, r4
 8006832:	3343      	adds	r3, #67	@ 0x43
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	1e5a      	subs	r2, r3, #1
 8006838:	4193      	sbcs	r3, r2
 800683a:	6822      	ldr	r2, [r4, #0]
 800683c:	0692      	lsls	r2, r2, #26
 800683e:	d430      	bmi.n	80068a2 <_printf_common+0xae>
 8006840:	0022      	movs	r2, r4
 8006842:	9901      	ldr	r1, [sp, #4]
 8006844:	9800      	ldr	r0, [sp, #0]
 8006846:	9d08      	ldr	r5, [sp, #32]
 8006848:	3243      	adds	r2, #67	@ 0x43
 800684a:	47a8      	blx	r5
 800684c:	3001      	adds	r0, #1
 800684e:	d025      	beq.n	800689c <_printf_common+0xa8>
 8006850:	2206      	movs	r2, #6
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	2500      	movs	r5, #0
 8006856:	4013      	ands	r3, r2
 8006858:	2b04      	cmp	r3, #4
 800685a:	d105      	bne.n	8006868 <_printf_common+0x74>
 800685c:	6833      	ldr	r3, [r6, #0]
 800685e:	68e5      	ldr	r5, [r4, #12]
 8006860:	1aed      	subs	r5, r5, r3
 8006862:	43eb      	mvns	r3, r5
 8006864:	17db      	asrs	r3, r3, #31
 8006866:	401d      	ands	r5, r3
 8006868:	68a3      	ldr	r3, [r4, #8]
 800686a:	6922      	ldr	r2, [r4, #16]
 800686c:	4293      	cmp	r3, r2
 800686e:	dd01      	ble.n	8006874 <_printf_common+0x80>
 8006870:	1a9b      	subs	r3, r3, r2
 8006872:	18ed      	adds	r5, r5, r3
 8006874:	2600      	movs	r6, #0
 8006876:	42b5      	cmp	r5, r6
 8006878:	d120      	bne.n	80068bc <_printf_common+0xc8>
 800687a:	2000      	movs	r0, #0
 800687c:	e010      	b.n	80068a0 <_printf_common+0xac>
 800687e:	3501      	adds	r5, #1
 8006880:	68e3      	ldr	r3, [r4, #12]
 8006882:	6832      	ldr	r2, [r6, #0]
 8006884:	1a9b      	subs	r3, r3, r2
 8006886:	42ab      	cmp	r3, r5
 8006888:	ddd2      	ble.n	8006830 <_printf_common+0x3c>
 800688a:	0022      	movs	r2, r4
 800688c:	2301      	movs	r3, #1
 800688e:	9901      	ldr	r1, [sp, #4]
 8006890:	9800      	ldr	r0, [sp, #0]
 8006892:	9f08      	ldr	r7, [sp, #32]
 8006894:	3219      	adds	r2, #25
 8006896:	47b8      	blx	r7
 8006898:	3001      	adds	r0, #1
 800689a:	d1f0      	bne.n	800687e <_printf_common+0x8a>
 800689c:	2001      	movs	r0, #1
 800689e:	4240      	negs	r0, r0
 80068a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80068a2:	2030      	movs	r0, #48	@ 0x30
 80068a4:	18e1      	adds	r1, r4, r3
 80068a6:	3143      	adds	r1, #67	@ 0x43
 80068a8:	7008      	strb	r0, [r1, #0]
 80068aa:	0021      	movs	r1, r4
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	3145      	adds	r1, #69	@ 0x45
 80068b0:	7809      	ldrb	r1, [r1, #0]
 80068b2:	18a2      	adds	r2, r4, r2
 80068b4:	3243      	adds	r2, #67	@ 0x43
 80068b6:	3302      	adds	r3, #2
 80068b8:	7011      	strb	r1, [r2, #0]
 80068ba:	e7c1      	b.n	8006840 <_printf_common+0x4c>
 80068bc:	0022      	movs	r2, r4
 80068be:	2301      	movs	r3, #1
 80068c0:	9901      	ldr	r1, [sp, #4]
 80068c2:	9800      	ldr	r0, [sp, #0]
 80068c4:	9f08      	ldr	r7, [sp, #32]
 80068c6:	321a      	adds	r2, #26
 80068c8:	47b8      	blx	r7
 80068ca:	3001      	adds	r0, #1
 80068cc:	d0e6      	beq.n	800689c <_printf_common+0xa8>
 80068ce:	3601      	adds	r6, #1
 80068d0:	e7d1      	b.n	8006876 <_printf_common+0x82>
	...

080068d4 <_printf_i>:
 80068d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068d6:	b08b      	sub	sp, #44	@ 0x2c
 80068d8:	9206      	str	r2, [sp, #24]
 80068da:	000a      	movs	r2, r1
 80068dc:	3243      	adds	r2, #67	@ 0x43
 80068de:	9307      	str	r3, [sp, #28]
 80068e0:	9005      	str	r0, [sp, #20]
 80068e2:	9203      	str	r2, [sp, #12]
 80068e4:	7e0a      	ldrb	r2, [r1, #24]
 80068e6:	000c      	movs	r4, r1
 80068e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80068ea:	2a78      	cmp	r2, #120	@ 0x78
 80068ec:	d809      	bhi.n	8006902 <_printf_i+0x2e>
 80068ee:	2a62      	cmp	r2, #98	@ 0x62
 80068f0:	d80b      	bhi.n	800690a <_printf_i+0x36>
 80068f2:	2a00      	cmp	r2, #0
 80068f4:	d100      	bne.n	80068f8 <_printf_i+0x24>
 80068f6:	e0bc      	b.n	8006a72 <_printf_i+0x19e>
 80068f8:	497b      	ldr	r1, [pc, #492]	@ (8006ae8 <_printf_i+0x214>)
 80068fa:	9104      	str	r1, [sp, #16]
 80068fc:	2a58      	cmp	r2, #88	@ 0x58
 80068fe:	d100      	bne.n	8006902 <_printf_i+0x2e>
 8006900:	e090      	b.n	8006a24 <_printf_i+0x150>
 8006902:	0025      	movs	r5, r4
 8006904:	3542      	adds	r5, #66	@ 0x42
 8006906:	702a      	strb	r2, [r5, #0]
 8006908:	e022      	b.n	8006950 <_printf_i+0x7c>
 800690a:	0010      	movs	r0, r2
 800690c:	3863      	subs	r0, #99	@ 0x63
 800690e:	2815      	cmp	r0, #21
 8006910:	d8f7      	bhi.n	8006902 <_printf_i+0x2e>
 8006912:	f7f9 fbf9 	bl	8000108 <__gnu_thumb1_case_shi>
 8006916:	0016      	.short	0x0016
 8006918:	fff6001f 	.word	0xfff6001f
 800691c:	fff6fff6 	.word	0xfff6fff6
 8006920:	001ffff6 	.word	0x001ffff6
 8006924:	fff6fff6 	.word	0xfff6fff6
 8006928:	fff6fff6 	.word	0xfff6fff6
 800692c:	003600a1 	.word	0x003600a1
 8006930:	fff60080 	.word	0xfff60080
 8006934:	00b2fff6 	.word	0x00b2fff6
 8006938:	0036fff6 	.word	0x0036fff6
 800693c:	fff6fff6 	.word	0xfff6fff6
 8006940:	0084      	.short	0x0084
 8006942:	0025      	movs	r5, r4
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	3542      	adds	r5, #66	@ 0x42
 8006948:	1d11      	adds	r1, r2, #4
 800694a:	6019      	str	r1, [r3, #0]
 800694c:	6813      	ldr	r3, [r2, #0]
 800694e:	702b      	strb	r3, [r5, #0]
 8006950:	2301      	movs	r3, #1
 8006952:	e0a0      	b.n	8006a96 <_printf_i+0x1c2>
 8006954:	6818      	ldr	r0, [r3, #0]
 8006956:	6809      	ldr	r1, [r1, #0]
 8006958:	1d02      	adds	r2, r0, #4
 800695a:	060d      	lsls	r5, r1, #24
 800695c:	d50b      	bpl.n	8006976 <_printf_i+0xa2>
 800695e:	6806      	ldr	r6, [r0, #0]
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	2e00      	cmp	r6, #0
 8006964:	da03      	bge.n	800696e <_printf_i+0x9a>
 8006966:	232d      	movs	r3, #45	@ 0x2d
 8006968:	9a03      	ldr	r2, [sp, #12]
 800696a:	4276      	negs	r6, r6
 800696c:	7013      	strb	r3, [r2, #0]
 800696e:	4b5e      	ldr	r3, [pc, #376]	@ (8006ae8 <_printf_i+0x214>)
 8006970:	270a      	movs	r7, #10
 8006972:	9304      	str	r3, [sp, #16]
 8006974:	e018      	b.n	80069a8 <_printf_i+0xd4>
 8006976:	6806      	ldr	r6, [r0, #0]
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	0649      	lsls	r1, r1, #25
 800697c:	d5f1      	bpl.n	8006962 <_printf_i+0x8e>
 800697e:	b236      	sxth	r6, r6
 8006980:	e7ef      	b.n	8006962 <_printf_i+0x8e>
 8006982:	6808      	ldr	r0, [r1, #0]
 8006984:	6819      	ldr	r1, [r3, #0]
 8006986:	c940      	ldmia	r1!, {r6}
 8006988:	0605      	lsls	r5, r0, #24
 800698a:	d402      	bmi.n	8006992 <_printf_i+0xbe>
 800698c:	0640      	lsls	r0, r0, #25
 800698e:	d500      	bpl.n	8006992 <_printf_i+0xbe>
 8006990:	b2b6      	uxth	r6, r6
 8006992:	6019      	str	r1, [r3, #0]
 8006994:	4b54      	ldr	r3, [pc, #336]	@ (8006ae8 <_printf_i+0x214>)
 8006996:	270a      	movs	r7, #10
 8006998:	9304      	str	r3, [sp, #16]
 800699a:	2a6f      	cmp	r2, #111	@ 0x6f
 800699c:	d100      	bne.n	80069a0 <_printf_i+0xcc>
 800699e:	3f02      	subs	r7, #2
 80069a0:	0023      	movs	r3, r4
 80069a2:	2200      	movs	r2, #0
 80069a4:	3343      	adds	r3, #67	@ 0x43
 80069a6:	701a      	strb	r2, [r3, #0]
 80069a8:	6863      	ldr	r3, [r4, #4]
 80069aa:	60a3      	str	r3, [r4, #8]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	db03      	blt.n	80069b8 <_printf_i+0xe4>
 80069b0:	2104      	movs	r1, #4
 80069b2:	6822      	ldr	r2, [r4, #0]
 80069b4:	438a      	bics	r2, r1
 80069b6:	6022      	str	r2, [r4, #0]
 80069b8:	2e00      	cmp	r6, #0
 80069ba:	d102      	bne.n	80069c2 <_printf_i+0xee>
 80069bc:	9d03      	ldr	r5, [sp, #12]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00c      	beq.n	80069dc <_printf_i+0x108>
 80069c2:	9d03      	ldr	r5, [sp, #12]
 80069c4:	0030      	movs	r0, r6
 80069c6:	0039      	movs	r1, r7
 80069c8:	f7f9 fc2e 	bl	8000228 <__aeabi_uidivmod>
 80069cc:	9b04      	ldr	r3, [sp, #16]
 80069ce:	3d01      	subs	r5, #1
 80069d0:	5c5b      	ldrb	r3, [r3, r1]
 80069d2:	702b      	strb	r3, [r5, #0]
 80069d4:	0033      	movs	r3, r6
 80069d6:	0006      	movs	r6, r0
 80069d8:	429f      	cmp	r7, r3
 80069da:	d9f3      	bls.n	80069c4 <_printf_i+0xf0>
 80069dc:	2f08      	cmp	r7, #8
 80069de:	d109      	bne.n	80069f4 <_printf_i+0x120>
 80069e0:	6823      	ldr	r3, [r4, #0]
 80069e2:	07db      	lsls	r3, r3, #31
 80069e4:	d506      	bpl.n	80069f4 <_printf_i+0x120>
 80069e6:	6862      	ldr	r2, [r4, #4]
 80069e8:	6923      	ldr	r3, [r4, #16]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	dc02      	bgt.n	80069f4 <_printf_i+0x120>
 80069ee:	2330      	movs	r3, #48	@ 0x30
 80069f0:	3d01      	subs	r5, #1
 80069f2:	702b      	strb	r3, [r5, #0]
 80069f4:	9b03      	ldr	r3, [sp, #12]
 80069f6:	1b5b      	subs	r3, r3, r5
 80069f8:	6123      	str	r3, [r4, #16]
 80069fa:	9b07      	ldr	r3, [sp, #28]
 80069fc:	0021      	movs	r1, r4
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	9805      	ldr	r0, [sp, #20]
 8006a02:	9b06      	ldr	r3, [sp, #24]
 8006a04:	aa09      	add	r2, sp, #36	@ 0x24
 8006a06:	f7ff fef5 	bl	80067f4 <_printf_common>
 8006a0a:	3001      	adds	r0, #1
 8006a0c:	d148      	bne.n	8006aa0 <_printf_i+0x1cc>
 8006a0e:	2001      	movs	r0, #1
 8006a10:	4240      	negs	r0, r0
 8006a12:	b00b      	add	sp, #44	@ 0x2c
 8006a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a16:	2220      	movs	r2, #32
 8006a18:	6809      	ldr	r1, [r1, #0]
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	6022      	str	r2, [r4, #0]
 8006a1e:	2278      	movs	r2, #120	@ 0x78
 8006a20:	4932      	ldr	r1, [pc, #200]	@ (8006aec <_printf_i+0x218>)
 8006a22:	9104      	str	r1, [sp, #16]
 8006a24:	0021      	movs	r1, r4
 8006a26:	3145      	adds	r1, #69	@ 0x45
 8006a28:	700a      	strb	r2, [r1, #0]
 8006a2a:	6819      	ldr	r1, [r3, #0]
 8006a2c:	6822      	ldr	r2, [r4, #0]
 8006a2e:	c940      	ldmia	r1!, {r6}
 8006a30:	0610      	lsls	r0, r2, #24
 8006a32:	d402      	bmi.n	8006a3a <_printf_i+0x166>
 8006a34:	0650      	lsls	r0, r2, #25
 8006a36:	d500      	bpl.n	8006a3a <_printf_i+0x166>
 8006a38:	b2b6      	uxth	r6, r6
 8006a3a:	6019      	str	r1, [r3, #0]
 8006a3c:	07d3      	lsls	r3, r2, #31
 8006a3e:	d502      	bpl.n	8006a46 <_printf_i+0x172>
 8006a40:	2320      	movs	r3, #32
 8006a42:	4313      	orrs	r3, r2
 8006a44:	6023      	str	r3, [r4, #0]
 8006a46:	2e00      	cmp	r6, #0
 8006a48:	d001      	beq.n	8006a4e <_printf_i+0x17a>
 8006a4a:	2710      	movs	r7, #16
 8006a4c:	e7a8      	b.n	80069a0 <_printf_i+0xcc>
 8006a4e:	2220      	movs	r2, #32
 8006a50:	6823      	ldr	r3, [r4, #0]
 8006a52:	4393      	bics	r3, r2
 8006a54:	6023      	str	r3, [r4, #0]
 8006a56:	e7f8      	b.n	8006a4a <_printf_i+0x176>
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	680d      	ldr	r5, [r1, #0]
 8006a5c:	1d10      	adds	r0, r2, #4
 8006a5e:	6949      	ldr	r1, [r1, #20]
 8006a60:	6018      	str	r0, [r3, #0]
 8006a62:	6813      	ldr	r3, [r2, #0]
 8006a64:	062e      	lsls	r6, r5, #24
 8006a66:	d501      	bpl.n	8006a6c <_printf_i+0x198>
 8006a68:	6019      	str	r1, [r3, #0]
 8006a6a:	e002      	b.n	8006a72 <_printf_i+0x19e>
 8006a6c:	066d      	lsls	r5, r5, #25
 8006a6e:	d5fb      	bpl.n	8006a68 <_printf_i+0x194>
 8006a70:	8019      	strh	r1, [r3, #0]
 8006a72:	2300      	movs	r3, #0
 8006a74:	9d03      	ldr	r5, [sp, #12]
 8006a76:	6123      	str	r3, [r4, #16]
 8006a78:	e7bf      	b.n	80069fa <_printf_i+0x126>
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	1d11      	adds	r1, r2, #4
 8006a7e:	6019      	str	r1, [r3, #0]
 8006a80:	6815      	ldr	r5, [r2, #0]
 8006a82:	2100      	movs	r1, #0
 8006a84:	0028      	movs	r0, r5
 8006a86:	6862      	ldr	r2, [r4, #4]
 8006a88:	f000 f986 	bl	8006d98 <memchr>
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	d001      	beq.n	8006a94 <_printf_i+0x1c0>
 8006a90:	1b40      	subs	r0, r0, r5
 8006a92:	6060      	str	r0, [r4, #4]
 8006a94:	6863      	ldr	r3, [r4, #4]
 8006a96:	6123      	str	r3, [r4, #16]
 8006a98:	2300      	movs	r3, #0
 8006a9a:	9a03      	ldr	r2, [sp, #12]
 8006a9c:	7013      	strb	r3, [r2, #0]
 8006a9e:	e7ac      	b.n	80069fa <_printf_i+0x126>
 8006aa0:	002a      	movs	r2, r5
 8006aa2:	6923      	ldr	r3, [r4, #16]
 8006aa4:	9906      	ldr	r1, [sp, #24]
 8006aa6:	9805      	ldr	r0, [sp, #20]
 8006aa8:	9d07      	ldr	r5, [sp, #28]
 8006aaa:	47a8      	blx	r5
 8006aac:	3001      	adds	r0, #1
 8006aae:	d0ae      	beq.n	8006a0e <_printf_i+0x13a>
 8006ab0:	6823      	ldr	r3, [r4, #0]
 8006ab2:	079b      	lsls	r3, r3, #30
 8006ab4:	d415      	bmi.n	8006ae2 <_printf_i+0x20e>
 8006ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ab8:	68e0      	ldr	r0, [r4, #12]
 8006aba:	4298      	cmp	r0, r3
 8006abc:	daa9      	bge.n	8006a12 <_printf_i+0x13e>
 8006abe:	0018      	movs	r0, r3
 8006ac0:	e7a7      	b.n	8006a12 <_printf_i+0x13e>
 8006ac2:	0022      	movs	r2, r4
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	9906      	ldr	r1, [sp, #24]
 8006ac8:	9805      	ldr	r0, [sp, #20]
 8006aca:	9e07      	ldr	r6, [sp, #28]
 8006acc:	3219      	adds	r2, #25
 8006ace:	47b0      	blx	r6
 8006ad0:	3001      	adds	r0, #1
 8006ad2:	d09c      	beq.n	8006a0e <_printf_i+0x13a>
 8006ad4:	3501      	adds	r5, #1
 8006ad6:	68e3      	ldr	r3, [r4, #12]
 8006ad8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ada:	1a9b      	subs	r3, r3, r2
 8006adc:	42ab      	cmp	r3, r5
 8006ade:	dcf0      	bgt.n	8006ac2 <_printf_i+0x1ee>
 8006ae0:	e7e9      	b.n	8006ab6 <_printf_i+0x1e2>
 8006ae2:	2500      	movs	r5, #0
 8006ae4:	e7f7      	b.n	8006ad6 <_printf_i+0x202>
 8006ae6:	46c0      	nop			@ (mov r8, r8)
 8006ae8:	08008855 	.word	0x08008855
 8006aec:	08008866 	.word	0x08008866

08006af0 <__sflush_r>:
 8006af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006af2:	220c      	movs	r2, #12
 8006af4:	5e8b      	ldrsh	r3, [r1, r2]
 8006af6:	0005      	movs	r5, r0
 8006af8:	000c      	movs	r4, r1
 8006afa:	071a      	lsls	r2, r3, #28
 8006afc:	d456      	bmi.n	8006bac <__sflush_r+0xbc>
 8006afe:	684a      	ldr	r2, [r1, #4]
 8006b00:	2a00      	cmp	r2, #0
 8006b02:	dc02      	bgt.n	8006b0a <__sflush_r+0x1a>
 8006b04:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8006b06:	2a00      	cmp	r2, #0
 8006b08:	dd4e      	ble.n	8006ba8 <__sflush_r+0xb8>
 8006b0a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006b0c:	2f00      	cmp	r7, #0
 8006b0e:	d04b      	beq.n	8006ba8 <__sflush_r+0xb8>
 8006b10:	2200      	movs	r2, #0
 8006b12:	2080      	movs	r0, #128	@ 0x80
 8006b14:	682e      	ldr	r6, [r5, #0]
 8006b16:	602a      	str	r2, [r5, #0]
 8006b18:	001a      	movs	r2, r3
 8006b1a:	0140      	lsls	r0, r0, #5
 8006b1c:	6a21      	ldr	r1, [r4, #32]
 8006b1e:	4002      	ands	r2, r0
 8006b20:	4203      	tst	r3, r0
 8006b22:	d033      	beq.n	8006b8c <__sflush_r+0x9c>
 8006b24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b26:	89a3      	ldrh	r3, [r4, #12]
 8006b28:	075b      	lsls	r3, r3, #29
 8006b2a:	d506      	bpl.n	8006b3a <__sflush_r+0x4a>
 8006b2c:	6863      	ldr	r3, [r4, #4]
 8006b2e:	1ad2      	subs	r2, r2, r3
 8006b30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <__sflush_r+0x4a>
 8006b36:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b38:	1ad2      	subs	r2, r2, r3
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	0028      	movs	r0, r5
 8006b3e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006b40:	6a21      	ldr	r1, [r4, #32]
 8006b42:	47b8      	blx	r7
 8006b44:	89a2      	ldrh	r2, [r4, #12]
 8006b46:	1c43      	adds	r3, r0, #1
 8006b48:	d106      	bne.n	8006b58 <__sflush_r+0x68>
 8006b4a:	6829      	ldr	r1, [r5, #0]
 8006b4c:	291d      	cmp	r1, #29
 8006b4e:	d846      	bhi.n	8006bde <__sflush_r+0xee>
 8006b50:	4b29      	ldr	r3, [pc, #164]	@ (8006bf8 <__sflush_r+0x108>)
 8006b52:	410b      	asrs	r3, r1
 8006b54:	07db      	lsls	r3, r3, #31
 8006b56:	d442      	bmi.n	8006bde <__sflush_r+0xee>
 8006b58:	2300      	movs	r3, #0
 8006b5a:	6063      	str	r3, [r4, #4]
 8006b5c:	6923      	ldr	r3, [r4, #16]
 8006b5e:	6023      	str	r3, [r4, #0]
 8006b60:	04d2      	lsls	r2, r2, #19
 8006b62:	d505      	bpl.n	8006b70 <__sflush_r+0x80>
 8006b64:	1c43      	adds	r3, r0, #1
 8006b66:	d102      	bne.n	8006b6e <__sflush_r+0x7e>
 8006b68:	682b      	ldr	r3, [r5, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d100      	bne.n	8006b70 <__sflush_r+0x80>
 8006b6e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b72:	602e      	str	r6, [r5, #0]
 8006b74:	2900      	cmp	r1, #0
 8006b76:	d017      	beq.n	8006ba8 <__sflush_r+0xb8>
 8006b78:	0023      	movs	r3, r4
 8006b7a:	3344      	adds	r3, #68	@ 0x44
 8006b7c:	4299      	cmp	r1, r3
 8006b7e:	d002      	beq.n	8006b86 <__sflush_r+0x96>
 8006b80:	0028      	movs	r0, r5
 8006b82:	f7ff fbdd 	bl	8006340 <_free_r>
 8006b86:	2300      	movs	r3, #0
 8006b88:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b8a:	e00d      	b.n	8006ba8 <__sflush_r+0xb8>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	0028      	movs	r0, r5
 8006b90:	47b8      	blx	r7
 8006b92:	0002      	movs	r2, r0
 8006b94:	1c43      	adds	r3, r0, #1
 8006b96:	d1c6      	bne.n	8006b26 <__sflush_r+0x36>
 8006b98:	682b      	ldr	r3, [r5, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d0c3      	beq.n	8006b26 <__sflush_r+0x36>
 8006b9e:	2b1d      	cmp	r3, #29
 8006ba0:	d001      	beq.n	8006ba6 <__sflush_r+0xb6>
 8006ba2:	2b16      	cmp	r3, #22
 8006ba4:	d11a      	bne.n	8006bdc <__sflush_r+0xec>
 8006ba6:	602e      	str	r6, [r5, #0]
 8006ba8:	2000      	movs	r0, #0
 8006baa:	e01e      	b.n	8006bea <__sflush_r+0xfa>
 8006bac:	690e      	ldr	r6, [r1, #16]
 8006bae:	2e00      	cmp	r6, #0
 8006bb0:	d0fa      	beq.n	8006ba8 <__sflush_r+0xb8>
 8006bb2:	680f      	ldr	r7, [r1, #0]
 8006bb4:	600e      	str	r6, [r1, #0]
 8006bb6:	1bba      	subs	r2, r7, r6
 8006bb8:	9201      	str	r2, [sp, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	079b      	lsls	r3, r3, #30
 8006bbe:	d100      	bne.n	8006bc2 <__sflush_r+0xd2>
 8006bc0:	694a      	ldr	r2, [r1, #20]
 8006bc2:	60a2      	str	r2, [r4, #8]
 8006bc4:	9b01      	ldr	r3, [sp, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	ddee      	ble.n	8006ba8 <__sflush_r+0xb8>
 8006bca:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006bcc:	0032      	movs	r2, r6
 8006bce:	001f      	movs	r7, r3
 8006bd0:	0028      	movs	r0, r5
 8006bd2:	9b01      	ldr	r3, [sp, #4]
 8006bd4:	6a21      	ldr	r1, [r4, #32]
 8006bd6:	47b8      	blx	r7
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	dc07      	bgt.n	8006bec <__sflush_r+0xfc>
 8006bdc:	89a2      	ldrh	r2, [r4, #12]
 8006bde:	2340      	movs	r3, #64	@ 0x40
 8006be0:	2001      	movs	r0, #1
 8006be2:	4313      	orrs	r3, r2
 8006be4:	b21b      	sxth	r3, r3
 8006be6:	81a3      	strh	r3, [r4, #12]
 8006be8:	4240      	negs	r0, r0
 8006bea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006bec:	9b01      	ldr	r3, [sp, #4]
 8006bee:	1836      	adds	r6, r6, r0
 8006bf0:	1a1b      	subs	r3, r3, r0
 8006bf2:	9301      	str	r3, [sp, #4]
 8006bf4:	e7e6      	b.n	8006bc4 <__sflush_r+0xd4>
 8006bf6:	46c0      	nop			@ (mov r8, r8)
 8006bf8:	dfbffffe 	.word	0xdfbffffe

08006bfc <_fflush_r>:
 8006bfc:	690b      	ldr	r3, [r1, #16]
 8006bfe:	b570      	push	{r4, r5, r6, lr}
 8006c00:	0005      	movs	r5, r0
 8006c02:	000c      	movs	r4, r1
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d102      	bne.n	8006c0e <_fflush_r+0x12>
 8006c08:	2500      	movs	r5, #0
 8006c0a:	0028      	movs	r0, r5
 8006c0c:	bd70      	pop	{r4, r5, r6, pc}
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	d004      	beq.n	8006c1c <_fflush_r+0x20>
 8006c12:	6a03      	ldr	r3, [r0, #32]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d101      	bne.n	8006c1c <_fflush_r+0x20>
 8006c18:	f7ff f93e 	bl	8005e98 <__sinit>
 8006c1c:	220c      	movs	r2, #12
 8006c1e:	5ea3      	ldrsh	r3, [r4, r2]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d0f1      	beq.n	8006c08 <_fflush_r+0xc>
 8006c24:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c26:	07d2      	lsls	r2, r2, #31
 8006c28:	d404      	bmi.n	8006c34 <_fflush_r+0x38>
 8006c2a:	059b      	lsls	r3, r3, #22
 8006c2c:	d402      	bmi.n	8006c34 <_fflush_r+0x38>
 8006c2e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c30:	f7ff fb7b 	bl	800632a <__retarget_lock_acquire_recursive>
 8006c34:	0028      	movs	r0, r5
 8006c36:	0021      	movs	r1, r4
 8006c38:	f7ff ff5a 	bl	8006af0 <__sflush_r>
 8006c3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c3e:	0005      	movs	r5, r0
 8006c40:	07db      	lsls	r3, r3, #31
 8006c42:	d4e2      	bmi.n	8006c0a <_fflush_r+0xe>
 8006c44:	89a3      	ldrh	r3, [r4, #12]
 8006c46:	059b      	lsls	r3, r3, #22
 8006c48:	d4df      	bmi.n	8006c0a <_fflush_r+0xe>
 8006c4a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c4c:	f7ff fb6e 	bl	800632c <__retarget_lock_release_recursive>
 8006c50:	e7db      	b.n	8006c0a <_fflush_r+0xe>
	...

08006c54 <__swhatbuf_r>:
 8006c54:	b570      	push	{r4, r5, r6, lr}
 8006c56:	000e      	movs	r6, r1
 8006c58:	001d      	movs	r5, r3
 8006c5a:	230e      	movs	r3, #14
 8006c5c:	5ec9      	ldrsh	r1, [r1, r3]
 8006c5e:	0014      	movs	r4, r2
 8006c60:	b096      	sub	sp, #88	@ 0x58
 8006c62:	2900      	cmp	r1, #0
 8006c64:	da0c      	bge.n	8006c80 <__swhatbuf_r+0x2c>
 8006c66:	89b2      	ldrh	r2, [r6, #12]
 8006c68:	2380      	movs	r3, #128	@ 0x80
 8006c6a:	0011      	movs	r1, r2
 8006c6c:	4019      	ands	r1, r3
 8006c6e:	421a      	tst	r2, r3
 8006c70:	d114      	bne.n	8006c9c <__swhatbuf_r+0x48>
 8006c72:	2380      	movs	r3, #128	@ 0x80
 8006c74:	00db      	lsls	r3, r3, #3
 8006c76:	2000      	movs	r0, #0
 8006c78:	6029      	str	r1, [r5, #0]
 8006c7a:	6023      	str	r3, [r4, #0]
 8006c7c:	b016      	add	sp, #88	@ 0x58
 8006c7e:	bd70      	pop	{r4, r5, r6, pc}
 8006c80:	466a      	mov	r2, sp
 8006c82:	f000 f853 	bl	8006d2c <_fstat_r>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	dbed      	blt.n	8006c66 <__swhatbuf_r+0x12>
 8006c8a:	23f0      	movs	r3, #240	@ 0xf0
 8006c8c:	9901      	ldr	r1, [sp, #4]
 8006c8e:	021b      	lsls	r3, r3, #8
 8006c90:	4019      	ands	r1, r3
 8006c92:	4b04      	ldr	r3, [pc, #16]	@ (8006ca4 <__swhatbuf_r+0x50>)
 8006c94:	18c9      	adds	r1, r1, r3
 8006c96:	424b      	negs	r3, r1
 8006c98:	4159      	adcs	r1, r3
 8006c9a:	e7ea      	b.n	8006c72 <__swhatbuf_r+0x1e>
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	2340      	movs	r3, #64	@ 0x40
 8006ca0:	e7e9      	b.n	8006c76 <__swhatbuf_r+0x22>
 8006ca2:	46c0      	nop			@ (mov r8, r8)
 8006ca4:	ffffe000 	.word	0xffffe000

08006ca8 <__smakebuf_r>:
 8006ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006caa:	2602      	movs	r6, #2
 8006cac:	898b      	ldrh	r3, [r1, #12]
 8006cae:	0005      	movs	r5, r0
 8006cb0:	000c      	movs	r4, r1
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	4233      	tst	r3, r6
 8006cb6:	d007      	beq.n	8006cc8 <__smakebuf_r+0x20>
 8006cb8:	0023      	movs	r3, r4
 8006cba:	3347      	adds	r3, #71	@ 0x47
 8006cbc:	6023      	str	r3, [r4, #0]
 8006cbe:	6123      	str	r3, [r4, #16]
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	6163      	str	r3, [r4, #20]
 8006cc4:	b005      	add	sp, #20
 8006cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cc8:	ab03      	add	r3, sp, #12
 8006cca:	aa02      	add	r2, sp, #8
 8006ccc:	f7ff ffc2 	bl	8006c54 <__swhatbuf_r>
 8006cd0:	9f02      	ldr	r7, [sp, #8]
 8006cd2:	9001      	str	r0, [sp, #4]
 8006cd4:	0039      	movs	r1, r7
 8006cd6:	0028      	movs	r0, r5
 8006cd8:	f7ff fb9e 	bl	8006418 <_malloc_r>
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	d108      	bne.n	8006cf2 <__smakebuf_r+0x4a>
 8006ce0:	220c      	movs	r2, #12
 8006ce2:	5ea3      	ldrsh	r3, [r4, r2]
 8006ce4:	059a      	lsls	r2, r3, #22
 8006ce6:	d4ed      	bmi.n	8006cc4 <__smakebuf_r+0x1c>
 8006ce8:	2203      	movs	r2, #3
 8006cea:	4393      	bics	r3, r2
 8006cec:	431e      	orrs	r6, r3
 8006cee:	81a6      	strh	r6, [r4, #12]
 8006cf0:	e7e2      	b.n	8006cb8 <__smakebuf_r+0x10>
 8006cf2:	2380      	movs	r3, #128	@ 0x80
 8006cf4:	89a2      	ldrh	r2, [r4, #12]
 8006cf6:	6020      	str	r0, [r4, #0]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	81a3      	strh	r3, [r4, #12]
 8006cfc:	9b03      	ldr	r3, [sp, #12]
 8006cfe:	6120      	str	r0, [r4, #16]
 8006d00:	6167      	str	r7, [r4, #20]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00c      	beq.n	8006d20 <__smakebuf_r+0x78>
 8006d06:	0028      	movs	r0, r5
 8006d08:	230e      	movs	r3, #14
 8006d0a:	5ee1      	ldrsh	r1, [r4, r3]
 8006d0c:	f000 f820 	bl	8006d50 <_isatty_r>
 8006d10:	2800      	cmp	r0, #0
 8006d12:	d005      	beq.n	8006d20 <__smakebuf_r+0x78>
 8006d14:	2303      	movs	r3, #3
 8006d16:	89a2      	ldrh	r2, [r4, #12]
 8006d18:	439a      	bics	r2, r3
 8006d1a:	3b02      	subs	r3, #2
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	81a3      	strh	r3, [r4, #12]
 8006d20:	89a3      	ldrh	r3, [r4, #12]
 8006d22:	9a01      	ldr	r2, [sp, #4]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	81a3      	strh	r3, [r4, #12]
 8006d28:	e7cc      	b.n	8006cc4 <__smakebuf_r+0x1c>
	...

08006d2c <_fstat_r>:
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	b570      	push	{r4, r5, r6, lr}
 8006d30:	4d06      	ldr	r5, [pc, #24]	@ (8006d4c <_fstat_r+0x20>)
 8006d32:	0004      	movs	r4, r0
 8006d34:	0008      	movs	r0, r1
 8006d36:	0011      	movs	r1, r2
 8006d38:	602b      	str	r3, [r5, #0]
 8006d3a:	f7fa ffde 	bl	8001cfa <_fstat>
 8006d3e:	1c43      	adds	r3, r0, #1
 8006d40:	d103      	bne.n	8006d4a <_fstat_r+0x1e>
 8006d42:	682b      	ldr	r3, [r5, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d000      	beq.n	8006d4a <_fstat_r+0x1e>
 8006d48:	6023      	str	r3, [r4, #0]
 8006d4a:	bd70      	pop	{r4, r5, r6, pc}
 8006d4c:	200013b4 	.word	0x200013b4

08006d50 <_isatty_r>:
 8006d50:	2300      	movs	r3, #0
 8006d52:	b570      	push	{r4, r5, r6, lr}
 8006d54:	4d06      	ldr	r5, [pc, #24]	@ (8006d70 <_isatty_r+0x20>)
 8006d56:	0004      	movs	r4, r0
 8006d58:	0008      	movs	r0, r1
 8006d5a:	602b      	str	r3, [r5, #0]
 8006d5c:	f7fa ffdb 	bl	8001d16 <_isatty>
 8006d60:	1c43      	adds	r3, r0, #1
 8006d62:	d103      	bne.n	8006d6c <_isatty_r+0x1c>
 8006d64:	682b      	ldr	r3, [r5, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d000      	beq.n	8006d6c <_isatty_r+0x1c>
 8006d6a:	6023      	str	r3, [r4, #0]
 8006d6c:	bd70      	pop	{r4, r5, r6, pc}
 8006d6e:	46c0      	nop			@ (mov r8, r8)
 8006d70:	200013b4 	.word	0x200013b4

08006d74 <_sbrk_r>:
 8006d74:	2300      	movs	r3, #0
 8006d76:	b570      	push	{r4, r5, r6, lr}
 8006d78:	4d06      	ldr	r5, [pc, #24]	@ (8006d94 <_sbrk_r+0x20>)
 8006d7a:	0004      	movs	r4, r0
 8006d7c:	0008      	movs	r0, r1
 8006d7e:	602b      	str	r3, [r5, #0]
 8006d80:	f7fa ffde 	bl	8001d40 <_sbrk>
 8006d84:	1c43      	adds	r3, r0, #1
 8006d86:	d103      	bne.n	8006d90 <_sbrk_r+0x1c>
 8006d88:	682b      	ldr	r3, [r5, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d000      	beq.n	8006d90 <_sbrk_r+0x1c>
 8006d8e:	6023      	str	r3, [r4, #0]
 8006d90:	bd70      	pop	{r4, r5, r6, pc}
 8006d92:	46c0      	nop			@ (mov r8, r8)
 8006d94:	200013b4 	.word	0x200013b4

08006d98 <memchr>:
 8006d98:	b2c9      	uxtb	r1, r1
 8006d9a:	1882      	adds	r2, r0, r2
 8006d9c:	4290      	cmp	r0, r2
 8006d9e:	d101      	bne.n	8006da4 <memchr+0xc>
 8006da0:	2000      	movs	r0, #0
 8006da2:	4770      	bx	lr
 8006da4:	7803      	ldrb	r3, [r0, #0]
 8006da6:	428b      	cmp	r3, r1
 8006da8:	d0fb      	beq.n	8006da2 <memchr+0xa>
 8006daa:	3001      	adds	r0, #1
 8006dac:	e7f6      	b.n	8006d9c <memchr+0x4>

08006dae <_realloc_r>:
 8006dae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006db0:	0006      	movs	r6, r0
 8006db2:	000c      	movs	r4, r1
 8006db4:	0015      	movs	r5, r2
 8006db6:	2900      	cmp	r1, #0
 8006db8:	d105      	bne.n	8006dc6 <_realloc_r+0x18>
 8006dba:	0011      	movs	r1, r2
 8006dbc:	f7ff fb2c 	bl	8006418 <_malloc_r>
 8006dc0:	0004      	movs	r4, r0
 8006dc2:	0020      	movs	r0, r4
 8006dc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006dc6:	2a00      	cmp	r2, #0
 8006dc8:	d103      	bne.n	8006dd2 <_realloc_r+0x24>
 8006dca:	f7ff fab9 	bl	8006340 <_free_r>
 8006dce:	2400      	movs	r4, #0
 8006dd0:	e7f7      	b.n	8006dc2 <_realloc_r+0x14>
 8006dd2:	f000 f81b 	bl	8006e0c <_malloc_usable_size_r>
 8006dd6:	0007      	movs	r7, r0
 8006dd8:	4285      	cmp	r5, r0
 8006dda:	d802      	bhi.n	8006de2 <_realloc_r+0x34>
 8006ddc:	0843      	lsrs	r3, r0, #1
 8006dde:	42ab      	cmp	r3, r5
 8006de0:	d3ef      	bcc.n	8006dc2 <_realloc_r+0x14>
 8006de2:	0029      	movs	r1, r5
 8006de4:	0030      	movs	r0, r6
 8006de6:	f7ff fb17 	bl	8006418 <_malloc_r>
 8006dea:	9001      	str	r0, [sp, #4]
 8006dec:	2800      	cmp	r0, #0
 8006dee:	d0ee      	beq.n	8006dce <_realloc_r+0x20>
 8006df0:	002a      	movs	r2, r5
 8006df2:	42bd      	cmp	r5, r7
 8006df4:	d900      	bls.n	8006df8 <_realloc_r+0x4a>
 8006df6:	003a      	movs	r2, r7
 8006df8:	0021      	movs	r1, r4
 8006dfa:	9801      	ldr	r0, [sp, #4]
 8006dfc:	f7ff fa97 	bl	800632e <memcpy>
 8006e00:	0021      	movs	r1, r4
 8006e02:	0030      	movs	r0, r6
 8006e04:	f7ff fa9c 	bl	8006340 <_free_r>
 8006e08:	9c01      	ldr	r4, [sp, #4]
 8006e0a:	e7da      	b.n	8006dc2 <_realloc_r+0x14>

08006e0c <_malloc_usable_size_r>:
 8006e0c:	1f0b      	subs	r3, r1, #4
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	1f18      	subs	r0, r3, #4
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	da01      	bge.n	8006e1a <_malloc_usable_size_r+0xe>
 8006e16:	580b      	ldr	r3, [r1, r0]
 8006e18:	18c0      	adds	r0, r0, r3
 8006e1a:	4770      	bx	lr

08006e1c <_init>:
 8006e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1e:	46c0      	nop			@ (mov r8, r8)
 8006e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e22:	bc08      	pop	{r3}
 8006e24:	469e      	mov	lr, r3
 8006e26:	4770      	bx	lr

08006e28 <_fini>:
 8006e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2a:	46c0      	nop			@ (mov r8, r8)
 8006e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e2e:	bc08      	pop	{r3}
 8006e30:	469e      	mov	lr, r3
 8006e32:	4770      	bx	lr
